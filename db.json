{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"src/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"src/images/components.png","path":"images/components.png","modified":0,"renderable":0},{"_id":"src/images/data.png","path":"images/data.png","modified":0,"renderable":0},{"_id":"src/images/mvvm.png","path":"images/mvvm.png","modified":0,"renderable":0},{"_id":"src/images/props-events.png","path":"images/props-events.png","modified":0,"renderable":0},{"_id":"src/images/state.png","path":"images/state.png","modified":0,"renderable":0},{"_id":"src/images/hn-architecture.png","path":"images/hn-architecture.png","modified":0,"renderable":0},{"_id":"src/images/hn.png","path":"images/hn.png","modified":0,"renderable":0},{"_id":"src/images/lifecycle.png","path":"images/lifecycle.png","modified":0,"renderable":0},{"_id":"src/images/vue-component.png","path":"images/vue-component.png","modified":0,"renderable":0},{"_id":"themes/vue/source/css/benchmark.styl","path":"css/benchmark.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/search.styl","path":"css/search.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/vue/source/images/actualize.png","path":"images/actualize.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/check.png","path":"images/check.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/down.png","path":"images/down.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/feed.png","path":"images/feed.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/2mhost.png","path":"images/2mhost.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/chaitin.png","path":"images/chaitin.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/htmlburger.png","path":"images/htmlburger.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/itunescn.png","path":"images/itunescn.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons.png","path":"images/icons.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/jsfiddle.png","path":"images/jsfiddle.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/menu.png","path":"images/menu.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/juejin.png","path":"images/juejin.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/laravel.png","path":"images/laravel.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/patreon.png","path":"images/patreon.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/monterail.png","path":"images/monterail.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/someline.png","path":"images/someline.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/strikingly.png","path":"images/strikingly.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/tde.png","path":"images/tde.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/transition.png","path":"images/transition.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/trisoft.png","path":"images/trisoft.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/vuejobs.png","path":"images/vuejobs.png","modified":0,"renderable":1},{"_id":"src/images/vue-component-with-preprocessors.png","path":"images/vue-component-with-preprocessors.png","modified":0,"renderable":0},{"_id":"themes/vue/source/js/vue.min.js","path":"js/vue.min.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/vue.js","path":"js/vue.js","modified":0,"renderable":1}],"Cache":[{"_id":"src/CNAME","hash":"ecba907658b183b0f0cf99cbd916caa5f78a2136","modified":1478519250000},{"_id":"src/index.md","hash":"fd945de1e31344f0d8be59bcc87e3f5fda468e11","modified":1478519250000},{"_id":"themes/vue/_config.yml","hash":"969bd537e8d3eb7282a82762918855fe3f265ea2","modified":1478519250000},{"_id":"src/_posts/011-component.md","hash":"9ad67d44196fdc224c27e14b67fa4f83ffac7fd5","modified":1478519250000},{"_id":"src/_posts/1.0.0-release.md","hash":"f530bc04b8a0635fdbc8f2659fb1129cf02c233b","modified":1478519250000},{"_id":"src/_posts/announcing-2.0.md","hash":"32c4bd9cfa02cf9bd79232b4718e4d42d85e14c3","modified":1478519250000},{"_id":"src/_posts/012-release.md","hash":"5eaddce1a3a6544568c6cd965c27ed2329926d1e","modified":1478519250000},{"_id":"src/_posts/common-gotchas.md","hash":"fdc42c53acb3bd180bf0ad12b9cc8b9916a0a46f","modified":1478519250000},{"_id":"src/_posts/vue-011-release.md","hash":"2be60f8115795ffb2047b6a2d4e18fe2477cd517","modified":1478519250000},{"_id":"src/_posts/vue-next.md","hash":"c0e00533cc21804792410fe34b1b9f4903683612","modified":1478519250000},{"_id":"src/_posts/march-update.md","hash":"35317ee656c5ff190db107fdb48f57c3761c0bb8","modified":1478519250000},{"_id":"src/_posts/vue-cli.md","hash":"20c913472a116c717f0a9d3d8fd174764fd5b417","modified":1478519250000},{"_id":"src/_posts/vuejs-010-release.md","hash":"d89462ea33e99c8869a7d1445a2c7a26c95146bb","modified":1478519250000},{"_id":"src/_posts/why-no-template-url.md","hash":"b62a1f01eaa924cf3aa3d1bd5f7e721604fe8cca","modified":1478519250000},{"_id":"src/images/components.png","hash":"d4ce2f1000b166e119ea6541c78b3e31106f1fe8","modified":1478519250000},{"_id":"src/images/data.png","hash":"9279fe7689eed01474d5abee0fc39ee5b003cc5a","modified":1478519250000},{"_id":"src/images/mvvm.png","hash":"52c8a6529e7ed652041a6d71f1824db3991ea574","modified":1478519250000},{"_id":"src/images/props-events.png","hash":"9e25599114cd5ec4696f24ab631d690beac34137","modified":1478519250000},{"_id":"src/images/state.png","hash":"cab62293b1c242683dc7752b8908844792e2252b","modified":1478519250000},{"_id":"src/perf/index.md","hash":"502830ba902b59e515d8005eb00e7374c1056f34","modified":1478519250000},{"_id":"src/support-vuejs/index.md","hash":"0259f9cd9ced24d323e41c438e56b8550f6de66b","modified":1478519250000},{"_id":"themes/vue/layout/index.ejs","hash":"0196a633d800b62534f0bde54e4d435c41e9a8b0","modified":1478519250000},{"_id":"themes/vue/layout/layout.ejs","hash":"1782a5e87bb7e4d23d509ba8433aec1d45155fbc","modified":1478519250000},{"_id":"themes/vue/layout/page.ejs","hash":"2f843e7469231536a8807478910f9911f790f25b","modified":1478519250000},{"_id":"themes/vue/layout/post.ejs","hash":"aa03915a3540de78cfe8fe1c8f9e897974bf35a0","modified":1478519250000},{"_id":"src/images/hn-architecture.png","hash":"f583a2c31083afbeb0f5edb93213426e7c6c41ba","modified":1478519250000},{"_id":"src/images/hn.png","hash":"9e1332008b342502aea641dbfb7d7911d7a03df1","modified":1478519250000},{"_id":"src/images/lifecycle.png","hash":"245ed3bc3f4a0e1698faf640863a1271a3e8ad35","modified":1478519250000},{"_id":"src/v2/examples/elastic-header.md","hash":"d50b9889e6e9915a50afc3d9c34e679908d0e749","modified":1478519250000},{"_id":"src/v2/examples/firebase.md","hash":"486ea32cfc8956cf81d6ee80019139bec3cdb1a4","modified":1478519250000},{"_id":"src/v2/examples/commits.md","hash":"8a946162b0e550331c79041b6240073fd1bd5598","modified":1478519250000},{"_id":"src/v2/api/index.md","hash":"5d6910a8f5387fe0ee9a1d46646d1fce45e8c4d6","modified":1478519250000},{"_id":"src/v2/examples/hackernews.md","hash":"e7a12882a4fe0b810772d25d9171bb0d973abca2","modified":1478519250000},{"_id":"src/v2/examples/index.md","hash":"a2f787e458fd64292f39460096c918a96c5ef723","modified":1478519250000},{"_id":"src/v2/examples/grid-component.md","hash":"564e9ec73099df5d8fd3be34d735671cb6604553","modified":1478519250000},{"_id":"src/v2/examples/modal.md","hash":"7aa3dcb09644971aeda4170e06c77e91dc11ebbc","modified":1478519250000},{"_id":"src/v2/examples/select2.md","hash":"8117ba61f28893031c94e6a0deb7c804aef0bc6f","modified":1478519250000},{"_id":"src/v2/examples/svg.md","hash":"79138027310406e2d4cf63c4ba440399246b3755","modified":1478519250000},{"_id":"src/v2/examples/todomvc.md","hash":"23a65c7891b8a62eb82cd6b671391d3e8940ebe6","modified":1478519250000},{"_id":"src/v2/examples/tree-view.md","hash":"bbdedaecf75828893658045e00aca90010b7f3f1","modified":1478519250000},{"_id":"src/v2/guide/class-and-style.md","hash":"d13f0c18e388d8b27a889c03ee3b1b723f93c39e","modified":1478519250000},{"_id":"src/v2/guide/comparison.md","hash":"3a42d57ea7286e1a2e47b0454f9b2e0e88f8d629","modified":1478519250000},{"_id":"src/v2/guide/conditional.md","hash":"99537f72195229c32c564d6bfe2cf49187e596ff","modified":1478519250000},{"_id":"src/v2/guide/computed.md","hash":"73a5c2e6b93727a2fdc826ed2576cb06a47fb540","modified":1478519250000},{"_id":"src/v2/guide/components.md","hash":"0996eaa348d2911765e4ef0dce6687b56e6fae0c","modified":1478519250000},{"_id":"src/v2/guide/custom-directive.md","hash":"64b95e06d0a72436792d8e9ace20d73ca08dae94","modified":1478519250000},{"_id":"src/images/vue-component.png","hash":"c14948034d574d0cf1d24f848e4ad9f4f27271a0","modified":1478519250000},{"_id":"src/v2/guide/deployment.md","hash":"821151dfb6efac06ca2dc175be0312a453632413","modified":1478519250000},{"_id":"src/v2/guide/events.md","hash":"46aba2a6398387401eb7e5deb5c0b0120609db96","modified":1478519250000},{"_id":"src/v2/guide/forms.md","hash":"084bf8885de54d9c47614deb3a2837dcb6bc2761","modified":1478519250000},{"_id":"src/v2/guide/index.md","hash":"24d7aa3c375aa3a7a61418a4d8004d64ad97ddfc","modified":1478519250000},{"_id":"src/v2/guide/installation.md","hash":"74de9860d84e8083c4ab376f34de4235f65adee0","modified":1478519250000},{"_id":"src/v2/guide/instance.md","hash":"811c6b2ef24a378fe0dc6438fe2d0f8bbc56f5ea","modified":1478519250000},{"_id":"src/v2/guide/join.md","hash":"7f0b750a74b3878d83bac7b84a5856471cbc4b82","modified":1478519250000},{"_id":"src/v2/guide/list.md","hash":"b28ae5c40b35b0c916b87c56ee0e64423a72865e","modified":1478519250000},{"_id":"src/v2/guide/migration-vue-router.md","hash":"2a48cd3f674095021290c143f166b61cf336a4c6","modified":1478519250000},{"_id":"src/v2/guide/migration-vuex.md","hash":"d903fe7f6a6565e3958a924ad049d293edbd58d4","modified":1478519250000},{"_id":"src/v2/guide/mixins.md","hash":"1b6e6db77ebf02e97e8f46a07dbe2a2a841dab7a","modified":1478519250000},{"_id":"src/v2/guide/plugins.md","hash":"16b9957ba103b25e8f157719cc96c7e4318f1b1b","modified":1478519250000},{"_id":"src/v2/guide/migration.md","hash":"c20216d81f60e920a28035b95dd4b080cc313b38","modified":1478519250000},{"_id":"src/v2/guide/reactivity.md","hash":"c7f62e86a9e3138bc129f155421e5f04a9369b9a","modified":1478519250000},{"_id":"src/v2/guide/render-function.md","hash":"ae2e8e2f7072a5be8238801b33e2801de5e32a8e","modified":1478519250000},{"_id":"src/v2/guide/routing.md","hash":"ae7b607a1ca10143c370f0ad6b2c91e1ccf631ce","modified":1478519250000},{"_id":"src/v2/guide/single-file-components.md","hash":"4392c6700b0ee69692f13bf9b9bd9e331ee2650b","modified":1478519250000},{"_id":"src/v2/guide/ssr.md","hash":"147317bcdaddca5cef9e295e2a63a46d6d56808d","modified":1478519250000},{"_id":"src/v2/guide/state-management.md","hash":"0ac72078b7c4543ae04e1c1a526ec695eae4cbad","modified":1478519250000},{"_id":"src/v2/guide/syntax.md","hash":"6723d2abdcf03c766e18a52312667680d329ee38","modified":1478519250000},{"_id":"src/v2/guide/transitioning-state.md","hash":"4bc7b182c7361bafe3ae6485365da0e18a6030a7","modified":1478519250000},{"_id":"src/v2/guide/transitions.md","hash":"de4d9a8ade45494a2f0ecc52de87d32211b0502d","modified":1478519250000},{"_id":"themes/vue/layout/partials/ad.ejs","hash":"4cb3044d81f609c8549782f973c3d648b1ead28e","modified":1478519250000},{"_id":"src/v2/guide/unit-testing.md","hash":"8e8df0c199108d8523e523eb35ffe161c1d8432f","modified":1478519250000},{"_id":"themes/vue/layout/partials/community_dropdown.ejs","hash":"25886be909523913511ca845da2d18a5c6e0e98a","modified":1478519250000},{"_id":"themes/vue/layout/partials/header.ejs","hash":"00aa790ca5684ec5a60581e999e4fab8a8fc8dfa","modified":1478519250000},{"_id":"themes/vue/layout/partials/main_menu.ejs","hash":"17f8a2238163b35f1b5fed138037b120d816e24f","modified":1478519250000},{"_id":"themes/vue/layout/partials/sidebar.ejs","hash":"a0b3679c68882a1cc5c8680ffa9e939f7add7a56","modified":1478519250000},{"_id":"themes/vue/layout/partials/sponsors.ejs","hash":"0eac287f700e9359465198034046026649f30688","modified":1478519250000},{"_id":"themes/vue/source/css/_common.styl","hash":"6c9802a1021471866d177dd675c0c3b0df222411","modified":1478519250000},{"_id":"themes/vue/source/css/_demo.styl","hash":"495a6bd1418e4fed5e2bf4be08046f054a39b2cf","modified":1478519250000},{"_id":"themes/vue/source/css/_header.styl","hash":"58deb9f0183b0470dbb68a147e1ef344fa8a682e","modified":1478519250000},{"_id":"themes/vue/source/css/_migration.styl","hash":"5ea4f20818827c0d57a36a3006b736366c3b446f","modified":1478519250000},{"_id":"themes/vue/source/css/_settings.styl","hash":"c25843e8e63122df3f37f7583832ac577079d84b","modified":1478519250000},{"_id":"themes/vue/source/css/_sidebar.styl","hash":"5f716a46a1655b8cc6eb10c51d14a8993e53c0c7","modified":1478519250000},{"_id":"themes/vue/source/css/_sponsor.styl","hash":"6a4e1503b1e4f0e98e1e008ba846036fee3199aa","modified":1478519250000},{"_id":"themes/vue/source/css/_syntax.styl","hash":"edb004001fe151bebfdf63bbc250ba75777b5468","modified":1478519250000},{"_id":"themes/vue/source/css/benchmark.styl","hash":"95d4607b2b59623a673e131e1a267d0311fe89e6","modified":1478519250000},{"_id":"themes/vue/source/css/index.styl","hash":"0e7d5b0d0a07a4ada74072c8d471c16c121a59c0","modified":1478519250000},{"_id":"themes/vue/source/css/page.styl","hash":"06e37bc5a4a94c8a55f8533c84d9018d32afe58e","modified":1478519250000},{"_id":"themes/vue/source/css/search.styl","hash":"5117f05598154cfc84da04ec1a257bd186653ba2","modified":1478519250000},{"_id":"themes/vue/source/js/common.js","hash":"05d04a48117bd16204092c2ec11272786592e351","modified":1478519250000},{"_id":"themes/vue/source/js/smooth-scroll.min.js","hash":"86d3196a003a5cdc673a4c6ebb75db3ceee1a1a7","modified":1478519250000},{"_id":"themes/vue/source/images/actualize.png","hash":"7b9c0fefb69cc4fad0520782f5445d495975bb57","modified":1478519250000},{"_id":"themes/vue/source/images/check.png","hash":"682cf89e1802afb1dfddf07a6aed828a45b824af","modified":1478519250000},{"_id":"themes/vue/source/images/down.png","hash":"42505e12d686cf580f793bd9193acbac1e3e3a91","modified":1478519250000},{"_id":"themes/vue/source/images/feed.png","hash":"0a746dab71dca2025f63584dbd222dc5e0707ba8","modified":1478519250000},{"_id":"themes/vue/source/images/2mhost.png","hash":"a42a475ec7d2b36e82f420bd80a9957915dab2ce","modified":1478519250000},{"_id":"themes/vue/source/images/chaitin.png","hash":"0cca04b4c318b04be96ed066bc6ad3bb5f3788ec","modified":1478519250000},{"_id":"themes/vue/source/images/htmlburger.png","hash":"0005ef9559a88da3ff7b30b53e44acc5f1a14e46","modified":1478519250000},{"_id":"themes/vue/source/images/itunescn.png","hash":"75968c5e469bec3d061c9207ca872b2e57081015","modified":1478519250000},{"_id":"themes/vue/source/images/icons.png","hash":"91225ef7011e59dbe6b4b9f2666133fb5e1bc976","modified":1478519250000},{"_id":"themes/vue/source/images/jsfiddle.png","hash":"0646dceea2a62d3f5d2aabff4bdecffdf54cc8a7","modified":1478519250000},{"_id":"themes/vue/source/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1478519250000},{"_id":"themes/vue/source/images/juejin.png","hash":"a346d9068f1e4f65262fdc885c5fb362ea3f36b8","modified":1478519250000},{"_id":"themes/vue/source/images/laravel.png","hash":"d49fdacbae388601d2ff339b31aedd3c0dd3be3a","modified":1478519250000},{"_id":"themes/vue/source/images/paypal.png","hash":"4db177273d209e621a99941d6457456a0950eb96","modified":1478519250000},{"_id":"themes/vue/source/images/search.png","hash":"12d664cc51b8d53c9214830bc9b92fb340526a7b","modified":1478519250000},{"_id":"themes/vue/source/images/logo.png","hash":"a3adcce57e12725df16ebaecc313e1991b30bb68","modified":1478519250000},{"_id":"themes/vue/source/images/patreon.png","hash":"c2455d5a6a59ff2b0ce5d698a74af7ed7226438c","modified":1478519250000},{"_id":"themes/vue/source/images/monterail.png","hash":"17b3a1f12f5c40b7b94ce320cc2ec9a4df9bca5e","modified":1478519250000},{"_id":"themes/vue/source/images/someline.png","hash":"81ee000201cb80b19c7d79cc116c688c34163d36","modified":1478519250000},{"_id":"themes/vue/source/images/strikingly.png","hash":"d16ea35e0693928823b99efafc139f1ea1d6cb90","modified":1478519250000},{"_id":"themes/vue/source/images/tde.png","hash":"ffa3a10004c2510cabd23ba99bdcb5012aab3835","modified":1478519250000},{"_id":"themes/vue/source/images/transition.png","hash":"47b92628ea1263d651dab90093ff5682d2e54e68","modified":1478519250000},{"_id":"themes/vue/source/images/trisoft.png","hash":"c5689ce6833a3696406dc73bb50fa5b6b18b2dbe","modified":1478519250000},{"_id":"themes/vue/source/images/vuejobs.png","hash":"25aa2ef77fcb62051036171942f3575af2a12e9c","modified":1478519250000},{"_id":"src/images/vue-component-with-preprocessors.png","hash":"9dfddb18d5f34cbeadf6e94b4559f932dbc0f573","modified":1478519250000},{"_id":"themes/vue/source/js/vue.min.js","hash":"cb9b2c5b752e244b755b0e624a6b5533db609daa","modified":1478519250000},{"_id":"themes/vue/source/js/vue.js","hash":"e54ade87b0183c9c16bcdd390bfffe29515662c0","modified":1478519250000}],"Category":[],"Data":[],"Page":[{"index":true,"_content":"","source":"index.md","raw":"index: true\n---\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"civ8jcjm2000091m1rbn3ake1","content":"","excerpt":"","more":""},{"title":"Performance Comparisons","_content":"\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchrorously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","source":"perf/index.md","raw":"---\ntitle: Performance Comparisons\n---\n\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchrorously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"perf/index.html","comments":1,"layout":"page","_id":"civ8jcjna000291m14robgaa6","content":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchrorously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchrorously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n"},{"_content":"# Support Vue.js Development\n\n<a href=\"https://www.patreon.com/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"https://s3.amazonaws.com/patreon_public_assets/toolbox/patreon.png\">\n  <span>Support Vue.js on Patreon (recurring pledge)</span>\n</a>\n\n<a href=\"https://www.paypal.me/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-200px.png\">\n  <span>Donate via PayPal (one time)</span>\n</a>\n\n## Current premium sponsors:\n\n<p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"http://www.thedifferenceengine.io/\"><img src=\"/images/tde.png\" style=\"width: 300px\"></a></p>\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\">\n  <a href=\"https://jsfiddle.net\">\n    <img src=\"/images/jsfiddle.png\">\n  </a><a href=\"https://laravel.com\">\n    <img src=\"/images/laravel.png\">\n  </a><a href=\"https://chaitin.cn\">\n    <img src=\"/images/chaitin.png\">\n  </a><a href=\"https://htmlburger.com\" target=\"_blank\">\n    <img src=\"/images/htmlburger.png\">\n  </a><a href=\"https://starter.someline.com/\" target=\"_blank\">\n    <img src=\"/images/someline.png\">\n  </a><a href=\"http://gold.xitu.io/?utm_source=vuejs&utm_medium=image&utm_content=juejin&utm_campaign=q3_website\" target=\"_blank\">\n    <img width=\"180px\" src=\"/images/juejin.png\">\n  </a><a href=\"http://monterail.com/\" target=\"_blank\">\n    <img src=\"/images/monterail.png\">\n  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\">\n    <img src=\"/images/trisoft.png\">\n  </a><a href=\"http://actualize.co\" target=\"_blank\" style=\"width:180px\">\n    <img src=\"/images/actualize.png\" style=\"width:180px\">\n  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\">\n    <img src=\"/images/2mhost.png\">\n  </a><a href=\"https://vuejsjob.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\">\n    <img src=\"/images/vuejobs.png\">\n  </a>\n</p>\n\nVue.js is an MIT licensed open source project and completely free to use.\nHowever, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by [pledging on Patreon](https://www.patreon.com/evanyou) or [donating on PayPal](https://www.paypal.me/evanyou).\n\nIf you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: **it ensures the project that your product relies on stays healthy and actively maintained.** It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. [Get in touch on Twitter](https://twitter.com/youyuxi).\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n","source":"support-vuejs/index.md","raw":"# Support Vue.js Development\n\n<a href=\"https://www.patreon.com/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"https://s3.amazonaws.com/patreon_public_assets/toolbox/patreon.png\">\n  <span>Support Vue.js on Patreon (recurring pledge)</span>\n</a>\n\n<a href=\"https://www.paypal.me/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-200px.png\">\n  <span>Donate via PayPal (one time)</span>\n</a>\n\n## Current premium sponsors:\n\n<p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"http://www.thedifferenceengine.io/\"><img src=\"/images/tde.png\" style=\"width: 300px\"></a></p>\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\">\n  <a href=\"https://jsfiddle.net\">\n    <img src=\"/images/jsfiddle.png\">\n  </a><a href=\"https://laravel.com\">\n    <img src=\"/images/laravel.png\">\n  </a><a href=\"https://chaitin.cn\">\n    <img src=\"/images/chaitin.png\">\n  </a><a href=\"https://htmlburger.com\" target=\"_blank\">\n    <img src=\"/images/htmlburger.png\">\n  </a><a href=\"https://starter.someline.com/\" target=\"_blank\">\n    <img src=\"/images/someline.png\">\n  </a><a href=\"http://gold.xitu.io/?utm_source=vuejs&utm_medium=image&utm_content=juejin&utm_campaign=q3_website\" target=\"_blank\">\n    <img width=\"180px\" src=\"/images/juejin.png\">\n  </a><a href=\"http://monterail.com/\" target=\"_blank\">\n    <img src=\"/images/monterail.png\">\n  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\">\n    <img src=\"/images/trisoft.png\">\n  </a><a href=\"http://actualize.co\" target=\"_blank\" style=\"width:180px\">\n    <img src=\"/images/actualize.png\" style=\"width:180px\">\n  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\">\n    <img src=\"/images/2mhost.png\">\n  </a><a href=\"https://vuejsjob.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\">\n    <img src=\"/images/vuejobs.png\">\n  </a>\n</p>\n\nVue.js is an MIT licensed open source project and completely free to use.\nHowever, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by [pledging on Patreon](https://www.patreon.com/evanyou) or [donating on PayPal](https://www.paypal.me/evanyou).\n\nIf you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: **it ensures the project that your product relies on stays healthy and actively maintained.** It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. [Get in touch on Twitter](https://twitter.com/youyuxi).\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"support-vuejs/index.html","title":"","comments":1,"layout":"page","_id":"civ8jcjnd000491m1wswblvv9","content":"<h1 id=\"Support-Vue-js-Development\"><a href=\"#Support-Vue-js-Development\" class=\"headerlink\" title=\"Support Vue.js Development\"></a>Support Vue.js Development</h1><p><a href=\"https://www.patreon.com/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"https://s3.amazonaws.com/patreon_public_assets/toolbox/patreon.png\"><br>  <span>Support Vue.js on Patreon (recurring pledge)</span><br></a></p>\n<p><a href=\"https://www.paypal.me/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-200px.png\"><br>  <span>Donate via PayPal (one time)</span><br></a></p>\n<h2 id=\"Current-premium-sponsors\"><a href=\"#Current-premium-sponsors\" class=\"headerlink\" title=\"Current premium sponsors:\"></a>Current premium sponsors:</h2><p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"http://www.thedifferenceengine.io/\" target=\"_blank\" rel=\"external\"><img src=\"/images/tde.png\" style=\"width: 300px\"></a></p>\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\"><br>  <a href=\"https://jsfiddle.net\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/jsfiddle.png\"><br>  </a><a href=\"https://laravel.com\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/laravel.png\"><br>  </a><a href=\"https://chaitin.cn\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/chaitin.png\"><br>  </a><a href=\"https://htmlburger.com\" target=\"_blank\"><br>    <img src=\"/images/htmlburger.png\"><br>  </a><a href=\"https://starter.someline.com/\" target=\"_blank\"><br>    <img src=\"/images/someline.png\"><br>  </a><a href=\"http://gold.xitu.io/?utm_source=vuejs&utm_medium=image&utm_content=juejin&utm_campaign=q3_website\" target=\"_blank\"><br>    <img width=\"180px\" src=\"/images/juejin.png\"><br>  </a><a href=\"http://monterail.com/\" target=\"_blank\"><br>    <img src=\"/images/monterail.png\"><br>  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\"><br>    <img src=\"/images/trisoft.png\"><br>  </a><a href=\"http://actualize.co\" target=\"_blank\" style=\"width:180px\"><br>    <img src=\"/images/actualize.png\" style=\"width:180px\"><br>  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\"><br>    <img src=\"/images/2mhost.png\"><br>  </a><a href=\"https://vuejsjob.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\"><br>    <img src=\"/images/vuejobs.png\"><br>  </a><br></p>\n\n<p>Vue.js is an MIT licensed open source project and completely free to use.<br>However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by <a href=\"https://www.patreon.com/evanyou\" target=\"_blank\" rel=\"external\">pledging on Patreon</a> or <a href=\"https://www.paypal.me/evanyou\" target=\"_blank\" rel=\"external\">donating on PayPal</a>.</p>\n<p>If you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: <strong>it ensures the project that your product relies on stays healthy and actively maintained.</strong> It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. <a href=\"https://twitter.com/youyuxi\" target=\"_blank\" rel=\"external\">Get in touch on Twitter</a>.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n","excerpt":"","more":"<h1 id=\"Support-Vue-js-Development\"><a href=\"#Support-Vue-js-Development\" class=\"headerlink\" title=\"Support Vue.js Development\"></a>Support Vue.js Development</h1><p><a href=\"https://www.patreon.com/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"https://s3.amazonaws.com/patreon_public_assets/toolbox/patreon.png\"><br>  <span>Support Vue.js on Patreon (recurring pledge)</span><br></a></p>\n<p><a href=\"https://www.paypal.me/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"https://www.paypalobjects.com/webstatic/mktg/Logo/pp-logo-200px.png\"><br>  <span>Donate via PayPal (one time)</span><br></a></p>\n<h2 id=\"Current-premium-sponsors\"><a href=\"#Current-premium-sponsors\" class=\"headerlink\" title=\"Current premium sponsors:\"></a>Current premium sponsors:</h2><p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"http://www.thedifferenceengine.io/\"><img src=\"/images/tde.png\" style=\"width: 300px\"></a></p>\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\"><br>  <a href=\"https://jsfiddle.net\"><br>    <img src=\"/images/jsfiddle.png\"><br>  </a><a href=\"https://laravel.com\"><br>    <img src=\"/images/laravel.png\"><br>  </a><a href=\"https://chaitin.cn\"><br>    <img src=\"/images/chaitin.png\"><br>  </a><a href=\"https://htmlburger.com\" target=\"_blank\"><br>    <img src=\"/images/htmlburger.png\"><br>  </a><a href=\"https://starter.someline.com/\" target=\"_blank\"><br>    <img src=\"/images/someline.png\"><br>  </a><a href=\"http://gold.xitu.io/?utm_source=vuejs&utm_medium=image&utm_content=juejin&utm_campaign=q3_website\" target=\"_blank\"><br>    <img width=\"180px\" src=\"/images/juejin.png\"><br>  </a><a href=\"http://monterail.com/\" target=\"_blank\"><br>    <img src=\"/images/monterail.png\"><br>  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\"><br>    <img src=\"/images/trisoft.png\"><br>  </a><a href=\"http://actualize.co\" target=\"_blank\" style=\"width:180px\"><br>    <img src=\"/images/actualize.png\" style=\"width:180px\"><br>  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\"><br>    <img src=\"/images/2mhost.png\"><br>  </a><a href=\"https://vuejsjob.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\"><br>    <img src=\"/images/vuejobs.png\"><br>  </a><br></p>\n\n<p>Vue.js is an MIT licensed open source project and completely free to use.<br>However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by <a href=\"https://www.patreon.com/evanyou\">pledging on Patreon</a> or <a href=\"https://www.paypal.me/evanyou\">donating on PayPal</a>.</p>\n<p>If you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: <strong>it ensures the project that your product relies on stays healthy and actively maintained.</strong> It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. <a href=\"https://twitter.com/youyuxi\">Get in touch on Twitter</a>.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n"},{"title":"Elastic Header","type":"examples","order":7,"_content":"\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/elastic-header.md","raw":"---\ntitle: Elastic Header\ntype: examples\norder: 7\n---\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/elastic-header.html","comments":1,"layout":"page","_id":"civ8jcjo2000e91m1ucgcf671","content":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Firebase + Validation","type":"examples","order":2,"_content":"\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/firebase.md","raw":"---\ntitle: Firebase + Validation\ntype: examples\norder: 2\n---\n\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/firebase.html","comments":1,"layout":"page","_id":"civ8jcjo3000f91m1nr3c4oxs","content":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"type":"api","_content":"\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** Error is thrown in place\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm) {\n    // handle error\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render and watchers. The handler gets called with the error and the Vue instance.\n\n  > [Sentry](https://sentry.io), an error tracking service, provides [official integration](https://sentry.io/for/vue/) using this option.\n\n### ignoredElements\n\n- **Type:** `Array<string>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component', 'another-web-component'\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    mediaPlayPause: 179\n  }\n  ```\n\n  Define custom key alias(es) for v-on.\n\n## Global API\n\n<h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-nextTick\">Vue.nextTick( callback, [context] )</h3>\n\n- **Arguments:**\n  - `{Function} callback`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n  ```\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"Vue-set\">Vue.set( object, key, value )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-delete\">Vue.delete( object, key )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (simple function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixins](../guide/mixins.html#Global-Mixin)\n\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the standalone build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // -> 1\n  vm.$data === data // -> true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function with the `data` property__ (e.g. `data: () => { return { a: this.myProp }}`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.myProp` will be undefined.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // just type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a computed property__ (e.g. `aDouble: () => this.a * 2`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n  Computed properties are cached, and only re-computed on reactive dependency changes.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only, just need a function\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // -> 2\n  vm.aPlus = 3\n  vm.a       // -> 2\n  vm.aDouble // -> 4\n  ```\n\n- **See also:**\n  - [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Methods and Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object }`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      }\n    }\n  })\n  vm.a = 2 // -> new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `Function`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n## Options / Lifecycle Hooks\n\nAll lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has just been mounted where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when the data changes, before the virtual DOM is re-rendered and patched.\n\n  You can perform further state changes in this hook and they will not trigger additional re-renders.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will be in updated state when this hook is called, so you can perform DOM-dependent operations in this hook. However, in most cases you should avoid changing state in this hook, because it may lead to an infinite update loop.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:**\n  - [Custom Directives](../guide/custom-directive.html)\n  - [Assets Naming Convention](../guide/components.html#Assets-Naming-Convention)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:**\n  - [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:**\n  - [Components](../guide/components.html)\n\n## Options / Misc\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparringly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // -> 1\n  // -> 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`, the difference being that the component's own options takes higher priority than the source component being extended.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call Vue.extend on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Details:**\n\n  Change the plain text interpolation delimiters. **This option is only available in the standalone build.**\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are simply a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options - data](#data)\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // -> 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  Used to access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header)\n        createElement('main', body)\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions](../guide/render-function.html)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object that holds child components that have `ref` registered.\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n## Instance Methods / Data\n\n<h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // callback is fired immediately with current value of `a`\n  ```\n\n<h3 id=\"vm-set\">vm.$set( object, key, value )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n<h3 id=\"vm-delete\">vm.$delete( object, key )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n<h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // -> \"hi\"\n  ```\n\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n- **Arguments:**\n  - `{string} [event]`\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n<h3 id=\"vm-emit\">vm.$emit( event, [...args] )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n## Instance Methods / Lifecycle\n\n<h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n<h3 id=\"vm-nextTick\">vm.$nextTick( callback )</h3>\n\n- **Arguments:**\n  - `{Function} callback`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggle's the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if`.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:**\n  - [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement`\n\n- **Argument:** `event (required)`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.\n\n  When used on a normal element, it listens to **native DOM events** only. When used on a custom element component, it also listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Methods and Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Used for binding DOM attributes.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Component Props](../guide/components.html#Props)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](/guild/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage, see guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- v-for directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with v-once](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child comp instance -->\n  <child-comp ref=\"child\"></child-comp>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `enter`\n  - `after-enter`\n  - `before-leave`\n  - `leave`\n  - `after-leave`\n  - `before-appear`\n  - `appear`\n  - `after-appear`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with <transition> -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","source":"v2/api/index.md","raw":"---\ntype: api\n---\n\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** Error is thrown in place\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm) {\n    // handle error\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render and watchers. The handler gets called with the error and the Vue instance.\n\n  > [Sentry](https://sentry.io), an error tracking service, provides [official integration](https://sentry.io/for/vue/) using this option.\n\n### ignoredElements\n\n- **Type:** `Array<string>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component', 'another-web-component'\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    mediaPlayPause: 179\n  }\n  ```\n\n  Define custom key alias(es) for v-on.\n\n## Global API\n\n<h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-nextTick\">Vue.nextTick( callback, [context] )</h3>\n\n- **Arguments:**\n  - `{Function} callback`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n  ```\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"Vue-set\">Vue.set( object, key, value )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-delete\">Vue.delete( object, key )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (simple function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixins](../guide/mixins.html#Global-Mixin)\n\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the standalone build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // -> 1\n  vm.$data === data // -> true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function with the `data` property__ (e.g. `data: () => { return { a: this.myProp }}`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.myProp` will be undefined.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // just type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a computed property__ (e.g. `aDouble: () => this.a * 2`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n  Computed properties are cached, and only re-computed on reactive dependency changes.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only, just need a function\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // -> 2\n  vm.aPlus = 3\n  vm.a       // -> 2\n  vm.aDouble // -> 4\n  ```\n\n- **See also:**\n  - [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Methods and Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object }`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      }\n    }\n  })\n  vm.a = 2 // -> new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `Function`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n## Options / Lifecycle Hooks\n\nAll lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has just been mounted where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when the data changes, before the virtual DOM is re-rendered and patched.\n\n  You can perform further state changes in this hook and they will not trigger additional re-renders.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will be in updated state when this hook is called, so you can perform DOM-dependent operations in this hook. However, in most cases you should avoid changing state in this hook, because it may lead to an infinite update loop.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:**\n  - [Custom Directives](../guide/custom-directive.html)\n  - [Assets Naming Convention](../guide/components.html#Assets-Naming-Convention)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:**\n  - [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:**\n  - [Components](../guide/components.html)\n\n## Options / Misc\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparringly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // -> 1\n  // -> 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`, the difference being that the component's own options takes higher priority than the source component being extended.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call Vue.extend on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Details:**\n\n  Change the plain text interpolation delimiters. **This option is only available in the standalone build.**\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are simply a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options - data](#data)\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // -> 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  Used to access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header)\n        createElement('main', body)\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions](../guide/render-function.html)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object that holds child components that have `ref` registered.\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n## Instance Methods / Data\n\n<h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // callback is fired immediately with current value of `a`\n  ```\n\n<h3 id=\"vm-set\">vm.$set( object, key, value )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n<h3 id=\"vm-delete\">vm.$delete( object, key )</h3>\n\n- **Arguments:**\n  - `{Object} object`\n  - `{string} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n<h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // -> \"hi\"\n  ```\n\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n- **Arguments:**\n  - `{string} [event]`\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n<h3 id=\"vm-emit\">vm.$emit( event, [...args] )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n## Instance Methods / Lifecycle\n\n<h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n<h3 id=\"vm-nextTick\">vm.$nextTick( callback )</h3>\n\n- **Arguments:**\n  - `{Function} callback`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggle's the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if`.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:**\n  - [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement`\n\n- **Argument:** `event (required)`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.\n\n  When used on a normal element, it listens to **native DOM events** only. When used on a custom element component, it also listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Methods and Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Used for binding DOM attributes.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Component Props](../guide/components.html#Props)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](/guild/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage, see guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- v-for directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with v-once](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child comp instance -->\n  <child-comp ref=\"child\"></child-comp>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `enter`\n  - `after-enter`\n  - `before-leave`\n  - `leave`\n  - `after-leave`\n  - `before-appear`\n  - `appear`\n  - `after-appear`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with <transition> -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/api/index.html","title":"","comments":1,"layout":"page","_id":"civ8jcjo3000g91m17zuzmgjf","content":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_my_option</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></div></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> Error is thrown in place</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p><a href=\"https://sentry.io\" target=\"_blank\" rel=\"external\">Sentry</a>, an error tracking service, provides <a href=\"https://sentry.io/for/vue/\" target=\"_blank\" rel=\"external\">official integration</a> using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.ignoredElements = [</div><div class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>, <span class=\"string\">'another-web-component'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.keyCodes = &#123;</div><div class=\"line\">  <span class=\"attr\">v</span>: <span class=\"number\">86</span>,</div><div class=\"line\">  <span class=\"attr\">f1</span>: <span class=\"number\">112</span>,</div><div class=\"line\">  <span class=\"attr\">mediaPlayPause</span>: <span class=\"number\">179</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for v-on.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">'Walter'</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">'White'</span>,</div><div class=\"line\">      <span class=\"attr\">alias</span>: <span class=\"string\">'Heisenberg'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></div><div class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</div></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick\">Vue.nextTick( callback, [context] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modify data</span></div><div class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></div><div class=\"line\"><span class=\"comment\">// DOM not updated yet</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// DOM updated</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set\">Vue.set( object, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete\">Vue.delete( object, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">inserted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">componentUpdated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">unbind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register (simple function directive)</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return processed value</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register an extended constructor</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the standalone build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: res.render,</div><div class=\"line\">  <span class=\"attr\">staticRenderFns</span>: res.staticRenderFns</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// direct instance creation</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function with the <code>data</code> property</strong> (e.g. <code>data: () =&gt; { return { a: this.myProp }}</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.myProp</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// simple syntax</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object syntax with validation</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// just type check</span></div><div class=\"line\">    height: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// type check plus other validations</span></div><div class=\"line\">    age: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</div><div class=\"line\">  <span class=\"attr\">propsData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a computed property</strong> (e.g. <code>aDouble: () =&gt; this.a * 2</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n\n<p>Computed properties are cached, and only re-computed on reactive dependency changes.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// get only, just need a function</span></div><div class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// both get and set</span></div><div class=\"line\">    aPlus: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.aPlus   <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aPlus = <span class=\"number\">3</span></div><div class=\"line\">vm.a       <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aDouble <span class=\"comment\">// -&gt; 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/computed.html\">Computed Properties</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">plus</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.a++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.plus()</div><div class=\"line\">vm.a <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Methods and Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// string method name</span></div><div class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</div><div class=\"line\">    <span class=\"comment\">// deep watcher</span></div><div class=\"line\">    c: &#123;</div><div class=\"line\">      <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// -&gt; new: 2, old: 1</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p>All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has just been mounted where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when the data changes, before the virtual DOM is re-rendered and patched.</p>\n<p>You can perform further state changes in this hook and they will not trigger additional re-renders.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will be in updated state when this hook is called, so you can perform DOM-dependent operations in this hook. However, in most cases you should avoid changing state in this hook, because it may lead to an infinite update loop.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/custom-directive.html\">Custom Directives</a></li>\n<li><a href=\"../guide/components.html#Assets-Naming-Convention\">Assets Naming Convention</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-filter\"><code>Vue.filter</code></a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html\">Components</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparringly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"comment\">// -&gt; 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>, the difference being that the component’s own options takes higher priority than the source component being extended.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// extend CompA without having to call Vue.extend on either</span></div><div class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</div><div class=\"line\">  <span class=\"attr\">extends</span>: CompA,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters. <strong>This option is only available in the standalone build.</strong></p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">delimiters</span>: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are simply a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">customOption</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// -&gt; 'foo'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">    About Me</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">    Copyright 2016 Evan You</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</div><div class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</div><div class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">      createElement(<span class=\"string\">'header'</span>, header)</div><div class=\"line\">      createElement(<span class=\"string\">'main'</span>, body)</div><div class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object that holds child components that have <code>ref</code> registered.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// keypath</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\">vm.$watch(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</div><div class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></div><div class=\"line\">unwatch()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"comment\">// callback is fired</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// callback is fired immediately with current value of `a`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set\">vm.$set( object, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete\">vm.$delete( object, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hi\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} [event]</code></li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit\">vm.$emit( event, […args] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the above is the same as:</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick\">vm.$nextTick( callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// modify data</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></div><div class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// DOM is now updated</span></div><div class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"external\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggle’s the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event (required)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.</p>\n<p>When used on a normal element, it listens to <strong>native DOM events</strong> only. When used on a custom element component, it also listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Methods and Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Used for binding DOM attributes.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Component Props</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"/guild/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage, see guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-for directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with v-once</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>enter</code></li>\n<li><code>after-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>leave</code></li>\n<li><code>after-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>appear</code></li>\n<li><code>after-appear</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">transitionComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"external\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- used together with &lt;transition&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" target=\"_blank\" rel=\"external\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\" target=\"_blank\" rel=\"external\">vue-server-renderer package documentation</a>.</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_my_option</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></div></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> Error is thrown in place</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p><a href=\"https://sentry.io\">Sentry</a>, an error tracking service, provides <a href=\"https://sentry.io/for/vue/\">official integration</a> using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.ignoredElements = [</div><div class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>, <span class=\"string\">'another-web-component'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.keyCodes = &#123;</div><div class=\"line\">  <span class=\"attr\">v</span>: <span class=\"number\">86</span>,</div><div class=\"line\">  <span class=\"attr\">f1</span>: <span class=\"number\">112</span>,</div><div class=\"line\">  <span class=\"attr\">mediaPlayPause</span>: <span class=\"number\">179</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for v-on.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">'Walter'</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">'White'</span>,</div><div class=\"line\">      <span class=\"attr\">alias</span>: <span class=\"string\">'Heisenberg'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></div><div class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</div></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick\">Vue.nextTick( callback, [context] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modify data</span></div><div class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></div><div class=\"line\"><span class=\"comment\">// DOM not updated yet</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// DOM updated</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set\">Vue.set( object, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete\">Vue.delete( object, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">inserted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">componentUpdated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">unbind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register (simple function directive)</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return processed value</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register an extended constructor</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the standalone build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: res.render,</div><div class=\"line\">  <span class=\"attr\">staticRenderFns</span>: res.staticRenderFns</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// direct instance creation</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function with the <code>data</code> property</strong> (e.g. <code>data: () =&gt; { return { a: this.myProp }}</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.myProp</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// simple syntax</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object syntax with validation</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// just type check</span></div><div class=\"line\">    height: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// type check plus other validations</span></div><div class=\"line\">    age: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</div><div class=\"line\">  <span class=\"attr\">propsData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a computed property</strong> (e.g. <code>aDouble: () =&gt; this.a * 2</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n\n<p>Computed properties are cached, and only re-computed on reactive dependency changes.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// get only, just need a function</span></div><div class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// both get and set</span></div><div class=\"line\">    aPlus: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.aPlus   <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aPlus = <span class=\"number\">3</span></div><div class=\"line\">vm.a       <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aDouble <span class=\"comment\">// -&gt; 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/computed.html\">Computed Properties</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">plus</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.a++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.plus()</div><div class=\"line\">vm.a <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Methods and Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// string method name</span></div><div class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</div><div class=\"line\">    <span class=\"comment\">// deep watcher</span></div><div class=\"line\">    c: &#123;</div><div class=\"line\">      <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// -&gt; new: 2, old: 1</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p>All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has just been mounted where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when the data changes, before the virtual DOM is re-rendered and patched.</p>\n<p>You can perform further state changes in this hook and they will not trigger additional re-renders.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will be in updated state when this hook is called, so you can perform DOM-dependent operations in this hook. However, in most cases you should avoid changing state in this hook, because it may lead to an infinite update loop.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/custom-directive.html\">Custom Directives</a></li>\n<li><a href=\"../guide/components.html#Assets-Naming-Convention\">Assets Naming Convention</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-filter\"><code>Vue.filter</code></a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html\">Components</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparringly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"comment\">// -&gt; 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>, the difference being that the component’s own options takes higher priority than the source component being extended.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// extend CompA without having to call Vue.extend on either</span></div><div class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</div><div class=\"line\">  <span class=\"attr\">extends</span>: CompA,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters. <strong>This option is only available in the standalone build.</strong></p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">delimiters</span>: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are simply a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">customOption</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// -&gt; 'foo'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">    About Me</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">    Copyright 2016 Evan You</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</div><div class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</div><div class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">      createElement(<span class=\"string\">'header'</span>, header)</div><div class=\"line\">      createElement(<span class=\"string\">'main'</span>, body)</div><div class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object that holds child components that have <code>ref</code> registered.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// keypath</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\">vm.$watch(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</div><div class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></div><div class=\"line\">unwatch()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"comment\">// callback is fired</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// callback is fired immediately with current value of `a`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set\">vm.$set( object, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete\">vm.$delete( object, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} object</code></li>\n<li><code>{string} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hi\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} [event]</code></li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit\">vm.$emit( event, […args] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the above is the same as:</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick\">vm.$nextTick( callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// modify data</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></div><div class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// DOM is now updated</span></div><div class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggle’s the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event (required)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.</p>\n<p>When used on a normal element, it listens to <strong>native DOM events</strong> only. When used on a custom element component, it also listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Methods and Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Used for binding DOM attributes.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Component Props</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"/guild/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage, see guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-for directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with v-once</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>enter</code></li>\n<li><code>after-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>leave</code></li>\n<li><code>after-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>appear</code></li>\n<li><code>after-appear</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">transitionComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- used together with &lt;transition&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\">vue-server-renderer package documentation</a>.</li>\n</ul>\n"},{"title":"HackerNews Clone","type":"examples","order":10,"_content":"\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + vue-router + vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\">\n","source":"v2/examples/hackernews.md","raw":"---\ntitle: HackerNews Clone\ntype: examples\norder: 10\n---\n\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + vue-router + vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\">\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/hackernews.html","comments":1,"layout":"page","_id":"civ8jcjo6000h91m1gah70dxe","content":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\" target=\"_blank\" rel=\"external\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\" rel=\"external\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + vue-router + vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\"></p>\n","excerpt":"","more":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + vue-router + vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\"></p>\n"},{"title":"GitHub Commits","type":"examples","order":1,"_content":"\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/commits.md","raw":"---\ntitle: GitHub Commits\ntype: examples\norder: 1\n---\n\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/commits.html","comments":1,"layout":"page","_id":"civ8jcjo7000i91m1t0rcnkci","content":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Markdown Editor","type":"examples","order":0,"_content":"\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/index.md","raw":"---\ntitle: Markdown Editor\ntype: examples\norder: 0\n---\n\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/index.html","comments":1,"layout":"page","_id":"civ8jcjo8000j91m1f6fn6n3i","content":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Modal Component","type":"examples","order":6,"_content":"\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/modal.md","raw":"---\ntitle: Modal Component\ntype: examples\norder: 6\n---\n\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/modal.html","comments":1,"layout":"page","_id":"civ8jcjo8000k91m19ndwqk8l","content":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Wrapper Component","type":"examples","order":8,"_content":"\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/fruqrvdL/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/select2.md","raw":"---\ntitle: Wrapper Component\ntype: examples\norder: 8\n---\n\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/fruqrvdL/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/select2.html","comments":1,"layout":"page","_id":"civ8jcjo9000l91m114fcjfvi","content":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/fruqrvdL/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/fruqrvdL/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Grid Component","type":"examples","order":3,"_content":"\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/grid-component.md","raw":"---\ntitle: Grid Component\ntype: examples\norder: 3\n---\n\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/grid-component.html","comments":1,"layout":"page","_id":"civ8jcjoa000m91m1myjaw8kz","content":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"SVG Graph","type":"examples","order":5,"_content":"\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/svg.md","raw":"---\ntitle: SVG Graph\ntype: examples\norder: 5\n---\n\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/svg.html","comments":1,"layout":"page","_id":"civ8jcjoa000n91m16izh69w1","content":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"TodoMVC","type":"examples","order":9,"_content":"\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/todomvc.md","raw":"---\ntitle: TodoMVC\ntype: examples\norder: 9\n---\n\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/todomvc.html","comments":1,"layout":"page","_id":"civ8jcjob000o91m1fa3iy5n8","content":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Tree View","type":"examples","order":4,"_content":"\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"v2/examples/tree-view.md","raw":"---\ntitle: Tree View\ntype: examples\norder: 4\n---\n\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/examples/tree-view.html","comments":1,"layout":"page","_id":"civ8jcjoc000p91m1tsjog7z9","content":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Class and Style Bindings","type":"guide","order":6,"_content":"\nA common need for data binding is manipulating an element's class list and its inline styles. Since they are both attributes, we can use `v-bind` to handle them: we just need to calculate a final string with our expressions. However, meddling with string concatenation is annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.\n\n## Binding HTML Classes\n\n### Object Syntax\n\nWe can pass an object to `v-bind:class` to dynamically toggle classes:\n\n``` html\n<div v-bind:class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the [truthiness](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `v-bind:class` directive can also co-exist with the plain `class` attribute. So given the following template:\n\n``` html\n<div class=\"static\"\n     v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n</div>\n```\n\nAnd the following data:\n\n``` js\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\nIt will render:\n\n``` html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n``` html\n<div v-bind:class=\"classObject\"></div>\n```\n``` js\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\nThis will render the same result. We can also bind to a [computed property](computed.html) that returns an object. This is a common and powerful pattern:\n\n``` html\n<div v-bind:class=\"classObject\"></div>\n```\n``` js\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal',\n    }\n  }\n}\n```\n\n### Array Syntax\n\nWe can pass an array to `v-bind:class` to apply a list of classes:\n\n``` html\n<div v-bind:class=\"[activeClass, errorClass]\">\n```\n``` js\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n```\n\nWhich will render:\n\n``` html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n``` html\n<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\">\n```\n\nThis will always apply `errorClass`, but will only apply `activeClass` when `isActive` is `true`.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside array syntax:\n\n``` html\n<div v-bind:class=\"[{ active: isActive }, errorClass]\">\n```\n\n### With Components\n\n> This section assumes knowledge of [Vue Components](components.html). Feel free to skip it and come back later.\n\nWhen you use the `class` attribute on a custom component, those classes will be added to the component's root element. Existing classes on this element will not be overwritten.\n\nFor example, if you declare this component:\n\n``` js\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n```\n\nThen add some classes when using it:\n\n``` html\n<my-component class=\"baz boo\"></my-component>\n```\n\nThe rendered HTML will be:\n\n``` html\n<p class=\"foo bar baz boo\">Hi</p>\n```\n\nThe same is true for class bindings:\n\n``` html\n<my-component v-bind:class=\"{ active: isActive }\"></my-component>\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n``` html\n<p class=\"foo bar active\"></p>\n```\n\n## Binding Inline Styles\n\n### Object Syntax\n\nThe object syntax for `v-bind:style` is pretty straightforward - it looks almost like CSS, except it's a JavaScript object. You can use either camelCase or kebab-case for the CSS property names:\n\n``` html\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n``` js\ndata: {\n  activeColor: 'red',\n  fontSize: 30\n}\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n``` html\n<div v-bind:style=\"styleObject\"></div>\n```\n``` js\ndata: {\n  styleObject: {\n    color: 'red',\n    fontSize: '13px'\n  }\n}\n```\n\nAgain, the object syntax is often used in conjunction with computed properties that return objects.\n\n### Array Syntax\n\nThe array syntax for `v-bind:style` allows you to apply multiple style objects to the same element:\n\n``` html\n<div v-bind:style=\"[baseStyles, overridingStyles]\">\n```\n\n### Auto-prefixing\n\nWhen you use a CSS property that requires vendor prefixes in `v-bind:style`, for example `transform`, Vue will automatically detect and add appropriate prefixes to the applied styles.\n","source":"v2/guide/class-and-style.md","raw":"---\ntitle: Class and Style Bindings\ntype: guide\norder: 6\n---\n\nA common need for data binding is manipulating an element's class list and its inline styles. Since they are both attributes, we can use `v-bind` to handle them: we just need to calculate a final string with our expressions. However, meddling with string concatenation is annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.\n\n## Binding HTML Classes\n\n### Object Syntax\n\nWe can pass an object to `v-bind:class` to dynamically toggle classes:\n\n``` html\n<div v-bind:class=\"{ active: isActive }\"></div>\n```\n\nThe above syntax means the presence of the `active` class will be determined by the [truthiness](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) of the data property `isActive`.\n\nYou can have multiple classes toggled by having more fields in the object. In addition, the `v-bind:class` directive can also co-exist with the plain `class` attribute. So given the following template:\n\n``` html\n<div class=\"static\"\n     v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n</div>\n```\n\nAnd the following data:\n\n``` js\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\nIt will render:\n\n``` html\n<div class=\"static active\"></div>\n```\n\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\n\nThe bound object doesn't have to be inline:\n\n``` html\n<div v-bind:class=\"classObject\"></div>\n```\n``` js\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\nThis will render the same result. We can also bind to a [computed property](computed.html) that returns an object. This is a common and powerful pattern:\n\n``` html\n<div v-bind:class=\"classObject\"></div>\n```\n``` js\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal',\n    }\n  }\n}\n```\n\n### Array Syntax\n\nWe can pass an array to `v-bind:class` to apply a list of classes:\n\n``` html\n<div v-bind:class=\"[activeClass, errorClass]\">\n```\n``` js\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n```\n\nWhich will render:\n\n``` html\n<div class=\"active text-danger\"></div>\n```\n\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\n\n``` html\n<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\">\n```\n\nThis will always apply `errorClass`, but will only apply `activeClass` when `isActive` is `true`.\n\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside array syntax:\n\n``` html\n<div v-bind:class=\"[{ active: isActive }, errorClass]\">\n```\n\n### With Components\n\n> This section assumes knowledge of [Vue Components](components.html). Feel free to skip it and come back later.\n\nWhen you use the `class` attribute on a custom component, those classes will be added to the component's root element. Existing classes on this element will not be overwritten.\n\nFor example, if you declare this component:\n\n``` js\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n```\n\nThen add some classes when using it:\n\n``` html\n<my-component class=\"baz boo\"></my-component>\n```\n\nThe rendered HTML will be:\n\n``` html\n<p class=\"foo bar baz boo\">Hi</p>\n```\n\nThe same is true for class bindings:\n\n``` html\n<my-component v-bind:class=\"{ active: isActive }\"></my-component>\n```\n\nWhen `isActive` is truthy, the rendered HTML will be:\n\n``` html\n<p class=\"foo bar active\"></p>\n```\n\n## Binding Inline Styles\n\n### Object Syntax\n\nThe object syntax for `v-bind:style` is pretty straightforward - it looks almost like CSS, except it's a JavaScript object. You can use either camelCase or kebab-case for the CSS property names:\n\n``` html\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n``` js\ndata: {\n  activeColor: 'red',\n  fontSize: 30\n}\n```\n\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\n\n``` html\n<div v-bind:style=\"styleObject\"></div>\n```\n``` js\ndata: {\n  styleObject: {\n    color: 'red',\n    fontSize: '13px'\n  }\n}\n```\n\nAgain, the object syntax is often used in conjunction with computed properties that return objects.\n\n### Array Syntax\n\nThe array syntax for `v-bind:style` allows you to apply multiple style objects to the same element:\n\n``` html\n<div v-bind:style=\"[baseStyles, overridingStyles]\">\n```\n\n### Auto-prefixing\n\nWhen you use a CSS property that requires vendor prefixes in `v-bind:style`, for example `transform`, Vue will automatically detect and add appropriate prefixes to the applied styles.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/class-and-style.html","comments":1,"layout":"page","_id":"civ8jcjoc000q91m1eh8kcsqo","content":"<p>A common need for data binding is manipulating an element’s class list and its inline styles. Since they are both attributes, we can use <code>v-bind</code> to handle them: we just need to calculate a final string with our expressions. However, meddling with string concatenation is annoying and error-prone. For this reason, Vue provides special enhancements when <code>v-bind</code> is used with <code>class</code> and <code>style</code>. In addition to strings, the expressions can also evaluate to objects or arrays.</p>\n<h2 id=\"Binding-HTML-Classes\"><a href=\"#Binding-HTML-Classes\" class=\"headerlink\" title=\"Binding HTML Classes\"></a>Binding HTML Classes</h2><h3 id=\"Object-Syntax\"><a href=\"#Object-Syntax\" class=\"headerlink\" title=\"Object Syntax\"></a>Object Syntax</h3><p>We can pass an object to <code>v-bind:class</code> to dynamically toggle classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The above syntax means the presence of the <code>active</code> class will be determined by the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"external\">truthiness</a> of the data property <code>isActive</code>.</p>\n<p>You can have multiple classes toggled by having more fields in the object. In addition, the <code>v-bind:class</code> directive can also co-exist with the plain <code>class</code> attribute. So given the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></div><div class=\"line\">     <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And the following data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>isActive</code> or <code>hasError</code> changes, the class list will be updated accordingly. For example, if <code>hasError</code> becomes <code>true</code>, the class list will become <code>&quot;static active text-danger&quot;</code>.</p>\n<p>The bound object doesn’t have to be inline:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">classObject</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">'text-danger'</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This will render the same result. We can also bind to a <a href=\"computed.html\">computed property</a> that returns an object. This is a common and powerful pattern:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">classObject</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">active</span>: <span class=\"keyword\">this</span>.isActive &amp;&amp; !<span class=\"keyword\">this</span>.error,</div><div class=\"line\">      <span class=\"string\">'text-danger'</span>: <span class=\"keyword\">this</span>.error &amp;&amp; <span class=\"keyword\">this</span>.error.type === <span class=\"string\">'fatal'</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Array-Syntax\"><a href=\"#Array-Syntax\" class=\"headerlink\" title=\"Array Syntax\"></a>Array Syntax</h3><p>We can pass an array to <code>v-bind:class</code> to apply a list of classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[activeClass, errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeClass</span>: <span class=\"string\">'active'</span>,</div><div class=\"line\">  <span class=\"attr\">errorClass</span>: <span class=\"string\">'text-danger'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Which will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? activeClass : '', errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This will always apply <code>errorClass</code>, but will only apply <code>activeClass</code> when <code>isActive</code> is <code>true</code>.</p>\n<p>However, this can be a bit verbose if you have multiple conditional classes. That’s why it’s also possible to use the object syntax inside array syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"With-Components\"><a href=\"#With-Components\" class=\"headerlink\" title=\"With Components\"></a>With Components</h3><blockquote>\n<p>This section assumes knowledge of <a href=\"components.html\">Vue Components</a>. Feel free to skip it and come back later.</p>\n</blockquote>\n<p>When you use the <code>class</code> attribute on a custom component, those classes will be added to the component’s root element. Existing classes on this element will not be overwritten.</p>\n<p>For example, if you declare this component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then add some classes when using it:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered HTML will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The same is true for class bindings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>isActive</code> is truthy, the rendered HTML will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Binding-Inline-Styles\"><a href=\"#Binding-Inline-Styles\" class=\"headerlink\" title=\"Binding Inline Styles\"></a>Binding Inline Styles</h2><h3 id=\"Object-Syntax-1\"><a href=\"#Object-Syntax-1\" class=\"headerlink\" title=\"Object Syntax\"></a>Object Syntax</h3><p>The object syntax for <code>v-bind:style</code> is pretty straightforward - it looks almost like CSS, except it’s a JavaScript object. You can use either camelCase or kebab-case for the CSS property names:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeColor</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">  <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is often a good idea to bind to a style object directly so that the template is cleaner:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">styleObject</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'13px'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Again, the object syntax is often used in conjunction with computed properties that return objects.</p>\n<h3 id=\"Array-Syntax-1\"><a href=\"#Array-Syntax-1\" class=\"headerlink\" title=\"Array Syntax\"></a>Array Syntax</h3><p>The array syntax for <code>v-bind:style</code> allows you to apply multiple style objects to the same element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"[baseStyles, overridingStyles]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Auto-prefixing\"><a href=\"#Auto-prefixing\" class=\"headerlink\" title=\"Auto-prefixing\"></a>Auto-prefixing</h3><p>When you use a CSS property that requires vendor prefixes in <code>v-bind:style</code>, for example <code>transform</code>, Vue will automatically detect and add appropriate prefixes to the applied styles.</p>\n","excerpt":"","more":"<p>A common need for data binding is manipulating an element’s class list and its inline styles. Since they are both attributes, we can use <code>v-bind</code> to handle them: we just need to calculate a final string with our expressions. However, meddling with string concatenation is annoying and error-prone. For this reason, Vue provides special enhancements when <code>v-bind</code> is used with <code>class</code> and <code>style</code>. In addition to strings, the expressions can also evaluate to objects or arrays.</p>\n<h2 id=\"Binding-HTML-Classes\"><a href=\"#Binding-HTML-Classes\" class=\"headerlink\" title=\"Binding HTML Classes\"></a>Binding HTML Classes</h2><h3 id=\"Object-Syntax\"><a href=\"#Object-Syntax\" class=\"headerlink\" title=\"Object Syntax\"></a>Object Syntax</h3><p>We can pass an object to <code>v-bind:class</code> to dynamically toggle classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The above syntax means the presence of the <code>active</code> class will be determined by the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">truthiness</a> of the data property <code>isActive</code>.</p>\n<p>You can have multiple classes toggled by having more fields in the object. In addition, the <code>v-bind:class</code> directive can also co-exist with the plain <code>class</code> attribute. So given the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></div><div class=\"line\">     <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And the following data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>isActive</code> or <code>hasError</code> changes, the class list will be updated accordingly. For example, if <code>hasError</code> becomes <code>true</code>, the class list will become <code>&quot;static active text-danger&quot;</code>.</p>\n<p>The bound object doesn’t have to be inline:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">classObject</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">'text-danger'</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This will render the same result. We can also bind to a <a href=\"computed.html\">computed property</a> that returns an object. This is a common and powerful pattern:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">classObject</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">active</span>: <span class=\"keyword\">this</span>.isActive &amp;&amp; !<span class=\"keyword\">this</span>.error,</div><div class=\"line\">      <span class=\"string\">'text-danger'</span>: <span class=\"keyword\">this</span>.error &amp;&amp; <span class=\"keyword\">this</span>.error.type === <span class=\"string\">'fatal'</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Array-Syntax\"><a href=\"#Array-Syntax\" class=\"headerlink\" title=\"Array Syntax\"></a>Array Syntax</h3><p>We can pass an array to <code>v-bind:class</code> to apply a list of classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[activeClass, errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeClass</span>: <span class=\"string\">'active'</span>,</div><div class=\"line\">  <span class=\"attr\">errorClass</span>: <span class=\"string\">'text-danger'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Which will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? activeClass : '', errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This will always apply <code>errorClass</code>, but will only apply <code>activeClass</code> when <code>isActive</code> is <code>true</code>.</p>\n<p>However, this can be a bit verbose if you have multiple conditional classes. That’s why it’s also possible to use the object syntax inside array syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, errorClass]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"With-Components\"><a href=\"#With-Components\" class=\"headerlink\" title=\"With Components\"></a>With Components</h3><blockquote>\n<p>This section assumes knowledge of <a href=\"components.html\">Vue Components</a>. Feel free to skip it and come back later.</p>\n</blockquote>\n<p>When you use the <code>class</code> attribute on a custom component, those classes will be added to the component’s root element. Existing classes on this element will not be overwritten.</p>\n<p>For example, if you declare this component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then add some classes when using it:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered HTML will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The same is true for class bindings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>isActive</code> is truthy, the rendered HTML will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Binding-Inline-Styles\"><a href=\"#Binding-Inline-Styles\" class=\"headerlink\" title=\"Binding Inline Styles\"></a>Binding Inline Styles</h2><h3 id=\"Object-Syntax-1\"><a href=\"#Object-Syntax-1\" class=\"headerlink\" title=\"Object Syntax\"></a>Object Syntax</h3><p>The object syntax for <code>v-bind:style</code> is pretty straightforward - it looks almost like CSS, except it’s a JavaScript object. You can use either camelCase or kebab-case for the CSS property names:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeColor</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">  <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is often a good idea to bind to a style object directly so that the template is cleaner:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">styleObject</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'13px'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Again, the object syntax is often used in conjunction with computed properties that return objects.</p>\n<h3 id=\"Array-Syntax-1\"><a href=\"#Array-Syntax-1\" class=\"headerlink\" title=\"Array Syntax\"></a>Array Syntax</h3><p>The array syntax for <code>v-bind:style</code> allows you to apply multiple style objects to the same element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"[baseStyles, overridingStyles]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Auto-prefixing\"><a href=\"#Auto-prefixing\" class=\"headerlink\" title=\"Auto-prefixing\"></a>Auto-prefixing</h3><p>When you use a CSS property that requires vendor prefixes in <code>v-bind:style</code>, for example <code>transform</code>, Vue will automatically detect and add appropriate prefixes to the applied styles.</p>\n"},{"title":"Conditional Rendering","type":"guide","order":7,"_content":"\n## v-if\n\nIn string templates, for example Handlebars, we would write a conditional block like this:\n\n``` html\n<!-- Handlebars template -->\n{{#if ok}}\n  <h1>Yes</h1>\n{{/if}}\n```\n\nIn Vue, we use the `v-if` directive to achieve the same:\n\n``` html\n<h1 v-if=\"ok\">Yes</h1>\n```\n\nIt is also possible to add an \"else\" block with `v-else`:\n\n``` html\n<h1 v-if=\"ok\">Yes</h1>\n<h1 v-else>No</h1>\n```\n\n### Template v-if\n\nBecause `v-if` is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use `v-if` on a `<template>` element, which serves as an invisible wrapper. The final rendered result will not include the `<template>` element.\n\n``` html\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n### v-else\n\nYou can use the `v-else` directive to indicate an \"else block\" for `v-if`:\n\n``` html\n<div v-if=\"Math.random() > 0.5\">\n  Now you see me\n</div>\n<div v-else>\n  Now you don't\n</div>\n```\n\nThe `v-else` element must immediately follow the `v-if` element - otherwise it will not be recognized.\n\n## v-show\n\nAnother option for conditionally displaying an element is the `v-show` directive. The usage is largely the same:\n\n``` html\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\nThe difference is that an element with `v-show` will always be rendered and remain in the DOM; `v-show` simply toggles the `display` CSS property of the element.\n\n<p class=\"tip\">Note that `v-show` doesn't support the `<template>` syntax, nor does it work with `v-else`.</p>\n\n## v-if vs. v-show\n\n`v-if` is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\n`v-if` is also **lazy**: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, `v-show` is much simpler - the element is always rendered regardless of initial condition, with just simple CSS-based toggling.\n\nGenerally speaking, `v-if` has higher toggle costs while `v-show` has higher initial render costs. So prefer `v-show` if you need to toggle something very often, and prefer `v-if` if the condition is unlikely to change at runtime.\n","source":"v2/guide/conditional.md","raw":"---\ntitle: Conditional Rendering\ntype: guide\norder: 7\n---\n\n## v-if\n\nIn string templates, for example Handlebars, we would write a conditional block like this:\n\n``` html\n<!-- Handlebars template -->\n{{#if ok}}\n  <h1>Yes</h1>\n{{/if}}\n```\n\nIn Vue, we use the `v-if` directive to achieve the same:\n\n``` html\n<h1 v-if=\"ok\">Yes</h1>\n```\n\nIt is also possible to add an \"else\" block with `v-else`:\n\n``` html\n<h1 v-if=\"ok\">Yes</h1>\n<h1 v-else>No</h1>\n```\n\n### Template v-if\n\nBecause `v-if` is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use `v-if` on a `<template>` element, which serves as an invisible wrapper. The final rendered result will not include the `<template>` element.\n\n``` html\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n### v-else\n\nYou can use the `v-else` directive to indicate an \"else block\" for `v-if`:\n\n``` html\n<div v-if=\"Math.random() > 0.5\">\n  Now you see me\n</div>\n<div v-else>\n  Now you don't\n</div>\n```\n\nThe `v-else` element must immediately follow the `v-if` element - otherwise it will not be recognized.\n\n## v-show\n\nAnother option for conditionally displaying an element is the `v-show` directive. The usage is largely the same:\n\n``` html\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\nThe difference is that an element with `v-show` will always be rendered and remain in the DOM; `v-show` simply toggles the `display` CSS property of the element.\n\n<p class=\"tip\">Note that `v-show` doesn't support the `<template>` syntax, nor does it work with `v-else`.</p>\n\n## v-if vs. v-show\n\n`v-if` is \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.\n\n`v-if` is also **lazy**: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time.\n\nIn comparison, `v-show` is much simpler - the element is always rendered regardless of initial condition, with just simple CSS-based toggling.\n\nGenerally speaking, `v-if` has higher toggle costs while `v-show` has higher initial render costs. So prefer `v-show` if you need to toggle something very often, and prefer `v-if` if the condition is unlikely to change at runtime.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/conditional.html","comments":1,"layout":"page","_id":"civ8jcjod000r91m1rg4ktf8h","content":"<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>In string templates, for example Handlebars, we would write a conditional block like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Handlebars template --&gt;</span></div><div class=\"line\">&#123;&#123;#if ok&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>\n<p>In Vue, we use the <code>v-if</code> directive to achieve the same:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is also possible to add an “else” block with <code>v-else</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-v-if\"><a href=\"#Template-v-if\" class=\"headerlink\" title=\"Template v-if\"></a>Template v-if</h3><p>Because <code>v-if</code> is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use <code>v-if</code> on a <code>&lt;template&gt;</code> element, which serves as an invisible wrapper. The final rendered result will not include the <code>&lt;template&gt;</code> element.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p>You can use the <code>v-else</code> directive to indicate an “else block” for <code>v-if</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>v-else</code> element must immediately follow the <code>v-if</code> element - otherwise it will not be recognized.</p>\n<h2 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h2><p>Another option for conditionally displaying an element is the <code>v-show</code> directive. The usage is largely the same:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The difference is that an element with <code>v-show</code> will always be rendered and remain in the DOM; <code>v-show</code> simply toggles the <code>display</code> CSS property of the element.</p>\n<p class=\"tip\">Note that <code>v-show</code> doesn’t support the <code>&lt;template&gt;</code> syntax, nor does it work with <code>v-else</code>.</p>\n\n<h2 id=\"v-if-vs-v-show\"><a href=\"#v-if-vs-v-show\" class=\"headerlink\" title=\"v-if vs. v-show\"></a>v-if vs. v-show</h2><p><code>v-if</code> is “real” conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.</p>\n<p><code>v-if</code> is also <strong>lazy</strong>: if the condition is false on initial render, it will not do anything - the conditional block won’t be rendered until the condition becomes true for the first time.</p>\n<p>In comparison, <code>v-show</code> is much simpler - the element is always rendered regardless of initial condition, with just simple CSS-based toggling.</p>\n<p>Generally speaking, <code>v-if</code> has higher toggle costs while <code>v-show</code> has higher initial render costs. So prefer <code>v-show</code> if you need to toggle something very often, and prefer <code>v-if</code> if the condition is unlikely to change at runtime.</p>\n","excerpt":"","more":"<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>In string templates, for example Handlebars, we would write a conditional block like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Handlebars template --&gt;</span></div><div class=\"line\">&#123;&#123;#if ok&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>\n<p>In Vue, we use the <code>v-if</code> directive to achieve the same:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is also possible to add an “else” block with <code>v-else</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-v-if\"><a href=\"#Template-v-if\" class=\"headerlink\" title=\"Template v-if\"></a>Template v-if</h3><p>Because <code>v-if</code> is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use <code>v-if</code> on a <code>&lt;template&gt;</code> element, which serves as an invisible wrapper. The final rendered result will not include the <code>&lt;template&gt;</code> element.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p>You can use the <code>v-else</code> directive to indicate an “else block” for <code>v-if</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>v-else</code> element must immediately follow the <code>v-if</code> element - otherwise it will not be recognized.</p>\n<h2 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h2><p>Another option for conditionally displaying an element is the <code>v-show</code> directive. The usage is largely the same:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The difference is that an element with <code>v-show</code> will always be rendered and remain in the DOM; <code>v-show</code> simply toggles the <code>display</code> CSS property of the element.</p>\n<p class=\"tip\">Note that <code>v-show</code> doesn’t support the <code>&lt;template&gt;</code> syntax, nor does it work with <code>v-else</code>.</p>\n\n<h2 id=\"v-if-vs-v-show\"><a href=\"#v-if-vs-v-show\" class=\"headerlink\" title=\"v-if vs. v-show\"></a>v-if vs. v-show</h2><p><code>v-if</code> is “real” conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.</p>\n<p><code>v-if</code> is also <strong>lazy</strong>: if the condition is false on initial render, it will not do anything - the conditional block won’t be rendered until the condition becomes true for the first time.</p>\n<p>In comparison, <code>v-show</code> is much simpler - the element is always rendered regardless of initial condition, with just simple CSS-based toggling.</p>\n<p>Generally speaking, <code>v-if</code> has higher toggle costs while <code>v-show</code> has higher initial render costs. So prefer <code>v-show</code> if you need to toggle something very often, and prefer <code>v-if</code> if the condition is unlikely to change at runtime.</p>\n"},{"title":"Comparison with Other Frameworks","type":"guide","order":28,"_content":"\nThis is definitely the most difficult page in the guide to write, but we do feel it's important. Odds are, you've had problems you tried to solve and you've used another library to solve them. You're here because you want to know if Vue can solve your specific problems better. That's what we hope to answer for you.\n\nWe also try very hard to avoid bias. As the core team, we obviously like Vue a lot. There are some problems we think it solves better than anything else out there. If we didn't believe that, we wouldn't be working on it. We do want to be fair and accurate though. Where other libraries offer significant advantages, such as React's vast ecosystem of alternative renderers or Knockout's browser support back to IE6, we try to list these as well.\n\nWe'd also like **your** help keeping this document up-to-date because the JavaScript world moves fast! If you notice an inaccuracy or something that doesn't seem quite right, please let us know by [opening an issue](https://github.com/vuejs/vuejs.org/issues/new?title=Inaccuracy+in+comparisons+guide).\n\n## React\n\nReact and Vue share many similarities. They both:\n\n- utilize a virtual DOM\n- provide reactive and composable view components\n- maintain focus in the core library, with concerns such as routing and global state management handled by companion libraries\n\nBeing so similar in scope, we've put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.\n\nWith that said, it's inevitable that the comparison would appear biased towards Vue to some React users, as many of the subjects explored are to some extent subjective. We acknowledge the existence of varying technical taste, and this comparison primarily aims to outline the reasons why Vue could potentially be a better fit if your preferences happen to coincide with ours.\n\nThe React community [has been instrumental](https://github.com/vuejs/vuejs.org/issues/364) in helping us achieve this balance, with special thanks to Dan Abramov from the React team. He was extremely generous with his time and considerable expertise to help us refine this document until we were [both happy](https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740) with the final result.\n\n### Performance Profiles\n\nIn every real-world scenario that we've tested so far, Vue outperforms React by a fair margin. If your eyebrows are raising right now, read further. We'll breakdown why (and even include a benchmark developed in collaboration with the React team).\n\n#### Render Performance\n\nWhen rendering UI, manipulating the DOM is typically the most expensive operation and unfortunately, no library can make those raw operations faster. The best we can do is:\n\n1. Minimize the number of necessary DOM mutations. Both React and Vue use virtual DOM abstractions to accomplish this and both implementations work about equally well.\n\n2. Add as little overhead (pure JavaScript computations) as possible on top of those DOM manipulations. This is an area where Vue and React differ.\n\nThe JavaScript overhead is directly related to the mechanisms of computing the necessary DOM operations. Both Vue and React utilizes Virtual DOM to achieve that, but Vue's Virtual DOM implementation (a fork of [snabbdom](https://github.com/snabbdom/snabbdom)) is much lighter-weight and thus introduces less overhead than React's.\n\nBoth Vue and React also offer functional components, which are stateless and instanceless - and therefore, require less overhead. When these are used in performance-critical situations, Vue is once again faster. To demonstrate this, we built a simple [benchmark project](https://github.com/chrisvfritz/vue-render-performance-comparisons) that just renders 10,000 list items 100 times. We encourage you to try it yourself, as the results will vary depending on the hardware and browser used - and actually, they'll vary even between runs due to the nature of JavaScript engines.\n\nIf you're feeling lazy though, below are the numbers from one run in Chrome 52 on a 2014 MacBook Air. To avoid cherry-picking, both benchmarks were actually run 20 separate times, with results from the best runs included below:\n\n{% raw %}\n<table class=\"benchmark-table\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Vue</th>\n      <th>React</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fastest</th>\n      <td>23ms</td>\n      <td>63ms</td>\n    </tr>\n    <tr>\n      <th>Median</th>\n      <td>42ms</td>\n      <td>81ms</td>\n    </tr>\n    <tr>\n      <th>Average</th>\n      <td>51ms</td>\n      <td>94ms</td>\n    </tr>\n    <tr>\n      <th>95th Perc.</th>\n      <td>73ms</td>\n      <td>164ms</td>\n    </tr>\n    <tr>\n      <th>Slowest</th>\n      <td>343ms</td>\n      <td>453ms</td>\n    </tr>\n    </tr>\n  </tbody>\n</table>\n{% endraw %}\n\n#### Update Performance\n\nIn React, when a component's state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to implement `shouldComponentUpdate` everywhere and use immutable data structures. In Vue, a component's dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render.\n\nThis means updates in unoptimized Vue will be much faster than unoptimized React and actually, due to the improved render performance in Vue, even fully-optimized React will usually be slower than Vue is out-of-the-box.\n\n#### In Development\n\nWhile performance in production is the more important metrics as it is directly associated with end-user experience, performance in development still matters because it is associated with the developer experience.\n\nBoth Vue and React remain fast enough in development for most normal applications. However, when prototyping high frame-rate data visualizations or animations, we've seen cases of Vue handling 10 frames per second in development while React dropping to about 1 frame per second.\n\nThis is due to React's many heavy invariant checks in development mode, which help it to provide many excellent warnings and error messages. We agree that these are also important in Vue, but have tried to keep a closer eye on performance while we implement these checks.\n\n### HTML & CSS\n\nIn React, everything is Just JavaScript, which sounds very simple and elegant - until you dig deeper. The unfortunate reality is that reinventing HTML and CSS within JavaScript, while solving some issues of the traditional model, can also cause pain of its own. In Vue, we instead embrace web technologies and build on top of them. To show you what that means, we'll dive into some examples.\n\n#### JSX vs Templates\n\nIn React, all components express their UI within render functions using JSX, a declarative XML-like syntax that works within Javascript. Here's an example, [vetted by the React community](https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684):\n\n``` jsx\nrender () {\n  let { items } = this.props\n\n  let children\n  if (items.length > 0) {\n    children = (\n      <ul>\n        {items.map(item =>\n          <li key={item.id}>{item.name}</li>\n        )}\n      </ul>\n    )\n  } else {\n    children = <p>No items found.</p>\n  }\n\n  return (\n    <div className='list-container'>\n      {children}\n    </div>\n  )\n}\n```\n\nRender functions with JSX have a few advantages:\n\n- You can use the power of a full programming language (JavaScript) to build your view.\n- The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what's currently available for Vue templates.\n\nIn Vue, we also have [render functions](render-function.html) and even [support JSX](render-function.html#JSX), because sometimes you need that power. However, as the default experience we offer templates as a simpler alternative:\n\n``` html\n<template>\n  <div class=\"list-container\">\n    <ul v-if=\"items.length\">\n      <li v-for=\"item in items\">\n        {{ item.name }}\n      </li>\n    </ul>\n    <p v-else>No items found.</p>\n  </div>\n</template>\n```\n\nA few advantages here:\n\n- Fewer implementation and stylistic decisions have to be made while writing a template\n- A template will always be declarative\n- Any valid HTML is valid in a template\n- It reads more like English (e.g. for each item in items)\n- Advanced versions of JavaScript are not required to increase readability\n\nThis is not only much easier for the developer that's writing it, but designers and less experienced developers will also find it much easier parsing and contributing code.\n\nAn additional benefit of HTML-compliant templates is that you can use pre-processors such as Pug (formerly known as Jade) to author your Vue templates:\n\n``` pug\ndiv.list-container\n  ul(v-if=\"items.length\")\n    li(v-for=\"item in items\") {{ item.name }}\n  p(v-else) No items found.\n```\n\n#### Component-Scoped CSS\n\nUnless you spread components out over multiple files (for example with [CSS Modules](https://github.com/gajus/react-css-modules)), scoping CSS in React is often done via CSS-in-JS solutions. There are many competing solutions out there, each with its own caveats. A common issue is that features such as hover states, media queries, and pseudo-selectors either require heavy dependencies to reinvent what CSS already does - or they simply are not supported. If not optimized carefully, CSS-in-JS can also introduce non-trivial runtime performance cost. Most importantly, it deviates from the experience of authoring normal CSS.\n\nVue on the other hand, gives you full access to CSS within [single-file components](single-file-components.html):\n\n``` html\n<style scoped>\n  @media (min-width: 250px) {\n    .list-container:hover {\n      background: orange;\n    }\n  }\n</style>\n```\n\nThe optional `scoped` attribute automatically scopes this CSS to your component by adding a unique attribute (such as `data-v-21e5b78`) to elements and compiling `.list-container:hover` to something like `.list-container[data-v-21e5b78]:hover`.\n\nFinally, just as with HTML, you also have the option of writing your CSS using any preprocessors (or post-processors) you'd like, allowing you to leverage existing libraries in those ecosystems. You can also perform design-centric operations such as color manipulation during your build process, rather than importing specialized JavaScript libraries that would increase the size of your build and complexity of your application.\n\n### Scale\n\n#### Scaling Up\n\nFor large applications, both Vue and React offer robust routing solutions. The React community has also been very innovative in terms of state management solutions (e.g. Flux/Redux). These state management patterns and [even Redux itself](https://github.com/egoist/revue) can be easily integrated into Vue applications. In fact, Vue has even taken this model a step further with [Vuex](https://github.com/vuejs/vuex), an Elm-inspired state management solution that integrates deeply into Vue that we think offers a superior development experience.\n\nAnother important difference between these offerings is that Vue's companion libraries for state management and routing (among [other concerns](https://github.com/vuejs)) are all officially supported and kept up-to-date with the core library. React instead chooses to leave these concerns to the community, creating a more fragmented ecosystem. Being more popular though, React's ecosystem is considerably richer than Vue's.\n\nFinally, Vue offers a [CLI project generator](https://github.com/vuejs/vue-cli) that makes it trivially easy to start a new project using your choice of build system, including [Webpack](https://github.com/vuejs-templates/webpack), [Browserify](https://github.com/vuejs-templates/browserify), or even [no build system](https://github.com/vuejs-templates/simple). React is also making strides in this area with [create-react-app](https://github.com/facebookincubator/create-react-app), but it currently has a few limitations:\n\n- It does not allow any configuration during project generation, while Vue's project templates allow Yeoman-like customization.\n- It only offers a single template that assumes you're building a single-page application, while Vue offers a wide variety of templates for various purposes and build systems.\n- It cannot generate projects from user-built templates, which can be especially useful for enterprise environments with pre-established conventions.\n\nIt's important to note though that many of these limitations are intentional design decisions made by the create-react-app team and they do have their advantages. For example, as long your project's needs are very simple and you never need to \"eject\" to customize your build process, you'll be able to update it as a dependency. You can read more about the [differing philosophy here](https://github.com/facebookincubator/create-react-app#philosophy).\n\n#### Scaling Down\n\nReact is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React's class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it's absolutely not suitable for production.\n\nWhile Vue scales up just as well as, if not better than React, it also scales down just as well as jQuery. That's right - all you have to do is drop a single script tag into a page:\n\n``` html\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n```\n\nThen you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.\n\nSince you don't need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading [the guide](./) to learn enough to build non-trivial applications.\n\n### Native Rendering\n\nReactNative enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with [Weex](https://alibaba.github.io/weex/), a cross-platform UI framework developed by Alibaba Group, which uses Vue as its JavaScript framework runtime. This means with Weex, you can use the same Vue component syntax to author components that can not only be rendered in the Browser, but also natively on iOS and Android!\n\nAt this moment, Weex is still in active development and is not as mature and battle-tested as ReactNative, but its development is driven by the production needs of the largest e-commerce business in the world, and the Vue team will also actively collaborate with the Weex team to ensure a smooth experience for Vue developers.\n\n### With MobX\n\nMobX has become quite popular in the React community and it actually uses a nearly identical reactivity system to Vue. To a limited extent, the React + MobX workflow can be thought of as a more verbose Vue, so if you're using that combination and are enjoying it, jumping into Vue is probably the next logical step.\n\n## Angular 1\n\nSome of Vue's syntax will look very similar to Angular (e.g. `v-if` vs `ng-if`). This is because there were a lot of things that Angular got right and these were an inspiration for Vue very early in its development. There are also many pains that come with Angular however, where Vue has attempted to offer a significant improvement.\n\n### Complexity\n\nVue is much simpler than Angular 1, both in terms of API and design. Learning enough to build non-trivial applications typically takes less than a day, which is not true for Angular 1.\n\n### Flexibility and Modularity\n\nAngular 1 has strong opinions about how your applications should be structured, while Vue is a more flexible, modular solution. While this makes Vue more adaptable to a wide variety of projects, we also recognize that sometimes it's useful to have some decisions made for you, so that you can just get started coding.\n\nThat's why we offer a [Webpack template](https://github.com/vuejs-templates/webpack) that can set you up within minutes, while also granting you access to advanced features such as hot module reloading, linting, CSS extraction, and much more.\n\n### Data binding\n\nAngular 1 uses two-way binding between scopes, while Vue enforces a one-way data flow between components. This makes the flow of data easier to reason about in non-trivial applications.\n\n### Directives vs Components\n\nVue has a clearer separation between directives and components. Directives are meant to encapsulate DOM manipulations only, while components are self-contained units that have their own view and data logic. In Angular, there's a lot of confusion between the two.\n\n### Performance\n\nVue has better performance and is much, much easier to optimize because it doesn't use dirty checking. Angular 1 becomes slow when there are a lot of watchers, because every time anything in the scope changes, all these watchers need to be re-evaluated again. Also, the digest cycle may have to run multiple times to \"stabilize\" if some watcher triggers another update. Angular users often have to resort to esoteric techniques to get around the digest cycle, and in some situations, there's simply no way to optimize a scope with many watchers.\n\nVue doesn't suffer from this at all because it uses a transparent dependency-tracking observation system with async queueing - all changes trigger independently unless they have explicit dependency relationships.\n\nInterestingly, there are quite a few similarities in how Angular 2 and Vue are addressing these Angular 1 issues.\n\n## Angular 2\n\nWe have a separate section for Angular 2 because it really is a completely new framework. For example, it features a first-class component system, many implementation details have been completely rewritten, and the API has also changed quite drastically.\n\n### TypeScript\n\nWhile Angular 1 could be used for smaller applications, Angular 2 has shifted focus to best facilitate large enterprise applications. As part of this, it almost requires TypeScript, which can be very useful for developers that desire the type safety of languages such as Java and C#.\n\nVue is also well-suited to [enterprise environments](https://github.com/vuejs/awesome-vue#enterprise-usage) and can even be used with TypeScript via our [official typings](https://github.com/vuejs/vue/tree/dev/types) and [user-contributed decorators](https://github.com/itsFrank/vue-typescript), though it's definitely optional in our case.\n\n### Size and Performance\n\nIn terms of performance, both frameworks are exceptionally fast and there isn't enough data from real world use cases to make a verdict. However if you are determined to see some numbers, Vue 2.0 seems to be ahead of Angular 2 according to this [3rd party benchmark](http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html).\n\nSize wise, although Angular 2 with offline compilation and tree-shaking is able to get its size down considerably, a full-featured Vue 2.0 with compiler included (23kb) is still lighter than a tree-shaken bare-bone example of Angular 2 (50kb). And do note the Angular 2 app's size is small due to tree-shaking, which removes code for features that you are not using. It will eventually grow back to its actual size as you import and use more features from the framework.\n\n### Flexibility\n\nVue is much less opinionated than Angular 2, offering official support for a variety of build systems, with no restrictions on how you structure your application. Many developers enjoy this freedom, while some prefer having only one Right Way to build any application.\n\n### Learning Curve\n\nTo get started with Vue, all you need is familiarity with HTML and ES5 JavaScript (i.e. plain JavaScript). With these basic skills, you can start building non-trivial applications within less than a day of reading [the guide](./).\n\nAngular 2's learning curve is much steeper. Even without TypeScript, their [Quickstart guide](https://angular.io/docs/js/latest/quickstart.html) starts out with an app that uses ES2015 JavaScript, NPM with 18 dependencies, 4 files, and over 3,000 words to explain it all - just to say Hello World. It's an understatement to say that [Vue's Hello World](https://jsfiddle.net/chrisvfritz/50wL7mdz/) is considerably simpler. It's so trivial in fact, that we don't even dedicate a whole page in the guide to it.\n\n## Ember\n\nEmber is a full-featured framework that is designed to be highly opinionated. It provides a lot of established conventions and once you are familiar enough with them, it can make you very productive. However, it also means the learning curve is high and flexibility suffers. It's a trade-off when you try to pick between an opinionated framework and a library with a loosely coupled set of tools that work together. The latter gives you more freedom but also requires you to make more architectural decisions.\n\nThat said, it would probably make a better comparison between Vue core and Ember's [templating](https://guides.emberjs.com/v2.7.0/templates/handlebars-basics/) and [object model](https://guides.emberjs.com/v2.7.0/object-model/) layers:\n\n- Vue provides unobtrusive reactivity on plain JavaScript objects and fully automatic computed properties. In Ember, you need to wrap everything in Ember Objects and manually declare dependencies for computed properties.\n\n- Vue's template syntax harnesses the full power of JavaScript expressions, while Handlebars' expression and helper syntax is intentionally quite limited in comparison.\n\n- Performance-wise, Vue outperforms Ember by a fair margin, even after the latest Glimmer engine update in Ember 2.0. Vue automatically batches updates, while in Ember you need to manually manage run loops in performance-critical situations.\n\n## Knockout\n\nKnockout was a pioneer in the MVVM and dependency tracking spaces and its reactivity system is very similar to Vue's. Its [browser support](http://knockoutjs.com/documentation/browser-support.html) is also very impressive considering everything it does, with support back to IE6! Vue on the other hand only supports IE9+.\n\nOver time though, Knockout development has slowed and it's begun to show its age a little. For example, its component system lacks a full set of lifecycle hooks and although it's a very common use case, the interface for passing children to a component feels a little clunky compared to [Vue's](components.html#Content-Distribution-with-Slots).\n\nThere also seem to be philosophical differences in the API design which if you're curious, can be demonstrated by how each handles the creation of a [simple todo list](https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89). It's definitely somewhat subjective, but many consider Vue's API to be less complex and better structured.\n\n## Polymer\n\nPolymer is yet another Google-sponsored project and in fact was a source of inspiration for Vue as well. Vue's components can be loosely compared to Polymer's custom elements and both provide a very similar development style. The biggest difference is that Polymer is built upon the latest Web Components features and requires non-trivial polyfills to work (with degraded performance) in browsers that don't support those features natively. In contrast, Vue works without any dependencies or polyfills down to IE9.\n\nIn Polymer 1.0, the team has also made its data-binding system very limited in order to compensate for the performance. For example, the only expressions supported in Polymer templates are boolean negation and single method calls. Its computed property implementation is also not very flexible.\n\nPolymer custom elements are authored in HTML files, which limits you to plain JavaScript/CSS (and language features supported by today's browsers). In comparison, Vue's single file components allows you to easily use ES2015+ and any CSS preprocessors you want.\n\nWhen deploying to production, Polymer recommends loading everything on-the-fly with HTML Imports, which assumes browsers implementing the spec, and HTTP/2 support on both server and client. This may or may not be feasible depending on your target audience and deployment environment. In cases where this is not desirable, you will have to use a special tool called Vulcanizer to bundle your Polymer elements. On this front, Vue can combine its async component feature with Webpack's code-splitting feature to easily split out parts of the application bundle to be lazy-loaded. This ensures compatibility with older browsers while retaining great app loading performance.\n\nIt is also totally feasible to offer deeper integration between Vue with Web Component specs such as Custom Elements and Shadow DOM style encapsulation - however at this moment we are still waiting for the specs to mature and be widely implemented in all mainstream browsers before making any serious commitments.\n\n## Riot\n\nRiot 2.0 provides a similar component-based development model (which is called a \"tag\" in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:\n\n- True conditional rendering. Riot renders all if branches and simply shows/hides them.\n- A far more powerful router. Riot’s routing API is extremely minimal.\n- More mature tooling support. Vue provides official support for [Webpack](https://github.com/vuejs/vue-loader) and [Browserify](https://github.com/vuejs/vueify), while Riot relies on community support for build system integration.\n- [Transition effect system](transitions.html). Riot has none.\n- Better performance. [Despite advertising](https://github.com/vuejs/vuejs.org/issues/346) use of a virtual DOM, Riot in fact uses dirty checking and thus suffers from the same performance issues as Angular 1.\n","source":"v2/guide/comparison.md","raw":"---\ntitle: Comparison with Other Frameworks\ntype: guide\norder: 28\n---\n\nThis is definitely the most difficult page in the guide to write, but we do feel it's important. Odds are, you've had problems you tried to solve and you've used another library to solve them. You're here because you want to know if Vue can solve your specific problems better. That's what we hope to answer for you.\n\nWe also try very hard to avoid bias. As the core team, we obviously like Vue a lot. There are some problems we think it solves better than anything else out there. If we didn't believe that, we wouldn't be working on it. We do want to be fair and accurate though. Where other libraries offer significant advantages, such as React's vast ecosystem of alternative renderers or Knockout's browser support back to IE6, we try to list these as well.\n\nWe'd also like **your** help keeping this document up-to-date because the JavaScript world moves fast! If you notice an inaccuracy or something that doesn't seem quite right, please let us know by [opening an issue](https://github.com/vuejs/vuejs.org/issues/new?title=Inaccuracy+in+comparisons+guide).\n\n## React\n\nReact and Vue share many similarities. They both:\n\n- utilize a virtual DOM\n- provide reactive and composable view components\n- maintain focus in the core library, with concerns such as routing and global state management handled by companion libraries\n\nBeing so similar in scope, we've put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.\n\nWith that said, it's inevitable that the comparison would appear biased towards Vue to some React users, as many of the subjects explored are to some extent subjective. We acknowledge the existence of varying technical taste, and this comparison primarily aims to outline the reasons why Vue could potentially be a better fit if your preferences happen to coincide with ours.\n\nThe React community [has been instrumental](https://github.com/vuejs/vuejs.org/issues/364) in helping us achieve this balance, with special thanks to Dan Abramov from the React team. He was extremely generous with his time and considerable expertise to help us refine this document until we were [both happy](https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740) with the final result.\n\n### Performance Profiles\n\nIn every real-world scenario that we've tested so far, Vue outperforms React by a fair margin. If your eyebrows are raising right now, read further. We'll breakdown why (and even include a benchmark developed in collaboration with the React team).\n\n#### Render Performance\n\nWhen rendering UI, manipulating the DOM is typically the most expensive operation and unfortunately, no library can make those raw operations faster. The best we can do is:\n\n1. Minimize the number of necessary DOM mutations. Both React and Vue use virtual DOM abstractions to accomplish this and both implementations work about equally well.\n\n2. Add as little overhead (pure JavaScript computations) as possible on top of those DOM manipulations. This is an area where Vue and React differ.\n\nThe JavaScript overhead is directly related to the mechanisms of computing the necessary DOM operations. Both Vue and React utilizes Virtual DOM to achieve that, but Vue's Virtual DOM implementation (a fork of [snabbdom](https://github.com/snabbdom/snabbdom)) is much lighter-weight and thus introduces less overhead than React's.\n\nBoth Vue and React also offer functional components, which are stateless and instanceless - and therefore, require less overhead. When these are used in performance-critical situations, Vue is once again faster. To demonstrate this, we built a simple [benchmark project](https://github.com/chrisvfritz/vue-render-performance-comparisons) that just renders 10,000 list items 100 times. We encourage you to try it yourself, as the results will vary depending on the hardware and browser used - and actually, they'll vary even between runs due to the nature of JavaScript engines.\n\nIf you're feeling lazy though, below are the numbers from one run in Chrome 52 on a 2014 MacBook Air. To avoid cherry-picking, both benchmarks were actually run 20 separate times, with results from the best runs included below:\n\n{% raw %}\n<table class=\"benchmark-table\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Vue</th>\n      <th>React</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fastest</th>\n      <td>23ms</td>\n      <td>63ms</td>\n    </tr>\n    <tr>\n      <th>Median</th>\n      <td>42ms</td>\n      <td>81ms</td>\n    </tr>\n    <tr>\n      <th>Average</th>\n      <td>51ms</td>\n      <td>94ms</td>\n    </tr>\n    <tr>\n      <th>95th Perc.</th>\n      <td>73ms</td>\n      <td>164ms</td>\n    </tr>\n    <tr>\n      <th>Slowest</th>\n      <td>343ms</td>\n      <td>453ms</td>\n    </tr>\n    </tr>\n  </tbody>\n</table>\n{% endraw %}\n\n#### Update Performance\n\nIn React, when a component's state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to implement `shouldComponentUpdate` everywhere and use immutable data structures. In Vue, a component's dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render.\n\nThis means updates in unoptimized Vue will be much faster than unoptimized React and actually, due to the improved render performance in Vue, even fully-optimized React will usually be slower than Vue is out-of-the-box.\n\n#### In Development\n\nWhile performance in production is the more important metrics as it is directly associated with end-user experience, performance in development still matters because it is associated with the developer experience.\n\nBoth Vue and React remain fast enough in development for most normal applications. However, when prototyping high frame-rate data visualizations or animations, we've seen cases of Vue handling 10 frames per second in development while React dropping to about 1 frame per second.\n\nThis is due to React's many heavy invariant checks in development mode, which help it to provide many excellent warnings and error messages. We agree that these are also important in Vue, but have tried to keep a closer eye on performance while we implement these checks.\n\n### HTML & CSS\n\nIn React, everything is Just JavaScript, which sounds very simple and elegant - until you dig deeper. The unfortunate reality is that reinventing HTML and CSS within JavaScript, while solving some issues of the traditional model, can also cause pain of its own. In Vue, we instead embrace web technologies and build on top of them. To show you what that means, we'll dive into some examples.\n\n#### JSX vs Templates\n\nIn React, all components express their UI within render functions using JSX, a declarative XML-like syntax that works within Javascript. Here's an example, [vetted by the React community](https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684):\n\n``` jsx\nrender () {\n  let { items } = this.props\n\n  let children\n  if (items.length > 0) {\n    children = (\n      <ul>\n        {items.map(item =>\n          <li key={item.id}>{item.name}</li>\n        )}\n      </ul>\n    )\n  } else {\n    children = <p>No items found.</p>\n  }\n\n  return (\n    <div className='list-container'>\n      {children}\n    </div>\n  )\n}\n```\n\nRender functions with JSX have a few advantages:\n\n- You can use the power of a full programming language (JavaScript) to build your view.\n- The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what's currently available for Vue templates.\n\nIn Vue, we also have [render functions](render-function.html) and even [support JSX](render-function.html#JSX), because sometimes you need that power. However, as the default experience we offer templates as a simpler alternative:\n\n``` html\n<template>\n  <div class=\"list-container\">\n    <ul v-if=\"items.length\">\n      <li v-for=\"item in items\">\n        {{ item.name }}\n      </li>\n    </ul>\n    <p v-else>No items found.</p>\n  </div>\n</template>\n```\n\nA few advantages here:\n\n- Fewer implementation and stylistic decisions have to be made while writing a template\n- A template will always be declarative\n- Any valid HTML is valid in a template\n- It reads more like English (e.g. for each item in items)\n- Advanced versions of JavaScript are not required to increase readability\n\nThis is not only much easier for the developer that's writing it, but designers and less experienced developers will also find it much easier parsing and contributing code.\n\nAn additional benefit of HTML-compliant templates is that you can use pre-processors such as Pug (formerly known as Jade) to author your Vue templates:\n\n``` pug\ndiv.list-container\n  ul(v-if=\"items.length\")\n    li(v-for=\"item in items\") {{ item.name }}\n  p(v-else) No items found.\n```\n\n#### Component-Scoped CSS\n\nUnless you spread components out over multiple files (for example with [CSS Modules](https://github.com/gajus/react-css-modules)), scoping CSS in React is often done via CSS-in-JS solutions. There are many competing solutions out there, each with its own caveats. A common issue is that features such as hover states, media queries, and pseudo-selectors either require heavy dependencies to reinvent what CSS already does - or they simply are not supported. If not optimized carefully, CSS-in-JS can also introduce non-trivial runtime performance cost. Most importantly, it deviates from the experience of authoring normal CSS.\n\nVue on the other hand, gives you full access to CSS within [single-file components](single-file-components.html):\n\n``` html\n<style scoped>\n  @media (min-width: 250px) {\n    .list-container:hover {\n      background: orange;\n    }\n  }\n</style>\n```\n\nThe optional `scoped` attribute automatically scopes this CSS to your component by adding a unique attribute (such as `data-v-21e5b78`) to elements and compiling `.list-container:hover` to something like `.list-container[data-v-21e5b78]:hover`.\n\nFinally, just as with HTML, you also have the option of writing your CSS using any preprocessors (or post-processors) you'd like, allowing you to leverage existing libraries in those ecosystems. You can also perform design-centric operations such as color manipulation during your build process, rather than importing specialized JavaScript libraries that would increase the size of your build and complexity of your application.\n\n### Scale\n\n#### Scaling Up\n\nFor large applications, both Vue and React offer robust routing solutions. The React community has also been very innovative in terms of state management solutions (e.g. Flux/Redux). These state management patterns and [even Redux itself](https://github.com/egoist/revue) can be easily integrated into Vue applications. In fact, Vue has even taken this model a step further with [Vuex](https://github.com/vuejs/vuex), an Elm-inspired state management solution that integrates deeply into Vue that we think offers a superior development experience.\n\nAnother important difference between these offerings is that Vue's companion libraries for state management and routing (among [other concerns](https://github.com/vuejs)) are all officially supported and kept up-to-date with the core library. React instead chooses to leave these concerns to the community, creating a more fragmented ecosystem. Being more popular though, React's ecosystem is considerably richer than Vue's.\n\nFinally, Vue offers a [CLI project generator](https://github.com/vuejs/vue-cli) that makes it trivially easy to start a new project using your choice of build system, including [Webpack](https://github.com/vuejs-templates/webpack), [Browserify](https://github.com/vuejs-templates/browserify), or even [no build system](https://github.com/vuejs-templates/simple). React is also making strides in this area with [create-react-app](https://github.com/facebookincubator/create-react-app), but it currently has a few limitations:\n\n- It does not allow any configuration during project generation, while Vue's project templates allow Yeoman-like customization.\n- It only offers a single template that assumes you're building a single-page application, while Vue offers a wide variety of templates for various purposes and build systems.\n- It cannot generate projects from user-built templates, which can be especially useful for enterprise environments with pre-established conventions.\n\nIt's important to note though that many of these limitations are intentional design decisions made by the create-react-app team and they do have their advantages. For example, as long your project's needs are very simple and you never need to \"eject\" to customize your build process, you'll be able to update it as a dependency. You can read more about the [differing philosophy here](https://github.com/facebookincubator/create-react-app#philosophy).\n\n#### Scaling Down\n\nReact is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React's class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it's absolutely not suitable for production.\n\nWhile Vue scales up just as well as, if not better than React, it also scales down just as well as jQuery. That's right - all you have to do is drop a single script tag into a page:\n\n``` html\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n```\n\nThen you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.\n\nSince you don't need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading [the guide](./) to learn enough to build non-trivial applications.\n\n### Native Rendering\n\nReactNative enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with [Weex](https://alibaba.github.io/weex/), a cross-platform UI framework developed by Alibaba Group, which uses Vue as its JavaScript framework runtime. This means with Weex, you can use the same Vue component syntax to author components that can not only be rendered in the Browser, but also natively on iOS and Android!\n\nAt this moment, Weex is still in active development and is not as mature and battle-tested as ReactNative, but its development is driven by the production needs of the largest e-commerce business in the world, and the Vue team will also actively collaborate with the Weex team to ensure a smooth experience for Vue developers.\n\n### With MobX\n\nMobX has become quite popular in the React community and it actually uses a nearly identical reactivity system to Vue. To a limited extent, the React + MobX workflow can be thought of as a more verbose Vue, so if you're using that combination and are enjoying it, jumping into Vue is probably the next logical step.\n\n## Angular 1\n\nSome of Vue's syntax will look very similar to Angular (e.g. `v-if` vs `ng-if`). This is because there were a lot of things that Angular got right and these were an inspiration for Vue very early in its development. There are also many pains that come with Angular however, where Vue has attempted to offer a significant improvement.\n\n### Complexity\n\nVue is much simpler than Angular 1, both in terms of API and design. Learning enough to build non-trivial applications typically takes less than a day, which is not true for Angular 1.\n\n### Flexibility and Modularity\n\nAngular 1 has strong opinions about how your applications should be structured, while Vue is a more flexible, modular solution. While this makes Vue more adaptable to a wide variety of projects, we also recognize that sometimes it's useful to have some decisions made for you, so that you can just get started coding.\n\nThat's why we offer a [Webpack template](https://github.com/vuejs-templates/webpack) that can set you up within minutes, while also granting you access to advanced features such as hot module reloading, linting, CSS extraction, and much more.\n\n### Data binding\n\nAngular 1 uses two-way binding between scopes, while Vue enforces a one-way data flow between components. This makes the flow of data easier to reason about in non-trivial applications.\n\n### Directives vs Components\n\nVue has a clearer separation between directives and components. Directives are meant to encapsulate DOM manipulations only, while components are self-contained units that have their own view and data logic. In Angular, there's a lot of confusion between the two.\n\n### Performance\n\nVue has better performance and is much, much easier to optimize because it doesn't use dirty checking. Angular 1 becomes slow when there are a lot of watchers, because every time anything in the scope changes, all these watchers need to be re-evaluated again. Also, the digest cycle may have to run multiple times to \"stabilize\" if some watcher triggers another update. Angular users often have to resort to esoteric techniques to get around the digest cycle, and in some situations, there's simply no way to optimize a scope with many watchers.\n\nVue doesn't suffer from this at all because it uses a transparent dependency-tracking observation system with async queueing - all changes trigger independently unless they have explicit dependency relationships.\n\nInterestingly, there are quite a few similarities in how Angular 2 and Vue are addressing these Angular 1 issues.\n\n## Angular 2\n\nWe have a separate section for Angular 2 because it really is a completely new framework. For example, it features a first-class component system, many implementation details have been completely rewritten, and the API has also changed quite drastically.\n\n### TypeScript\n\nWhile Angular 1 could be used for smaller applications, Angular 2 has shifted focus to best facilitate large enterprise applications. As part of this, it almost requires TypeScript, which can be very useful for developers that desire the type safety of languages such as Java and C#.\n\nVue is also well-suited to [enterprise environments](https://github.com/vuejs/awesome-vue#enterprise-usage) and can even be used with TypeScript via our [official typings](https://github.com/vuejs/vue/tree/dev/types) and [user-contributed decorators](https://github.com/itsFrank/vue-typescript), though it's definitely optional in our case.\n\n### Size and Performance\n\nIn terms of performance, both frameworks are exceptionally fast and there isn't enough data from real world use cases to make a verdict. However if you are determined to see some numbers, Vue 2.0 seems to be ahead of Angular 2 according to this [3rd party benchmark](http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html).\n\nSize wise, although Angular 2 with offline compilation and tree-shaking is able to get its size down considerably, a full-featured Vue 2.0 with compiler included (23kb) is still lighter than a tree-shaken bare-bone example of Angular 2 (50kb). And do note the Angular 2 app's size is small due to tree-shaking, which removes code for features that you are not using. It will eventually grow back to its actual size as you import and use more features from the framework.\n\n### Flexibility\n\nVue is much less opinionated than Angular 2, offering official support for a variety of build systems, with no restrictions on how you structure your application. Many developers enjoy this freedom, while some prefer having only one Right Way to build any application.\n\n### Learning Curve\n\nTo get started with Vue, all you need is familiarity with HTML and ES5 JavaScript (i.e. plain JavaScript). With these basic skills, you can start building non-trivial applications within less than a day of reading [the guide](./).\n\nAngular 2's learning curve is much steeper. Even without TypeScript, their [Quickstart guide](https://angular.io/docs/js/latest/quickstart.html) starts out with an app that uses ES2015 JavaScript, NPM with 18 dependencies, 4 files, and over 3,000 words to explain it all - just to say Hello World. It's an understatement to say that [Vue's Hello World](https://jsfiddle.net/chrisvfritz/50wL7mdz/) is considerably simpler. It's so trivial in fact, that we don't even dedicate a whole page in the guide to it.\n\n## Ember\n\nEmber is a full-featured framework that is designed to be highly opinionated. It provides a lot of established conventions and once you are familiar enough with them, it can make you very productive. However, it also means the learning curve is high and flexibility suffers. It's a trade-off when you try to pick between an opinionated framework and a library with a loosely coupled set of tools that work together. The latter gives you more freedom but also requires you to make more architectural decisions.\n\nThat said, it would probably make a better comparison between Vue core and Ember's [templating](https://guides.emberjs.com/v2.7.0/templates/handlebars-basics/) and [object model](https://guides.emberjs.com/v2.7.0/object-model/) layers:\n\n- Vue provides unobtrusive reactivity on plain JavaScript objects and fully automatic computed properties. In Ember, you need to wrap everything in Ember Objects and manually declare dependencies for computed properties.\n\n- Vue's template syntax harnesses the full power of JavaScript expressions, while Handlebars' expression and helper syntax is intentionally quite limited in comparison.\n\n- Performance-wise, Vue outperforms Ember by a fair margin, even after the latest Glimmer engine update in Ember 2.0. Vue automatically batches updates, while in Ember you need to manually manage run loops in performance-critical situations.\n\n## Knockout\n\nKnockout was a pioneer in the MVVM and dependency tracking spaces and its reactivity system is very similar to Vue's. Its [browser support](http://knockoutjs.com/documentation/browser-support.html) is also very impressive considering everything it does, with support back to IE6! Vue on the other hand only supports IE9+.\n\nOver time though, Knockout development has slowed and it's begun to show its age a little. For example, its component system lacks a full set of lifecycle hooks and although it's a very common use case, the interface for passing children to a component feels a little clunky compared to [Vue's](components.html#Content-Distribution-with-Slots).\n\nThere also seem to be philosophical differences in the API design which if you're curious, can be demonstrated by how each handles the creation of a [simple todo list](https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89). It's definitely somewhat subjective, but many consider Vue's API to be less complex and better structured.\n\n## Polymer\n\nPolymer is yet another Google-sponsored project and in fact was a source of inspiration for Vue as well. Vue's components can be loosely compared to Polymer's custom elements and both provide a very similar development style. The biggest difference is that Polymer is built upon the latest Web Components features and requires non-trivial polyfills to work (with degraded performance) in browsers that don't support those features natively. In contrast, Vue works without any dependencies or polyfills down to IE9.\n\nIn Polymer 1.0, the team has also made its data-binding system very limited in order to compensate for the performance. For example, the only expressions supported in Polymer templates are boolean negation and single method calls. Its computed property implementation is also not very flexible.\n\nPolymer custom elements are authored in HTML files, which limits you to plain JavaScript/CSS (and language features supported by today's browsers). In comparison, Vue's single file components allows you to easily use ES2015+ and any CSS preprocessors you want.\n\nWhen deploying to production, Polymer recommends loading everything on-the-fly with HTML Imports, which assumes browsers implementing the spec, and HTTP/2 support on both server and client. This may or may not be feasible depending on your target audience and deployment environment. In cases where this is not desirable, you will have to use a special tool called Vulcanizer to bundle your Polymer elements. On this front, Vue can combine its async component feature with Webpack's code-splitting feature to easily split out parts of the application bundle to be lazy-loaded. This ensures compatibility with older browsers while retaining great app loading performance.\n\nIt is also totally feasible to offer deeper integration between Vue with Web Component specs such as Custom Elements and Shadow DOM style encapsulation - however at this moment we are still waiting for the specs to mature and be widely implemented in all mainstream browsers before making any serious commitments.\n\n## Riot\n\nRiot 2.0 provides a similar component-based development model (which is called a \"tag\" in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:\n\n- True conditional rendering. Riot renders all if branches and simply shows/hides them.\n- A far more powerful router. Riot’s routing API is extremely minimal.\n- More mature tooling support. Vue provides official support for [Webpack](https://github.com/vuejs/vue-loader) and [Browserify](https://github.com/vuejs/vueify), while Riot relies on community support for build system integration.\n- [Transition effect system](transitions.html). Riot has none.\n- Better performance. [Despite advertising](https://github.com/vuejs/vuejs.org/issues/346) use of a virtual DOM, Riot in fact uses dirty checking and thus suffers from the same performance issues as Angular 1.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/comparison.html","comments":1,"layout":"page","_id":"civ8jcjoe000s91m18v6nlh5g","content":"<p>This is definitely the most difficult page in the guide to write, but we do feel it’s important. Odds are, you’ve had problems you tried to solve and you’ve used another library to solve them. You’re here because you want to know if Vue can solve your specific problems better. That’s what we hope to answer for you.</p>\n<p>We also try very hard to avoid bias. As the core team, we obviously like Vue a lot. There are some problems we think it solves better than anything else out there. If we didn’t believe that, we wouldn’t be working on it. We do want to be fair and accurate though. Where other libraries offer significant advantages, such as React’s vast ecosystem of alternative renderers or Knockout’s browser support back to IE6, we try to list these as well.</p>\n<p>We’d also like <strong>your</strong> help keeping this document up-to-date because the JavaScript world moves fast! If you notice an inaccuracy or something that doesn’t seem quite right, please let us know by <a href=\"https://github.com/vuejs/vuejs.org/issues/new?title=Inaccuracy+in+comparisons+guide\" target=\"_blank\" rel=\"external\">opening an issue</a>.</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p>React and Vue share many similarities. They both:</p>\n<ul>\n<li>utilize a virtual DOM</li>\n<li>provide reactive and composable view components</li>\n<li>maintain focus in the core library, with concerns such as routing and global state management handled by companion libraries</li>\n</ul>\n<p>Being so similar in scope, we’ve put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.</p>\n<p>With that said, it’s inevitable that the comparison would appear biased towards Vue to some React users, as many of the subjects explored are to some extent subjective. We acknowledge the existence of varying technical taste, and this comparison primarily aims to outline the reasons why Vue could potentially be a better fit if your preferences happen to coincide with ours.</p>\n<p>The React community <a href=\"https://github.com/vuejs/vuejs.org/issues/364\" target=\"_blank\" rel=\"external\">has been instrumental</a> in helping us achieve this balance, with special thanks to Dan Abramov from the React team. He was extremely generous with his time and considerable expertise to help us refine this document until we were <a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740\" target=\"_blank\" rel=\"external\">both happy</a> with the final result.</p>\n<h3 id=\"Performance-Profiles\"><a href=\"#Performance-Profiles\" class=\"headerlink\" title=\"Performance Profiles\"></a>Performance Profiles</h3><p>In every real-world scenario that we’ve tested so far, Vue outperforms React by a fair margin. If your eyebrows are raising right now, read further. We’ll breakdown why (and even include a benchmark developed in collaboration with the React team).</p>\n<h4 id=\"Render-Performance\"><a href=\"#Render-Performance\" class=\"headerlink\" title=\"Render Performance\"></a>Render Performance</h4><p>When rendering UI, manipulating the DOM is typically the most expensive operation and unfortunately, no library can make those raw operations faster. The best we can do is:</p>\n<ol>\n<li><p>Minimize the number of necessary DOM mutations. Both React and Vue use virtual DOM abstractions to accomplish this and both implementations work about equally well.</p>\n</li>\n<li><p>Add as little overhead (pure JavaScript computations) as possible on top of those DOM manipulations. This is an area where Vue and React differ.</p>\n</li>\n</ol>\n<p>The JavaScript overhead is directly related to the mechanisms of computing the necessary DOM operations. Both Vue and React utilizes Virtual DOM to achieve that, but Vue’s Virtual DOM implementation (a fork of <a href=\"https://github.com/snabbdom/snabbdom\" target=\"_blank\" rel=\"external\">snabbdom</a>) is much lighter-weight and thus introduces less overhead than React’s.</p>\n<p>Both Vue and React also offer functional components, which are stateless and instanceless - and therefore, require less overhead. When these are used in performance-critical situations, Vue is once again faster. To demonstrate this, we built a simple <a href=\"https://github.com/chrisvfritz/vue-render-performance-comparisons\" target=\"_blank\" rel=\"external\">benchmark project</a> that just renders 10,000 list items 100 times. We encourage you to try it yourself, as the results will vary depending on the hardware and browser used - and actually, they’ll vary even between runs due to the nature of JavaScript engines.</p>\n<p>If you’re feeling lazy though, below are the numbers from one run in Chrome 52 on a 2014 MacBook Air. To avoid cherry-picking, both benchmarks were actually run 20 separate times, with results from the best runs included below:</p>\n\n<table class=\"benchmark-table\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Vue</th>\n      <th>React</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fastest</th>\n      <td>23ms</td>\n      <td>63ms</td>\n    </tr>\n    <tr>\n      <th>Median</th>\n      <td>42ms</td>\n      <td>81ms</td>\n    </tr>\n    <tr>\n      <th>Average</th>\n      <td>51ms</td>\n      <td>94ms</td>\n    </tr>\n    <tr>\n      <th>95th Perc.</th>\n      <td>73ms</td>\n      <td>164ms</td>\n    </tr>\n    <tr>\n      <th>Slowest</th>\n      <td>343ms</td>\n      <td>453ms</td>\n    </tr>\n    \n  </tbody>\n</table>\n\n<h4 id=\"Update-Performance\"><a href=\"#Update-Performance\" class=\"headerlink\" title=\"Update Performance\"></a>Update Performance</h4><p>In React, when a component’s state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to implement <code>shouldComponentUpdate</code> everywhere and use immutable data structures. In Vue, a component’s dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render.</p>\n<p>This means updates in unoptimized Vue will be much faster than unoptimized React and actually, due to the improved render performance in Vue, even fully-optimized React will usually be slower than Vue is out-of-the-box.</p>\n<h4 id=\"In-Development\"><a href=\"#In-Development\" class=\"headerlink\" title=\"In Development\"></a>In Development</h4><p>While performance in production is the more important metrics as it is directly associated with end-user experience, performance in development still matters because it is associated with the developer experience.</p>\n<p>Both Vue and React remain fast enough in development for most normal applications. However, when prototyping high frame-rate data visualizations or animations, we’ve seen cases of Vue handling 10 frames per second in development while React dropping to about 1 frame per second.</p>\n<p>This is due to React’s many heavy invariant checks in development mode, which help it to provide many excellent warnings and error messages. We agree that these are also important in Vue, but have tried to keep a closer eye on performance while we implement these checks.</p>\n<h3 id=\"HTML-amp-CSS\"><a href=\"#HTML-amp-CSS\" class=\"headerlink\" title=\"HTML &amp; CSS\"></a>HTML &amp; CSS</h3><p>In React, everything is Just JavaScript, which sounds very simple and elegant - until you dig deeper. The unfortunate reality is that reinventing HTML and CSS within JavaScript, while solving some issues of the traditional model, can also cause pain of its own. In Vue, we instead embrace web technologies and build on top of them. To show you what that means, we’ll dive into some examples.</p>\n<h4 id=\"JSX-vs-Templates\"><a href=\"#JSX-vs-Templates\" class=\"headerlink\" title=\"JSX vs Templates\"></a>JSX vs Templates</h4><p>In React, all components express their UI within render functions using JSX, a declarative XML-like syntax that works within Javascript. Here’s an example, <a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684\" target=\"_blank\" rel=\"external\">vetted by the React community</a>:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> &#123; items &#125; = <span class=\"keyword\">this</span>.props</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> children</div><div class=\"line\">  <span class=\"keyword\">if</span> (items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    children = (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">        &#123;items.map(item =&gt;</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        )&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    children = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">'list-container'</span>&gt;</span></span></div><div class=\"line\">      &#123;children&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Render functions with JSX have a few advantages:</p>\n<ul>\n<li>You can use the power of a full programming language (JavaScript) to build your view.</li>\n<li>The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what’s currently available for Vue templates.</li>\n</ul>\n<p>In Vue, we also have <a href=\"render-function.html\">render functions</a> and even <a href=\"render-function.html#JSX\">support JSX</a>, because sometimes you need that power. However, as the default experience we offer templates as a simpler alternative:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">        &#123;&#123; item.name &#125;&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>A few advantages here:</p>\n<ul>\n<li>Fewer implementation and stylistic decisions have to be made while writing a template</li>\n<li>A template will always be declarative</li>\n<li>Any valid HTML is valid in a template</li>\n<li>It reads more like English (e.g. for each item in items)</li>\n<li>Advanced versions of JavaScript are not required to increase readability</li>\n</ul>\n<p>This is not only much easier for the developer that’s writing it, but designers and less experienced developers will also find it much easier parsing and contributing code.</p>\n<p>An additional benefit of HTML-compliant templates is that you can use pre-processors such as Pug (formerly known as Jade) to author your Vue templates:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">div.list-container</div><div class=\"line\">  ul(v-if=&quot;items.length&quot;)</div><div class=\"line\">    li(v-for=&quot;item in items&quot;) &#123;&#123; item.name &#125;&#125;</div><div class=\"line\">  p(v-else) No items found.</div></pre></td></tr></table></figure>\n<h4 id=\"Component-Scoped-CSS\"><a href=\"#Component-Scoped-CSS\" class=\"headerlink\" title=\"Component-Scoped CSS\"></a>Component-Scoped CSS</h4><p>Unless you spread components out over multiple files (for example with <a href=\"https://github.com/gajus/react-css-modules\" target=\"_blank\" rel=\"external\">CSS Modules</a>), scoping CSS in React is often done via CSS-in-JS solutions. There are many competing solutions out there, each with its own caveats. A common issue is that features such as hover states, media queries, and pseudo-selectors either require heavy dependencies to reinvent what CSS already does - or they simply are not supported. If not optimized carefully, CSS-in-JS can also introduce non-trivial runtime performance cost. Most importantly, it deviates from the experience of authoring normal CSS.</p>\n<p>Vue on the other hand, gives you full access to CSS within <a href=\"single-file-components.html\">single-file components</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">  @<span class=\"keyword\">media</span> (min-width: <span class=\"number\">250px</span>) &#123;</div><div class=\"line\">    <span class=\"selector-class\">.list-container</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">background</span>: orange;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The optional <code>scoped</code> attribute automatically scopes this CSS to your component by adding a unique attribute (such as <code>data-v-21e5b78</code>) to elements and compiling <code>.list-container:hover</code> to something like <code>.list-container[data-v-21e5b78]:hover</code>.</p>\n<p>Finally, just as with HTML, you also have the option of writing your CSS using any preprocessors (or post-processors) you’d like, allowing you to leverage existing libraries in those ecosystems. You can also perform design-centric operations such as color manipulation during your build process, rather than importing specialized JavaScript libraries that would increase the size of your build and complexity of your application.</p>\n<h3 id=\"Scale\"><a href=\"#Scale\" class=\"headerlink\" title=\"Scale\"></a>Scale</h3><h4 id=\"Scaling-Up\"><a href=\"#Scaling-Up\" class=\"headerlink\" title=\"Scaling Up\"></a>Scaling Up</h4><p>For large applications, both Vue and React offer robust routing solutions. The React community has also been very innovative in terms of state management solutions (e.g. Flux/Redux). These state management patterns and <a href=\"https://github.com/egoist/revue\" target=\"_blank\" rel=\"external\">even Redux itself</a> can be easily integrated into Vue applications. In fact, Vue has even taken this model a step further with <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>, an Elm-inspired state management solution that integrates deeply into Vue that we think offers a superior development experience.</p>\n<p>Another important difference between these offerings is that Vue’s companion libraries for state management and routing (among <a href=\"https://github.com/vuejs\" target=\"_blank\" rel=\"external\">other concerns</a>) are all officially supported and kept up-to-date with the core library. React instead chooses to leave these concerns to the community, creating a more fragmented ecosystem. Being more popular though, React’s ecosystem is considerably richer than Vue’s.</p>\n<p>Finally, Vue offers a <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">CLI project generator</a> that makes it trivially easy to start a new project using your choice of build system, including <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"external\">Webpack</a>, <a href=\"https://github.com/vuejs-templates/browserify\" target=\"_blank\" rel=\"external\">Browserify</a>, or even <a href=\"https://github.com/vuejs-templates/simple\" target=\"_blank\" rel=\"external\">no build system</a>. React is also making strides in this area with <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"external\">create-react-app</a>, but it currently has a few limitations:</p>\n<ul>\n<li>It does not allow any configuration during project generation, while Vue’s project templates allow Yeoman-like customization.</li>\n<li>It only offers a single template that assumes you’re building a single-page application, while Vue offers a wide variety of templates for various purposes and build systems.</li>\n<li>It cannot generate projects from user-built templates, which can be especially useful for enterprise environments with pre-established conventions.</li>\n</ul>\n<p>It’s important to note though that many of these limitations are intentional design decisions made by the create-react-app team and they do have their advantages. For example, as long your project’s needs are very simple and you never need to “eject” to customize your build process, you’ll be able to update it as a dependency. You can read more about the <a href=\"https://github.com/facebookincubator/create-react-app#philosophy\" target=\"_blank\" rel=\"external\">differing philosophy here</a>.</p>\n<h4 id=\"Scaling-Down\"><a href=\"#Scaling-Down\" class=\"headerlink\" title=\"Scaling Down\"></a>Scaling Down</h4><p>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React’s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it’s absolutely not suitable for production.</p>\n<p>While Vue scales up just as well as, if not better than React, it also scales down just as well as jQuery. That’s right - all you have to do is drop a single script tag into a page:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.</p>\n<p>Since you don’t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading <a href=\"./\">the guide</a> to learn enough to build non-trivial applications.</p>\n<h3 id=\"Native-Rendering\"><a href=\"#Native-Rendering\" class=\"headerlink\" title=\"Native Rendering\"></a>Native Rendering</h3><p>ReactNative enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with <a href=\"https://alibaba.github.io/weex/\" target=\"_blank\" rel=\"external\">Weex</a>, a cross-platform UI framework developed by Alibaba Group, which uses Vue as its JavaScript framework runtime. This means with Weex, you can use the same Vue component syntax to author components that can not only be rendered in the Browser, but also natively on iOS and Android!</p>\n<p>At this moment, Weex is still in active development and is not as mature and battle-tested as ReactNative, but its development is driven by the production needs of the largest e-commerce business in the world, and the Vue team will also actively collaborate with the Weex team to ensure a smooth experience for Vue developers.</p>\n<h3 id=\"With-MobX\"><a href=\"#With-MobX\" class=\"headerlink\" title=\"With MobX\"></a>With MobX</h3><p>MobX has become quite popular in the React community and it actually uses a nearly identical reactivity system to Vue. To a limited extent, the React + MobX workflow can be thought of as a more verbose Vue, so if you’re using that combination and are enjoying it, jumping into Vue is probably the next logical step.</p>\n<h2 id=\"Angular-1\"><a href=\"#Angular-1\" class=\"headerlink\" title=\"Angular 1\"></a>Angular 1</h2><p>Some of Vue’s syntax will look very similar to Angular (e.g. <code>v-if</code> vs <code>ng-if</code>). This is because there were a lot of things that Angular got right and these were an inspiration for Vue very early in its development. There are also many pains that come with Angular however, where Vue has attempted to offer a significant improvement.</p>\n<h3 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h3><p>Vue is much simpler than Angular 1, both in terms of API and design. Learning enough to build non-trivial applications typically takes less than a day, which is not true for Angular 1.</p>\n<h3 id=\"Flexibility-and-Modularity\"><a href=\"#Flexibility-and-Modularity\" class=\"headerlink\" title=\"Flexibility and Modularity\"></a>Flexibility and Modularity</h3><p>Angular 1 has strong opinions about how your applications should be structured, while Vue is a more flexible, modular solution. While this makes Vue more adaptable to a wide variety of projects, we also recognize that sometimes it’s useful to have some decisions made for you, so that you can just get started coding.</p>\n<p>That’s why we offer a <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"external\">Webpack template</a> that can set you up within minutes, while also granting you access to advanced features such as hot module reloading, linting, CSS extraction, and much more.</p>\n<h3 id=\"Data-binding\"><a href=\"#Data-binding\" class=\"headerlink\" title=\"Data binding\"></a>Data binding</h3><p>Angular 1 uses two-way binding between scopes, while Vue enforces a one-way data flow between components. This makes the flow of data easier to reason about in non-trivial applications.</p>\n<h3 id=\"Directives-vs-Components\"><a href=\"#Directives-vs-Components\" class=\"headerlink\" title=\"Directives vs Components\"></a>Directives vs Components</h3><p>Vue has a clearer separation between directives and components. Directives are meant to encapsulate DOM manipulations only, while components are self-contained units that have their own view and data logic. In Angular, there’s a lot of confusion between the two.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Vue has better performance and is much, much easier to optimize because it doesn’t use dirty checking. Angular 1 becomes slow when there are a lot of watchers, because every time anything in the scope changes, all these watchers need to be re-evaluated again. Also, the digest cycle may have to run multiple times to “stabilize” if some watcher triggers another update. Angular users often have to resort to esoteric techniques to get around the digest cycle, and in some situations, there’s simply no way to optimize a scope with many watchers.</p>\n<p>Vue doesn’t suffer from this at all because it uses a transparent dependency-tracking observation system with async queueing - all changes trigger independently unless they have explicit dependency relationships.</p>\n<p>Interestingly, there are quite a few similarities in how Angular 2 and Vue are addressing these Angular 1 issues.</p>\n<h2 id=\"Angular-2\"><a href=\"#Angular-2\" class=\"headerlink\" title=\"Angular 2\"></a>Angular 2</h2><p>We have a separate section for Angular 2 because it really is a completely new framework. For example, it features a first-class component system, many implementation details have been completely rewritten, and the API has also changed quite drastically.</p>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>While Angular 1 could be used for smaller applications, Angular 2 has shifted focus to best facilitate large enterprise applications. As part of this, it almost requires TypeScript, which can be very useful for developers that desire the type safety of languages such as Java and C#.</p>\n<p>Vue is also well-suited to <a href=\"https://github.com/vuejs/awesome-vue#enterprise-usage\" target=\"_blank\" rel=\"external\">enterprise environments</a> and can even be used with TypeScript via our <a href=\"https://github.com/vuejs/vue/tree/dev/types\" target=\"_blank\" rel=\"external\">official typings</a> and <a href=\"https://github.com/itsFrank/vue-typescript\" target=\"_blank\" rel=\"external\">user-contributed decorators</a>, though it’s definitely optional in our case.</p>\n<h3 id=\"Size-and-Performance\"><a href=\"#Size-and-Performance\" class=\"headerlink\" title=\"Size and Performance\"></a>Size and Performance</h3><p>In terms of performance, both frameworks are exceptionally fast and there isn’t enough data from real world use cases to make a verdict. However if you are determined to see some numbers, Vue 2.0 seems to be ahead of Angular 2 according to this <a href=\"http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html\" target=\"_blank\" rel=\"external\">3rd party benchmark</a>.</p>\n<p>Size wise, although Angular 2 with offline compilation and tree-shaking is able to get its size down considerably, a full-featured Vue 2.0 with compiler included (23kb) is still lighter than a tree-shaken bare-bone example of Angular 2 (50kb). And do note the Angular 2 app’s size is small due to tree-shaking, which removes code for features that you are not using. It will eventually grow back to its actual size as you import and use more features from the framework.</p>\n<h3 id=\"Flexibility\"><a href=\"#Flexibility\" class=\"headerlink\" title=\"Flexibility\"></a>Flexibility</h3><p>Vue is much less opinionated than Angular 2, offering official support for a variety of build systems, with no restrictions on how you structure your application. Many developers enjoy this freedom, while some prefer having only one Right Way to build any application.</p>\n<h3 id=\"Learning-Curve\"><a href=\"#Learning-Curve\" class=\"headerlink\" title=\"Learning Curve\"></a>Learning Curve</h3><p>To get started with Vue, all you need is familiarity with HTML and ES5 JavaScript (i.e. plain JavaScript). With these basic skills, you can start building non-trivial applications within less than a day of reading <a href=\"./\">the guide</a>.</p>\n<p>Angular 2’s learning curve is much steeper. Even without TypeScript, their <a href=\"https://angular.io/docs/js/latest/quickstart.html\" target=\"_blank\" rel=\"external\">Quickstart guide</a> starts out with an app that uses ES2015 JavaScript, NPM with 18 dependencies, 4 files, and over 3,000 words to explain it all - just to say Hello World. It’s an understatement to say that <a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\" target=\"_blank\" rel=\"external\">Vue’s Hello World</a> is considerably simpler. It’s so trivial in fact, that we don’t even dedicate a whole page in the guide to it.</p>\n<h2 id=\"Ember\"><a href=\"#Ember\" class=\"headerlink\" title=\"Ember\"></a>Ember</h2><p>Ember is a full-featured framework that is designed to be highly opinionated. It provides a lot of established conventions and once you are familiar enough with them, it can make you very productive. However, it also means the learning curve is high and flexibility suffers. It’s a trade-off when you try to pick between an opinionated framework and a library with a loosely coupled set of tools that work together. The latter gives you more freedom but also requires you to make more architectural decisions.</p>\n<p>That said, it would probably make a better comparison between Vue core and Ember’s <a href=\"https://guides.emberjs.com/v2.7.0/templates/handlebars-basics/\" target=\"_blank\" rel=\"external\">templating</a> and <a href=\"https://guides.emberjs.com/v2.7.0/object-model/\" target=\"_blank\" rel=\"external\">object model</a> layers:</p>\n<ul>\n<li><p>Vue provides unobtrusive reactivity on plain JavaScript objects and fully automatic computed properties. In Ember, you need to wrap everything in Ember Objects and manually declare dependencies for computed properties.</p>\n</li>\n<li><p>Vue’s template syntax harnesses the full power of JavaScript expressions, while Handlebars’ expression and helper syntax is intentionally quite limited in comparison.</p>\n</li>\n<li><p>Performance-wise, Vue outperforms Ember by a fair margin, even after the latest Glimmer engine update in Ember 2.0. Vue automatically batches updates, while in Ember you need to manually manage run loops in performance-critical situations.</p>\n</li>\n</ul>\n<h2 id=\"Knockout\"><a href=\"#Knockout\" class=\"headerlink\" title=\"Knockout\"></a>Knockout</h2><p>Knockout was a pioneer in the MVVM and dependency tracking spaces and its reactivity system is very similar to Vue’s. Its <a href=\"http://knockoutjs.com/documentation/browser-support.html\" target=\"_blank\" rel=\"external\">browser support</a> is also very impressive considering everything it does, with support back to IE6! Vue on the other hand only supports IE9+.</p>\n<p>Over time though, Knockout development has slowed and it’s begun to show its age a little. For example, its component system lacks a full set of lifecycle hooks and although it’s a very common use case, the interface for passing children to a component feels a little clunky compared to <a href=\"components.html#Content-Distribution-with-Slots\">Vue’s</a>.</p>\n<p>There also seem to be philosophical differences in the API design which if you’re curious, can be demonstrated by how each handles the creation of a <a href=\"https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89\" target=\"_blank\" rel=\"external\">simple todo list</a>. It’s definitely somewhat subjective, but many consider Vue’s API to be less complex and better structured.</p>\n<h2 id=\"Polymer\"><a href=\"#Polymer\" class=\"headerlink\" title=\"Polymer\"></a>Polymer</h2><p>Polymer is yet another Google-sponsored project and in fact was a source of inspiration for Vue as well. Vue’s components can be loosely compared to Polymer’s custom elements and both provide a very similar development style. The biggest difference is that Polymer is built upon the latest Web Components features and requires non-trivial polyfills to work (with degraded performance) in browsers that don’t support those features natively. In contrast, Vue works without any dependencies or polyfills down to IE9.</p>\n<p>In Polymer 1.0, the team has also made its data-binding system very limited in order to compensate for the performance. For example, the only expressions supported in Polymer templates are boolean negation and single method calls. Its computed property implementation is also not very flexible.</p>\n<p>Polymer custom elements are authored in HTML files, which limits you to plain JavaScript/CSS (and language features supported by today’s browsers). In comparison, Vue’s single file components allows you to easily use ES2015+ and any CSS preprocessors you want.</p>\n<p>When deploying to production, Polymer recommends loading everything on-the-fly with HTML Imports, which assumes browsers implementing the spec, and HTTP/2 support on both server and client. This may or may not be feasible depending on your target audience and deployment environment. In cases where this is not desirable, you will have to use a special tool called Vulcanizer to bundle your Polymer elements. On this front, Vue can combine its async component feature with Webpack’s code-splitting feature to easily split out parts of the application bundle to be lazy-loaded. This ensures compatibility with older browsers while retaining great app loading performance.</p>\n<p>It is also totally feasible to offer deeper integration between Vue with Web Component specs such as Custom Elements and Shadow DOM style encapsulation - however at this moment we are still waiting for the specs to mature and be widely implemented in all mainstream browsers before making any serious commitments.</p>\n<h2 id=\"Riot\"><a href=\"#Riot\" class=\"headerlink\" title=\"Riot\"></a>Riot</h2><p>Riot 2.0 provides a similar component-based development model (which is called a “tag” in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</p>\n<ul>\n<li>True conditional rendering. Riot renders all if branches and simply shows/hides them.</li>\n<li>A far more powerful router. Riot’s routing API is extremely minimal.</li>\n<li>More mature tooling support. Vue provides official support for <a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"external\">Webpack</a> and <a href=\"https://github.com/vuejs/vueify\" target=\"_blank\" rel=\"external\">Browserify</a>, while Riot relies on community support for build system integration.</li>\n<li><a href=\"transitions.html\">Transition effect system</a>. Riot has none.</li>\n<li>Better performance. <a href=\"https://github.com/vuejs/vuejs.org/issues/346\" target=\"_blank\" rel=\"external\">Despite advertising</a> use of a virtual DOM, Riot in fact uses dirty checking and thus suffers from the same performance issues as Angular 1.</li>\n</ul>\n","excerpt":"","more":"<p>This is definitely the most difficult page in the guide to write, but we do feel it’s important. Odds are, you’ve had problems you tried to solve and you’ve used another library to solve them. You’re here because you want to know if Vue can solve your specific problems better. That’s what we hope to answer for you.</p>\n<p>We also try very hard to avoid bias. As the core team, we obviously like Vue a lot. There are some problems we think it solves better than anything else out there. If we didn’t believe that, we wouldn’t be working on it. We do want to be fair and accurate though. Where other libraries offer significant advantages, such as React’s vast ecosystem of alternative renderers or Knockout’s browser support back to IE6, we try to list these as well.</p>\n<p>We’d also like <strong>your</strong> help keeping this document up-to-date because the JavaScript world moves fast! If you notice an inaccuracy or something that doesn’t seem quite right, please let us know by <a href=\"https://github.com/vuejs/vuejs.org/issues/new?title=Inaccuracy+in+comparisons+guide\">opening an issue</a>.</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p>React and Vue share many similarities. They both:</p>\n<ul>\n<li>utilize a virtual DOM</li>\n<li>provide reactive and composable view components</li>\n<li>maintain focus in the core library, with concerns such as routing and global state management handled by companion libraries</li>\n</ul>\n<p>Being so similar in scope, we’ve put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.</p>\n<p>With that said, it’s inevitable that the comparison would appear biased towards Vue to some React users, as many of the subjects explored are to some extent subjective. We acknowledge the existence of varying technical taste, and this comparison primarily aims to outline the reasons why Vue could potentially be a better fit if your preferences happen to coincide with ours.</p>\n<p>The React community <a href=\"https://github.com/vuejs/vuejs.org/issues/364\">has been instrumental</a> in helping us achieve this balance, with special thanks to Dan Abramov from the React team. He was extremely generous with his time and considerable expertise to help us refine this document until we were <a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740\">both happy</a> with the final result.</p>\n<h3 id=\"Performance-Profiles\"><a href=\"#Performance-Profiles\" class=\"headerlink\" title=\"Performance Profiles\"></a>Performance Profiles</h3><p>In every real-world scenario that we’ve tested so far, Vue outperforms React by a fair margin. If your eyebrows are raising right now, read further. We’ll breakdown why (and even include a benchmark developed in collaboration with the React team).</p>\n<h4 id=\"Render-Performance\"><a href=\"#Render-Performance\" class=\"headerlink\" title=\"Render Performance\"></a>Render Performance</h4><p>When rendering UI, manipulating the DOM is typically the most expensive operation and unfortunately, no library can make those raw operations faster. The best we can do is:</p>\n<ol>\n<li><p>Minimize the number of necessary DOM mutations. Both React and Vue use virtual DOM abstractions to accomplish this and both implementations work about equally well.</p>\n</li>\n<li><p>Add as little overhead (pure JavaScript computations) as possible on top of those DOM manipulations. This is an area where Vue and React differ.</p>\n</li>\n</ol>\n<p>The JavaScript overhead is directly related to the mechanisms of computing the necessary DOM operations. Both Vue and React utilizes Virtual DOM to achieve that, but Vue’s Virtual DOM implementation (a fork of <a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a>) is much lighter-weight and thus introduces less overhead than React’s.</p>\n<p>Both Vue and React also offer functional components, which are stateless and instanceless - and therefore, require less overhead. When these are used in performance-critical situations, Vue is once again faster. To demonstrate this, we built a simple <a href=\"https://github.com/chrisvfritz/vue-render-performance-comparisons\">benchmark project</a> that just renders 10,000 list items 100 times. We encourage you to try it yourself, as the results will vary depending on the hardware and browser used - and actually, they’ll vary even between runs due to the nature of JavaScript engines.</p>\n<p>If you’re feeling lazy though, below are the numbers from one run in Chrome 52 on a 2014 MacBook Air. To avoid cherry-picking, both benchmarks were actually run 20 separate times, with results from the best runs included below:</p>\n\n<table class=\"benchmark-table\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Vue</th>\n      <th>React</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fastest</th>\n      <td>23ms</td>\n      <td>63ms</td>\n    </tr>\n    <tr>\n      <th>Median</th>\n      <td>42ms</td>\n      <td>81ms</td>\n    </tr>\n    <tr>\n      <th>Average</th>\n      <td>51ms</td>\n      <td>94ms</td>\n    </tr>\n    <tr>\n      <th>95th Perc.</th>\n      <td>73ms</td>\n      <td>164ms</td>\n    </tr>\n    <tr>\n      <th>Slowest</th>\n      <td>343ms</td>\n      <td>453ms</td>\n    </tr>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"Update-Performance\"><a href=\"#Update-Performance\" class=\"headerlink\" title=\"Update Performance\"></a>Update Performance</h4><p>In React, when a component’s state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to implement <code>shouldComponentUpdate</code> everywhere and use immutable data structures. In Vue, a component’s dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render.</p>\n<p>This means updates in unoptimized Vue will be much faster than unoptimized React and actually, due to the improved render performance in Vue, even fully-optimized React will usually be slower than Vue is out-of-the-box.</p>\n<h4 id=\"In-Development\"><a href=\"#In-Development\" class=\"headerlink\" title=\"In Development\"></a>In Development</h4><p>While performance in production is the more important metrics as it is directly associated with end-user experience, performance in development still matters because it is associated with the developer experience.</p>\n<p>Both Vue and React remain fast enough in development for most normal applications. However, when prototyping high frame-rate data visualizations or animations, we’ve seen cases of Vue handling 10 frames per second in development while React dropping to about 1 frame per second.</p>\n<p>This is due to React’s many heavy invariant checks in development mode, which help it to provide many excellent warnings and error messages. We agree that these are also important in Vue, but have tried to keep a closer eye on performance while we implement these checks.</p>\n<h3 id=\"HTML-amp-CSS\"><a href=\"#HTML-amp-CSS\" class=\"headerlink\" title=\"HTML &amp; CSS\"></a>HTML &amp; CSS</h3><p>In React, everything is Just JavaScript, which sounds very simple and elegant - until you dig deeper. The unfortunate reality is that reinventing HTML and CSS within JavaScript, while solving some issues of the traditional model, can also cause pain of its own. In Vue, we instead embrace web technologies and build on top of them. To show you what that means, we’ll dive into some examples.</p>\n<h4 id=\"JSX-vs-Templates\"><a href=\"#JSX-vs-Templates\" class=\"headerlink\" title=\"JSX vs Templates\"></a>JSX vs Templates</h4><p>In React, all components express their UI within render functions using JSX, a declarative XML-like syntax that works within Javascript. Here’s an example, <a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684\">vetted by the React community</a>:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><div class=\"line\">render () &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> &#123; items &#125; = <span class=\"keyword\">this</span>.props</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> children</div><div class=\"line\">  <span class=\"keyword\">if</span> (items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    children = (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        &#123;items.map(item =&gt;</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        )&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    children = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">'list-container'</span>&gt;</span></div><div class=\"line\">      &#123;children&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Render functions with JSX have a few advantages:</p>\n<ul>\n<li>You can use the power of a full programming language (JavaScript) to build your view.</li>\n<li>The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what’s currently available for Vue templates.</li>\n</ul>\n<p>In Vue, we also have <a href=\"render-function.html\">render functions</a> and even <a href=\"render-function.html#JSX\">support JSX</a>, because sometimes you need that power. However, as the default experience we offer templates as a simpler alternative:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">        &#123;&#123; item.name &#125;&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>A few advantages here:</p>\n<ul>\n<li>Fewer implementation and stylistic decisions have to be made while writing a template</li>\n<li>A template will always be declarative</li>\n<li>Any valid HTML is valid in a template</li>\n<li>It reads more like English (e.g. for each item in items)</li>\n<li>Advanced versions of JavaScript are not required to increase readability</li>\n</ul>\n<p>This is not only much easier for the developer that’s writing it, but designers and less experienced developers will also find it much easier parsing and contributing code.</p>\n<p>An additional benefit of HTML-compliant templates is that you can use pre-processors such as Pug (formerly known as Jade) to author your Vue templates:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">div.list-container</div><div class=\"line\">  ul(v-if=&quot;items.length&quot;)</div><div class=\"line\">    li(v-for=&quot;item in items&quot;) &#123;&#123; item.name &#125;&#125;</div><div class=\"line\">  p(v-else) No items found.</div></pre></td></tr></table></figure>\n<h4 id=\"Component-Scoped-CSS\"><a href=\"#Component-Scoped-CSS\" class=\"headerlink\" title=\"Component-Scoped CSS\"></a>Component-Scoped CSS</h4><p>Unless you spread components out over multiple files (for example with <a href=\"https://github.com/gajus/react-css-modules\">CSS Modules</a>), scoping CSS in React is often done via CSS-in-JS solutions. There are many competing solutions out there, each with its own caveats. A common issue is that features such as hover states, media queries, and pseudo-selectors either require heavy dependencies to reinvent what CSS already does - or they simply are not supported. If not optimized carefully, CSS-in-JS can also introduce non-trivial runtime performance cost. Most importantly, it deviates from the experience of authoring normal CSS.</p>\n<p>Vue on the other hand, gives you full access to CSS within <a href=\"single-file-components.html\">single-file components</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></div><div class=\"line\">  @<span class=\"keyword\">media</span> (min-width: <span class=\"number\">250px</span>) &#123;</div><div class=\"line\">    <span class=\"selector-class\">.list-container</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">background</span>: orange;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The optional <code>scoped</code> attribute automatically scopes this CSS to your component by adding a unique attribute (such as <code>data-v-21e5b78</code>) to elements and compiling <code>.list-container:hover</code> to something like <code>.list-container[data-v-21e5b78]:hover</code>.</p>\n<p>Finally, just as with HTML, you also have the option of writing your CSS using any preprocessors (or post-processors) you’d like, allowing you to leverage existing libraries in those ecosystems. You can also perform design-centric operations such as color manipulation during your build process, rather than importing specialized JavaScript libraries that would increase the size of your build and complexity of your application.</p>\n<h3 id=\"Scale\"><a href=\"#Scale\" class=\"headerlink\" title=\"Scale\"></a>Scale</h3><h4 id=\"Scaling-Up\"><a href=\"#Scaling-Up\" class=\"headerlink\" title=\"Scaling Up\"></a>Scaling Up</h4><p>For large applications, both Vue and React offer robust routing solutions. The React community has also been very innovative in terms of state management solutions (e.g. Flux/Redux). These state management patterns and <a href=\"https://github.com/egoist/revue\">even Redux itself</a> can be easily integrated into Vue applications. In fact, Vue has even taken this model a step further with <a href=\"https://github.com/vuejs/vuex\">Vuex</a>, an Elm-inspired state management solution that integrates deeply into Vue that we think offers a superior development experience.</p>\n<p>Another important difference between these offerings is that Vue’s companion libraries for state management and routing (among <a href=\"https://github.com/vuejs\">other concerns</a>) are all officially supported and kept up-to-date with the core library. React instead chooses to leave these concerns to the community, creating a more fragmented ecosystem. Being more popular though, React’s ecosystem is considerably richer than Vue’s.</p>\n<p>Finally, Vue offers a <a href=\"https://github.com/vuejs/vue-cli\">CLI project generator</a> that makes it trivially easy to start a new project using your choice of build system, including <a href=\"https://github.com/vuejs-templates/webpack\">Webpack</a>, <a href=\"https://github.com/vuejs-templates/browserify\">Browserify</a>, or even <a href=\"https://github.com/vuejs-templates/simple\">no build system</a>. React is also making strides in this area with <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>, but it currently has a few limitations:</p>\n<ul>\n<li>It does not allow any configuration during project generation, while Vue’s project templates allow Yeoman-like customization.</li>\n<li>It only offers a single template that assumes you’re building a single-page application, while Vue offers a wide variety of templates for various purposes and build systems.</li>\n<li>It cannot generate projects from user-built templates, which can be especially useful for enterprise environments with pre-established conventions.</li>\n</ul>\n<p>It’s important to note though that many of these limitations are intentional design decisions made by the create-react-app team and they do have their advantages. For example, as long your project’s needs are very simple and you never need to “eject” to customize your build process, you’ll be able to update it as a dependency. You can read more about the <a href=\"https://github.com/facebookincubator/create-react-app#philosophy\">differing philosophy here</a>.</p>\n<h4 id=\"Scaling-Down\"><a href=\"#Scaling-Down\" class=\"headerlink\" title=\"Scaling Down\"></a>Scaling Down</h4><p>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React’s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it’s absolutely not suitable for production.</p>\n<p>While Vue scales up just as well as, if not better than React, it also scales down just as well as jQuery. That’s right - all you have to do is drop a single script tag into a page:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.</p>\n<p>Since you don’t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading <a href=\"./\">the guide</a> to learn enough to build non-trivial applications.</p>\n<h3 id=\"Native-Rendering\"><a href=\"#Native-Rendering\" class=\"headerlink\" title=\"Native Rendering\"></a>Native Rendering</h3><p>ReactNative enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with <a href=\"https://alibaba.github.io/weex/\">Weex</a>, a cross-platform UI framework developed by Alibaba Group, which uses Vue as its JavaScript framework runtime. This means with Weex, you can use the same Vue component syntax to author components that can not only be rendered in the Browser, but also natively on iOS and Android!</p>\n<p>At this moment, Weex is still in active development and is not as mature and battle-tested as ReactNative, but its development is driven by the production needs of the largest e-commerce business in the world, and the Vue team will also actively collaborate with the Weex team to ensure a smooth experience for Vue developers.</p>\n<h3 id=\"With-MobX\"><a href=\"#With-MobX\" class=\"headerlink\" title=\"With MobX\"></a>With MobX</h3><p>MobX has become quite popular in the React community and it actually uses a nearly identical reactivity system to Vue. To a limited extent, the React + MobX workflow can be thought of as a more verbose Vue, so if you’re using that combination and are enjoying it, jumping into Vue is probably the next logical step.</p>\n<h2 id=\"Angular-1\"><a href=\"#Angular-1\" class=\"headerlink\" title=\"Angular 1\"></a>Angular 1</h2><p>Some of Vue’s syntax will look very similar to Angular (e.g. <code>v-if</code> vs <code>ng-if</code>). This is because there were a lot of things that Angular got right and these were an inspiration for Vue very early in its development. There are also many pains that come with Angular however, where Vue has attempted to offer a significant improvement.</p>\n<h3 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h3><p>Vue is much simpler than Angular 1, both in terms of API and design. Learning enough to build non-trivial applications typically takes less than a day, which is not true for Angular 1.</p>\n<h3 id=\"Flexibility-and-Modularity\"><a href=\"#Flexibility-and-Modularity\" class=\"headerlink\" title=\"Flexibility and Modularity\"></a>Flexibility and Modularity</h3><p>Angular 1 has strong opinions about how your applications should be structured, while Vue is a more flexible, modular solution. While this makes Vue more adaptable to a wide variety of projects, we also recognize that sometimes it’s useful to have some decisions made for you, so that you can just get started coding.</p>\n<p>That’s why we offer a <a href=\"https://github.com/vuejs-templates/webpack\">Webpack template</a> that can set you up within minutes, while also granting you access to advanced features such as hot module reloading, linting, CSS extraction, and much more.</p>\n<h3 id=\"Data-binding\"><a href=\"#Data-binding\" class=\"headerlink\" title=\"Data binding\"></a>Data binding</h3><p>Angular 1 uses two-way binding between scopes, while Vue enforces a one-way data flow between components. This makes the flow of data easier to reason about in non-trivial applications.</p>\n<h3 id=\"Directives-vs-Components\"><a href=\"#Directives-vs-Components\" class=\"headerlink\" title=\"Directives vs Components\"></a>Directives vs Components</h3><p>Vue has a clearer separation between directives and components. Directives are meant to encapsulate DOM manipulations only, while components are self-contained units that have their own view and data logic. In Angular, there’s a lot of confusion between the two.</p>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><p>Vue has better performance and is much, much easier to optimize because it doesn’t use dirty checking. Angular 1 becomes slow when there are a lot of watchers, because every time anything in the scope changes, all these watchers need to be re-evaluated again. Also, the digest cycle may have to run multiple times to “stabilize” if some watcher triggers another update. Angular users often have to resort to esoteric techniques to get around the digest cycle, and in some situations, there’s simply no way to optimize a scope with many watchers.</p>\n<p>Vue doesn’t suffer from this at all because it uses a transparent dependency-tracking observation system with async queueing - all changes trigger independently unless they have explicit dependency relationships.</p>\n<p>Interestingly, there are quite a few similarities in how Angular 2 and Vue are addressing these Angular 1 issues.</p>\n<h2 id=\"Angular-2\"><a href=\"#Angular-2\" class=\"headerlink\" title=\"Angular 2\"></a>Angular 2</h2><p>We have a separate section for Angular 2 because it really is a completely new framework. For example, it features a first-class component system, many implementation details have been completely rewritten, and the API has also changed quite drastically.</p>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>While Angular 1 could be used for smaller applications, Angular 2 has shifted focus to best facilitate large enterprise applications. As part of this, it almost requires TypeScript, which can be very useful for developers that desire the type safety of languages such as Java and C#.</p>\n<p>Vue is also well-suited to <a href=\"https://github.com/vuejs/awesome-vue#enterprise-usage\">enterprise environments</a> and can even be used with TypeScript via our <a href=\"https://github.com/vuejs/vue/tree/dev/types\">official typings</a> and <a href=\"https://github.com/itsFrank/vue-typescript\">user-contributed decorators</a>, though it’s definitely optional in our case.</p>\n<h3 id=\"Size-and-Performance\"><a href=\"#Size-and-Performance\" class=\"headerlink\" title=\"Size and Performance\"></a>Size and Performance</h3><p>In terms of performance, both frameworks are exceptionally fast and there isn’t enough data from real world use cases to make a verdict. However if you are determined to see some numbers, Vue 2.0 seems to be ahead of Angular 2 according to this <a href=\"http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html\">3rd party benchmark</a>.</p>\n<p>Size wise, although Angular 2 with offline compilation and tree-shaking is able to get its size down considerably, a full-featured Vue 2.0 with compiler included (23kb) is still lighter than a tree-shaken bare-bone example of Angular 2 (50kb). And do note the Angular 2 app’s size is small due to tree-shaking, which removes code for features that you are not using. It will eventually grow back to its actual size as you import and use more features from the framework.</p>\n<h3 id=\"Flexibility\"><a href=\"#Flexibility\" class=\"headerlink\" title=\"Flexibility\"></a>Flexibility</h3><p>Vue is much less opinionated than Angular 2, offering official support for a variety of build systems, with no restrictions on how you structure your application. Many developers enjoy this freedom, while some prefer having only one Right Way to build any application.</p>\n<h3 id=\"Learning-Curve\"><a href=\"#Learning-Curve\" class=\"headerlink\" title=\"Learning Curve\"></a>Learning Curve</h3><p>To get started with Vue, all you need is familiarity with HTML and ES5 JavaScript (i.e. plain JavaScript). With these basic skills, you can start building non-trivial applications within less than a day of reading <a href=\"./\">the guide</a>.</p>\n<p>Angular 2’s learning curve is much steeper. Even without TypeScript, their <a href=\"https://angular.io/docs/js/latest/quickstart.html\">Quickstart guide</a> starts out with an app that uses ES2015 JavaScript, NPM with 18 dependencies, 4 files, and over 3,000 words to explain it all - just to say Hello World. It’s an understatement to say that <a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\">Vue’s Hello World</a> is considerably simpler. It’s so trivial in fact, that we don’t even dedicate a whole page in the guide to it.</p>\n<h2 id=\"Ember\"><a href=\"#Ember\" class=\"headerlink\" title=\"Ember\"></a>Ember</h2><p>Ember is a full-featured framework that is designed to be highly opinionated. It provides a lot of established conventions and once you are familiar enough with them, it can make you very productive. However, it also means the learning curve is high and flexibility suffers. It’s a trade-off when you try to pick between an opinionated framework and a library with a loosely coupled set of tools that work together. The latter gives you more freedom but also requires you to make more architectural decisions.</p>\n<p>That said, it would probably make a better comparison between Vue core and Ember’s <a href=\"https://guides.emberjs.com/v2.7.0/templates/handlebars-basics/\">templating</a> and <a href=\"https://guides.emberjs.com/v2.7.0/object-model/\">object model</a> layers:</p>\n<ul>\n<li><p>Vue provides unobtrusive reactivity on plain JavaScript objects and fully automatic computed properties. In Ember, you need to wrap everything in Ember Objects and manually declare dependencies for computed properties.</p>\n</li>\n<li><p>Vue’s template syntax harnesses the full power of JavaScript expressions, while Handlebars’ expression and helper syntax is intentionally quite limited in comparison.</p>\n</li>\n<li><p>Performance-wise, Vue outperforms Ember by a fair margin, even after the latest Glimmer engine update in Ember 2.0. Vue automatically batches updates, while in Ember you need to manually manage run loops in performance-critical situations.</p>\n</li>\n</ul>\n<h2 id=\"Knockout\"><a href=\"#Knockout\" class=\"headerlink\" title=\"Knockout\"></a>Knockout</h2><p>Knockout was a pioneer in the MVVM and dependency tracking spaces and its reactivity system is very similar to Vue’s. Its <a href=\"http://knockoutjs.com/documentation/browser-support.html\">browser support</a> is also very impressive considering everything it does, with support back to IE6! Vue on the other hand only supports IE9+.</p>\n<p>Over time though, Knockout development has slowed and it’s begun to show its age a little. For example, its component system lacks a full set of lifecycle hooks and although it’s a very common use case, the interface for passing children to a component feels a little clunky compared to <a href=\"components.html#Content-Distribution-with-Slots\">Vue’s</a>.</p>\n<p>There also seem to be philosophical differences in the API design which if you’re curious, can be demonstrated by how each handles the creation of a <a href=\"https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89\">simple todo list</a>. It’s definitely somewhat subjective, but many consider Vue’s API to be less complex and better structured.</p>\n<h2 id=\"Polymer\"><a href=\"#Polymer\" class=\"headerlink\" title=\"Polymer\"></a>Polymer</h2><p>Polymer is yet another Google-sponsored project and in fact was a source of inspiration for Vue as well. Vue’s components can be loosely compared to Polymer’s custom elements and both provide a very similar development style. The biggest difference is that Polymer is built upon the latest Web Components features and requires non-trivial polyfills to work (with degraded performance) in browsers that don’t support those features natively. In contrast, Vue works without any dependencies or polyfills down to IE9.</p>\n<p>In Polymer 1.0, the team has also made its data-binding system very limited in order to compensate for the performance. For example, the only expressions supported in Polymer templates are boolean negation and single method calls. Its computed property implementation is also not very flexible.</p>\n<p>Polymer custom elements are authored in HTML files, which limits you to plain JavaScript/CSS (and language features supported by today’s browsers). In comparison, Vue’s single file components allows you to easily use ES2015+ and any CSS preprocessors you want.</p>\n<p>When deploying to production, Polymer recommends loading everything on-the-fly with HTML Imports, which assumes browsers implementing the spec, and HTTP/2 support on both server and client. This may or may not be feasible depending on your target audience and deployment environment. In cases where this is not desirable, you will have to use a special tool called Vulcanizer to bundle your Polymer elements. On this front, Vue can combine its async component feature with Webpack’s code-splitting feature to easily split out parts of the application bundle to be lazy-loaded. This ensures compatibility with older browsers while retaining great app loading performance.</p>\n<p>It is also totally feasible to offer deeper integration between Vue with Web Component specs such as Custom Elements and Shadow DOM style encapsulation - however at this moment we are still waiting for the specs to mature and be widely implemented in all mainstream browsers before making any serious commitments.</p>\n<h2 id=\"Riot\"><a href=\"#Riot\" class=\"headerlink\" title=\"Riot\"></a>Riot</h2><p>Riot 2.0 provides a similar component-based development model (which is called a “tag” in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</p>\n<ul>\n<li>True conditional rendering. Riot renders all if branches and simply shows/hides them.</li>\n<li>A far more powerful router. Riot’s routing API is extremely minimal.</li>\n<li>More mature tooling support. Vue provides official support for <a href=\"https://github.com/vuejs/vue-loader\">Webpack</a> and <a href=\"https://github.com/vuejs/vueify\">Browserify</a>, while Riot relies on community support for build system integration.</li>\n<li><a href=\"transitions.html\">Transition effect system</a>. Riot has none.</li>\n<li>Better performance. <a href=\"https://github.com/vuejs/vuejs.org/issues/346\">Despite advertising</a> use of a virtual DOM, Riot in fact uses dirty checking and thus suffers from the same performance issues as Angular 1.</li>\n</ul>\n"},{"title":"Computed Properties and Watchers","type":"guide","order":5,"_content":"\n## Computed Properties\n\nIn-template expressions are very convenient, but they are really only meant for simple operations. Putting too much logic into your templates can make them bloated and hard to maintain. For example:\n\n``` html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\nAt this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays `message` in reverse. The problem is made worse when you want to include the reversed message in your template more than once.\n\nThat's why for any complex logic, you should use a **computed property**.\n\n### Basic Example\n\n``` html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<div id=\"example\" class=\"demo\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n<script>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nHere we have declared a computed property `reversedMessage`. The function we provided will be used as the getter function for the property `vm.reversedMessage`:\n\n``` js\nconsole.log(vm.reversedMessage) // -> 'olleH'\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // -> 'eybdooG'\n```\n\nYou can open the console and play with the example vm yourself. The value of `vm.reversedMessage` is always dependent on the value of `vm.message`.\n\nYou can data-bind to computed properties in templates just like a normal property. Vue is aware that `vm.reversedMessage` depends on `vm.message`, so it will update any bindings that depend on `vm.reversedMessage` when `vm.message` changes. And the best part is that we've created this dependency relationship declaratively: the computed getter function is pure and has no side effects, which makes it easy to test and reason about.\n\n### Computed Caching vs Methods\n\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n``` html\n<p>Reversed message: \"{{ reverseMessage() }}\"</p>\n```\n\n``` js\n// in component\nmethods: {\n  reverseMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their dependencies.** A computed property will only re-evaluate when some of its dependencies have changed. This means as long as `message` has not changed, multiple access to the `reversedMessage` computed property will immediately return the previously computed result without having to run the function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n``` js\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens.\n\nWhy do we need caching? Imagine we have an expensive computed property **A**, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on **A**. Without caching, we would be executing **A**’s getter many more times than necessary! In cases where you do not want caching, use a method instead.\n\n### Computed vs Watched Property\n\nVue does provide a more generic way to observe and react to data changes on a Vue instance: **watch properties**. When you have some data that needs to change based on some other data, it is tempting to overuse `watch` - especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative `watch` callback. Consider this example:\n\n``` html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  }\n})\n```\n\nThe above code is imperative and repetitive. Compare it with a computed property version:\n\n``` js\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n```\n\nMuch better, isn't it?\n\n### Computed Setter\n\nComputed properties are by default getter-only, but you can also provide a setter when you need it:\n\n``` js\n// ...\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n// ...\n```\n\nNow when you run `vm.fullName = 'John Doe'`, the setter will be invoked and `vm.firstName` and `vm.lastName` will be updated accordingly.\n\n## Watchers\n\nWhile computed properties are more appropriate in most cases, there are times when a custom watcher is necessary. That's why Vue provides a more generic way to react to data changes through the `watch` option. This is most useful when you want to perform asynchronous or expensive operations in response to changing data.\n\nFor example:\n\n``` html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n``` html\n<!-- Since there is already a rich ecosystem of ajax libraries    -->\n<!-- and collections of general-purpose utility methods, Vue core -->\n<!-- is able to remain small by not reinventing them. This also   -->\n<!-- gives you the freedom to just use what you're familiar with. -->\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    // _.debounce is a function provided by lodash to limit how\n    // often a particularly expensive operation can be run.\n    // In this case, we want to limit how often we access\n    // yesno.wtf/api, waiting until the user has completely\n    // finished typing before making the ajax request. To learn\n    // more about the _.debounce function (and its cousin\n    // _.throttle), visit: https://lodash.com/docs#debounce\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      // This is the number of milliseconds we wait for the\n      // user to stop typing.\n      500\n    )\n  }\n})\n</script>\n```\n\nResult:\n\n{% raw %}\n<div id=\"watch-example\" class=\"demo\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      500\n    )\n  }\n})\n</script>\n{% endraw %}\n\nIn this case, using the `watch` option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer. None of that would be possible with a computed property.\n\nIn addition to the `watch` option, you can also use the imperative [vm.$watch API](../api/#vm-watch).\n","source":"v2/guide/computed.md","raw":"---\ntitle: Computed Properties and Watchers\ntype: guide\norder: 5\n---\n\n## Computed Properties\n\nIn-template expressions are very convenient, but they are really only meant for simple operations. Putting too much logic into your templates can make them bloated and hard to maintain. For example:\n\n``` html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\nAt this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays `message` in reverse. The problem is made worse when you want to include the reversed message in your template more than once.\n\nThat's why for any complex logic, you should use a **computed property**.\n\n### Basic Example\n\n``` html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<div id=\"example\" class=\"demo\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n<script>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nHere we have declared a computed property `reversedMessage`. The function we provided will be used as the getter function for the property `vm.reversedMessage`:\n\n``` js\nconsole.log(vm.reversedMessage) // -> 'olleH'\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // -> 'eybdooG'\n```\n\nYou can open the console and play with the example vm yourself. The value of `vm.reversedMessage` is always dependent on the value of `vm.message`.\n\nYou can data-bind to computed properties in templates just like a normal property. Vue is aware that `vm.reversedMessage` depends on `vm.message`, so it will update any bindings that depend on `vm.reversedMessage` when `vm.message` changes. And the best part is that we've created this dependency relationship declaratively: the computed getter function is pure and has no side effects, which makes it easy to test and reason about.\n\n### Computed Caching vs Methods\n\nYou may have noticed we can achieve the same result by invoking a method in the expression:\n\n``` html\n<p>Reversed message: \"{{ reverseMessage() }}\"</p>\n```\n\n``` js\n// in component\nmethods: {\n  reverseMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\nInstead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their dependencies.** A computed property will only re-evaluate when some of its dependencies have changed. This means as long as `message` has not changed, multiple access to the `reversedMessage` computed property will immediately return the previously computed result without having to run the function again.\n\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\n\n``` js\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\nIn comparison, a method invocation will **always** run the function whenever a re-render happens.\n\nWhy do we need caching? Imagine we have an expensive computed property **A**, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on **A**. Without caching, we would be executing **A**’s getter many more times than necessary! In cases where you do not want caching, use a method instead.\n\n### Computed vs Watched Property\n\nVue does provide a more generic way to observe and react to data changes on a Vue instance: **watch properties**. When you have some data that needs to change based on some other data, it is tempting to overuse `watch` - especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative `watch` callback. Consider this example:\n\n``` html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  }\n})\n```\n\nThe above code is imperative and repetitive. Compare it with a computed property version:\n\n``` js\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n```\n\nMuch better, isn't it?\n\n### Computed Setter\n\nComputed properties are by default getter-only, but you can also provide a setter when you need it:\n\n``` js\n// ...\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n// ...\n```\n\nNow when you run `vm.fullName = 'John Doe'`, the setter will be invoked and `vm.firstName` and `vm.lastName` will be updated accordingly.\n\n## Watchers\n\nWhile computed properties are more appropriate in most cases, there are times when a custom watcher is necessary. That's why Vue provides a more generic way to react to data changes through the `watch` option. This is most useful when you want to perform asynchronous or expensive operations in response to changing data.\n\nFor example:\n\n``` html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n``` html\n<!-- Since there is already a rich ecosystem of ajax libraries    -->\n<!-- and collections of general-purpose utility methods, Vue core -->\n<!-- is able to remain small by not reinventing them. This also   -->\n<!-- gives you the freedom to just use what you're familiar with. -->\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    // _.debounce is a function provided by lodash to limit how\n    // often a particularly expensive operation can be run.\n    // In this case, we want to limit how often we access\n    // yesno.wtf/api, waiting until the user has completely\n    // finished typing before making the ajax request. To learn\n    // more about the _.debounce function (and its cousin\n    // _.throttle), visit: https://lodash.com/docs#debounce\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      // This is the number of milliseconds we wait for the\n      // user to stop typing.\n      500\n    )\n  }\n})\n</script>\n```\n\nResult:\n\n{% raw %}\n<div id=\"watch-example\" class=\"demo\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      500\n    )\n  }\n})\n</script>\n{% endraw %}\n\nIn this case, using the `watch` option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer. None of that would be possible with a computed property.\n\nIn addition to the `watch` option, you can also use the imperative [vm.$watch API](../api/#vm-watch).\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/computed.html","comments":1,"layout":"page","_id":"civ8jcjoe000t91m1022brxxn","content":"<h2 id=\"Computed-Properties\"><a href=\"#Computed-Properties\" class=\"headerlink\" title=\"Computed Properties\"></a>Computed Properties</h2><p>In-template expressions are very convenient, but they are really only meant for simple operations. Putting too much logic into your templates can make them bloated and hard to maintain. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>At this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays <code>message</code> in reverse. The problem is made worse when you want to include the reversed message in your template more than once.</p>\n<p>That’s why for any complex logic, you should use a <strong>computed property</strong>.</p>\n<h3 id=\"Basic-Example\"><a href=\"#Basic-Example\" class=\"headerlink\" title=\"Basic Example\"></a>Basic Example</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: \"&#123;&#123; message &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: \"&#123;&#123; reversedMessage &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// a computed getter</span></div><div class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// `this` points to the vm instance</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example\" class=\"demo\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n<script>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n\n<p>Here we have declared a computed property <code>reversedMessage</code>. The function we provided will be used as the getter function for the property <code>vm.reversedMessage</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// -&gt; 'olleH'</span></div><div class=\"line\">vm.message = <span class=\"string\">'Goodbye'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// -&gt; 'eybdooG'</span></div></pre></td></tr></table></figure>\n<p>You can open the console and play with the example vm yourself. The value of <code>vm.reversedMessage</code> is always dependent on the value of <code>vm.message</code>.</p>\n<p>You can data-bind to computed properties in templates just like a normal property. Vue is aware that <code>vm.reversedMessage</code> depends on <code>vm.message</code>, so it will update any bindings that depend on <code>vm.reversedMessage</code> when <code>vm.message</code> changes. And the best part is that we’ve created this dependency relationship declaratively: the computed getter function is pure and has no side effects, which makes it easy to test and reason about.</p>\n<h3 id=\"Computed-Caching-vs-Methods\"><a href=\"#Computed-Caching-vs-Methods\" class=\"headerlink\" title=\"Computed Caching vs Methods\"></a>Computed Caching vs Methods</h3><p>You may have noticed we can achieve the same result by invoking a method in the expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: \"&#123;&#123; reverseMessage() &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">reverseMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same. However, the difference is that <strong>computed properties are cached based on their dependencies.</strong> A computed property will only re-evaluate when some of its dependencies have changed. This means as long as <code>message</code> has not changed, multiple access to the <code>reversedMessage</code> computed property will immediately return the previously computed result without having to run the function again.</p>\n<p>This also means the following computed property will never update, because <code>Date.now()</code> is not a reactive dependency:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">now</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In comparison, a method invocation will <strong>always</strong> run the function whenever a re-render happens.</p>\n<p>Why do we need caching? Imagine we have an expensive computed property <strong>A</strong>, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on <strong>A</strong>. Without caching, we would be executing <strong>A</strong>’s getter many more times than necessary! In cases where you do not want caching, use a method instead.</p>\n<h3 id=\"Computed-vs-Watched-Property\"><a href=\"#Computed-vs-Watched-Property\" class=\"headerlink\" title=\"Computed vs Watched Property\"></a>Computed vs Watched Property</h3><p>Vue does provide a more generic way to observe and react to data changes on a Vue instance: <strong>watch properties</strong>. When you have some data that needs to change based on some other data, it is tempting to overuse <code>watch</code> - especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative <code>watch</code> callback. Consider this example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Bar'</span>,</div><div class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">'Foo Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The above code is imperative and repetitive. Compare it with a computed property version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Much better, isn’t it?</p>\n<h3 id=\"Computed-Setter\"><a href=\"#Computed-Setter\" class=\"headerlink\" title=\"Computed Setter\"></a>Computed Setter</h3><p>Computed properties are by default getter-only, but you can also provide a setter when you need it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// getter</span></div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// setter</span></div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</div><div class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</div><div class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<p>Now when you run <code>vm.fullName = &#39;John Doe&#39;</code>, the setter will be invoked and <code>vm.firstName</code> and <code>vm.lastName</code> will be updated accordingly.</p>\n<h2 id=\"Watchers\"><a href=\"#Watchers\" class=\"headerlink\" title=\"Watchers\"></a>Watchers</h2><p>While computed properties are more appropriate in most cases, there are times when a custom watcher is necessary. That’s why Vue provides a more generic way to react to data changes through the <code>watch</code> option. This is most useful when you want to perform asynchronous or expensive operations in response to changing data.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"watch-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    Ask a yes/no question:</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Since there is already a rich ecosystem of ajax libraries    --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- and collections of general-purpose utility methods, Vue core --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- is able to remain small by not reinventing them. This also   --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- gives you the freedom to just use what you're familiar with. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#watch-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">question</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">answer</span>: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// whenever question changes, this function will run</span></div><div class=\"line\">    question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.getAnswer()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// _.debounce is a function provided by lodash to limit how</span></div><div class=\"line\">    <span class=\"comment\">// often a particularly expensive operation can be run.</span></div><div class=\"line\">    <span class=\"comment\">// In this case, we want to limit how often we access</span></div><div class=\"line\">    <span class=\"comment\">// yesno.wtf/api, waiting until the user has completely</span></div><div class=\"line\">    <span class=\"comment\">// finished typing before making the ajax request. To learn</span></div><div class=\"line\">    <span class=\"comment\">// more about the _.debounce function (and its cousin</span></div><div class=\"line\">    <span class=\"comment\">// _.throttle), visit: https://lodash.com/docs#debounce</span></div><div class=\"line\">    getAnswer: _.debounce(</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">          vm.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        vm.answer = <span class=\"string\">'Thinking...'</span></div><div class=\"line\">        axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            vm.answer = _.capitalize(response.data.answer)</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">            vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</div><div class=\"line\">          &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"comment\">// This is the number of milliseconds we wait for the</span></div><div class=\"line\">      <span class=\"comment\">// user to stop typing.</span></div><div class=\"line\">      <span class=\"number\">500</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"watch-example\" class=\"demo\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      500\n    )\n  }\n})\n</script>\n\n<p>In this case, using the <code>watch</code> option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer. None of that would be possible with a computed property.</p>\n<p>In addition to the <code>watch</code> option, you can also use the imperative <a href=\"../api/#vm-watch\">vm.$watch API</a>.</p>\n","excerpt":"","more":"<h2 id=\"Computed-Properties\"><a href=\"#Computed-Properties\" class=\"headerlink\" title=\"Computed Properties\"></a>Computed Properties</h2><p>In-template expressions are very convenient, but they are really only meant for simple operations. Putting too much logic into your templates can make them bloated and hard to maintain. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>At this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays <code>message</code> in reverse. The problem is made worse when you want to include the reversed message in your template more than once.</p>\n<p>That’s why for any complex logic, you should use a <strong>computed property</strong>.</p>\n<h3 id=\"Basic-Example\"><a href=\"#Basic-Example\" class=\"headerlink\" title=\"Basic Example\"></a>Basic Example</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: \"&#123;&#123; message &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: \"&#123;&#123; reversedMessage &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// a computed getter</span></div><div class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// `this` points to the vm instance</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example\" class=\"demo\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n<script>\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n\n<p>Here we have declared a computed property <code>reversedMessage</code>. The function we provided will be used as the getter function for the property <code>vm.reversedMessage</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// -&gt; 'olleH'</span></div><div class=\"line\">vm.message = <span class=\"string\">'Goodbye'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// -&gt; 'eybdooG'</span></div></pre></td></tr></table></figure>\n<p>You can open the console and play with the example vm yourself. The value of <code>vm.reversedMessage</code> is always dependent on the value of <code>vm.message</code>.</p>\n<p>You can data-bind to computed properties in templates just like a normal property. Vue is aware that <code>vm.reversedMessage</code> depends on <code>vm.message</code>, so it will update any bindings that depend on <code>vm.reversedMessage</code> when <code>vm.message</code> changes. And the best part is that we’ve created this dependency relationship declaratively: the computed getter function is pure and has no side effects, which makes it easy to test and reason about.</p>\n<h3 id=\"Computed-Caching-vs-Methods\"><a href=\"#Computed-Caching-vs-Methods\" class=\"headerlink\" title=\"Computed Caching vs Methods\"></a>Computed Caching vs Methods</h3><p>You may have noticed we can achieve the same result by invoking a method in the expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: \"&#123;&#123; reverseMessage() &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">reverseMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same. However, the difference is that <strong>computed properties are cached based on their dependencies.</strong> A computed property will only re-evaluate when some of its dependencies have changed. This means as long as <code>message</code> has not changed, multiple access to the <code>reversedMessage</code> computed property will immediately return the previously computed result without having to run the function again.</p>\n<p>This also means the following computed property will never update, because <code>Date.now()</code> is not a reactive dependency:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">now</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In comparison, a method invocation will <strong>always</strong> run the function whenever a re-render happens.</p>\n<p>Why do we need caching? Imagine we have an expensive computed property <strong>A</strong>, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on <strong>A</strong>. Without caching, we would be executing <strong>A</strong>’s getter many more times than necessary! In cases where you do not want caching, use a method instead.</p>\n<h3 id=\"Computed-vs-Watched-Property\"><a href=\"#Computed-vs-Watched-Property\" class=\"headerlink\" title=\"Computed vs Watched Property\"></a>Computed vs Watched Property</h3><p>Vue does provide a more generic way to observe and react to data changes on a Vue instance: <strong>watch properties</strong>. When you have some data that needs to change based on some other data, it is tempting to overuse <code>watch</code> - especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative <code>watch</code> callback. Consider this example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Bar'</span>,</div><div class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">'Foo Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The above code is imperative and repetitive. Compare it with a computed property version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Much better, isn’t it?</p>\n<h3 id=\"Computed-Setter\"><a href=\"#Computed-Setter\" class=\"headerlink\" title=\"Computed Setter\"></a>Computed Setter</h3><p>Computed properties are by default getter-only, but you can also provide a setter when you need it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// getter</span></div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// setter</span></div><div class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</div><div class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</div><div class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<p>Now when you run <code>vm.fullName = &#39;John Doe&#39;</code>, the setter will be invoked and <code>vm.firstName</code> and <code>vm.lastName</code> will be updated accordingly.</p>\n<h2 id=\"Watchers\"><a href=\"#Watchers\" class=\"headerlink\" title=\"Watchers\"></a>Watchers</h2><p>While computed properties are more appropriate in most cases, there are times when a custom watcher is necessary. That’s why Vue provides a more generic way to react to data changes through the <code>watch</code> option. This is most useful when you want to perform asynchronous or expensive operations in response to changing data.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"watch-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    Ask a yes/no question:</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Since there is already a rich ecosystem of ajax libraries    --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- and collections of general-purpose utility methods, Vue core --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- is able to remain small by not reinventing them. This also   --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- gives you the freedom to just use what you're familiar with. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#watch-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">question</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">answer</span>: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// whenever question changes, this function will run</span></div><div class=\"line\">    question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.getAnswer()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// _.debounce is a function provided by lodash to limit how</span></div><div class=\"line\">    <span class=\"comment\">// often a particularly expensive operation can be run.</span></div><div class=\"line\">    <span class=\"comment\">// In this case, we want to limit how often we access</span></div><div class=\"line\">    <span class=\"comment\">// yesno.wtf/api, waiting until the user has completely</span></div><div class=\"line\">    <span class=\"comment\">// finished typing before making the ajax request. To learn</span></div><div class=\"line\">    <span class=\"comment\">// more about the _.debounce function (and its cousin</span></div><div class=\"line\">    <span class=\"comment\">// _.throttle), visit: https://lodash.com/docs#debounce</span></div><div class=\"line\">    getAnswer: _.debounce(</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">          vm.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        vm.answer = <span class=\"string\">'Thinking...'</span></div><div class=\"line\">        axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            vm.answer = _.capitalize(response.data.answer)</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">            vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</div><div class=\"line\">          &#125;)</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"comment\">// This is the number of milliseconds we wait for the</span></div><div class=\"line\">      <span class=\"comment\">// user to stop typing.</span></div><div class=\"line\">      <span class=\"number\">500</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"watch-example\" class=\"demo\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n<script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      500\n    )\n  }\n})\n</script>\n\n<p>In this case, using the <code>watch</code> option allows us to perform an asynchronous operation (accessing an API), limit how often we perform that operation, and set intermediary states until we get a final answer. None of that would be possible with a computed property.</p>\n<p>In addition to the <code>watch</code> option, you can also use the imperative <a href=\"../api/#vm-watch\">vm.$watch API</a>.</p>\n"},{"title":"Deploying For Production","type":"guide","order":20,"_content":"\n## Stripping Out Warnings\n\nThe minified standalone build of Vue has already stripped out all the warnings for you for a smaller file size, but when you are using tools like Webpack or Browserify, you will need some additional configuration to achieve this.\n\n### Webpack\n\nUse Webpack's [DefinePlugin](http://webpack.github.io/docs/list-of-plugins.html#defineplugin) to indicate a production environment, so that warning blocks can be automatically dropped by UglifyJS during minification. Example config:\n\n``` js\nvar webpack = require('webpack')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n  ]\n}\n```\n\n### Browserify\n\n- Run your bundling command with `NODE_ENV` set to `\"production\"`. This tells `vueify` to avoid including hot-reload and development related code.\n- Apply a global [envify](https://github.com/hughsk/envify) transform to your bundle. This allows the minifier to strip out all the warnings in Vue's source code wrapped in env variable conditional blocks. For example:\n\n\n``` bash\nNODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m > build.js\n```\n\n- To extract styles to a separate css file use a extract-css plugin which is included in vueify.\n\n``` bash\nNODE_ENV=production browserify -g envify -p [ vueify/plugins/extract-css -o build.css ] -e main.js | uglifyjs -c -m > build.js\n```\n\n## Tracking Runtime Errors\n\nIf a runtime error occurs during a component's render, it will be passed to the global `Vue.config.errorHandler` config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like [Sentry](https://sentry.io), which provides [an official integration](https://sentry.io/for/vue/) for Vue.\n\n## Extracting CSS\n\nWhen using [Single-File Components](./single-file-components.html), the `<style>` tags are injected dynamically at runtime during development. In production you may want to extract the styles across all components into a single CSS file. For details on how to achieve this, consult the respective documentation for [vue-loader](http://vue-loader.vuejs.org/en/configurations/extract-css.html) and [vueify](https://github.com/vuejs/vueify#css-extraction).\n\nThe official `webpack` template from `vue-cli` has this already configured out of the box.\n","source":"v2/guide/deployment.md","raw":"---\ntitle: Deploying For Production\ntype: guide\norder: 20\n---\n\n## Stripping Out Warnings\n\nThe minified standalone build of Vue has already stripped out all the warnings for you for a smaller file size, but when you are using tools like Webpack or Browserify, you will need some additional configuration to achieve this.\n\n### Webpack\n\nUse Webpack's [DefinePlugin](http://webpack.github.io/docs/list-of-plugins.html#defineplugin) to indicate a production environment, so that warning blocks can be automatically dropped by UglifyJS during minification. Example config:\n\n``` js\nvar webpack = require('webpack')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n  ]\n}\n```\n\n### Browserify\n\n- Run your bundling command with `NODE_ENV` set to `\"production\"`. This tells `vueify` to avoid including hot-reload and development related code.\n- Apply a global [envify](https://github.com/hughsk/envify) transform to your bundle. This allows the minifier to strip out all the warnings in Vue's source code wrapped in env variable conditional blocks. For example:\n\n\n``` bash\nNODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m > build.js\n```\n\n- To extract styles to a separate css file use a extract-css plugin which is included in vueify.\n\n``` bash\nNODE_ENV=production browserify -g envify -p [ vueify/plugins/extract-css -o build.css ] -e main.js | uglifyjs -c -m > build.js\n```\n\n## Tracking Runtime Errors\n\nIf a runtime error occurs during a component's render, it will be passed to the global `Vue.config.errorHandler` config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like [Sentry](https://sentry.io), which provides [an official integration](https://sentry.io/for/vue/) for Vue.\n\n## Extracting CSS\n\nWhen using [Single-File Components](./single-file-components.html), the `<style>` tags are injected dynamically at runtime during development. In production you may want to extract the styles across all components into a single CSS file. For details on how to achieve this, consult the respective documentation for [vue-loader](http://vue-loader.vuejs.org/en/configurations/extract-css.html) and [vueify](https://github.com/vuejs/vueify#css-extraction).\n\nThe official `webpack` template from `vue-cli` has this already configured out of the box.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/deployment.html","comments":1,"layout":"page","_id":"civ8jcjoe000u91m1lkuyvagp","content":"<h2 id=\"Stripping-Out-Warnings\"><a href=\"#Stripping-Out-Warnings\" class=\"headerlink\" title=\"Stripping Out Warnings\"></a>Stripping Out Warnings</h2><p>The minified standalone build of Vue has already stripped out all the warnings for you for a smaller file size, but when you are using tools like Webpack or Browserify, you will need some additional configuration to achieve this.</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>Use Webpack’s <a href=\"http://webpack.github.io/docs/list-of-plugins.html#defineplugin\" target=\"_blank\" rel=\"external\">DefinePlugin</a> to indicate a production environment, so that warning blocks can be automatically dropped by UglifyJS during minification. Example config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'\"production\"'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Browserify\"><a href=\"#Browserify\" class=\"headerlink\" title=\"Browserify\"></a>Browserify</h3><ul>\n<li>Run your bundling command with <code>NODE_ENV</code> set to <code>&quot;production&quot;</code>. This tells <code>vueify</code> to avoid including hot-reload and development related code.</li>\n<li>Apply a global <a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"external\">envify</a> transform to your bundle. This allows the minifier to strip out all the warnings in Vue’s source code wrapped in env variable conditional blocks. For example:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production browserify -g envify <span class=\"_\">-e</span> main.js | uglifyjs -c -m &gt; build.js</div></pre></td></tr></table></figure>\n<ul>\n<li>To extract styles to a separate css file use a extract-css plugin which is included in vueify.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production browserify -g envify -p [ vueify/plugins/extract-css -o build.css ] <span class=\"_\">-e</span> main.js | uglifyjs -c -m &gt; build.js</div></pre></td></tr></table></figure>\n<h2 id=\"Tracking-Runtime-Errors\"><a href=\"#Tracking-Runtime-Errors\" class=\"headerlink\" title=\"Tracking Runtime Errors\"></a>Tracking Runtime Errors</h2><p>If a runtime error occurs during a component’s render, it will be passed to the global <code>Vue.config.errorHandler</code> config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like <a href=\"https://sentry.io\" target=\"_blank\" rel=\"external\">Sentry</a>, which provides <a href=\"https://sentry.io/for/vue/\" target=\"_blank\" rel=\"external\">an official integration</a> for Vue.</p>\n<h2 id=\"Extracting-CSS\"><a href=\"#Extracting-CSS\" class=\"headerlink\" title=\"Extracting CSS\"></a>Extracting CSS</h2><p>When using <a href=\"./single-file-components.html\">Single-File Components</a>, the <code>&lt;style&gt;</code> tags are injected dynamically at runtime during development. In production you may want to extract the styles across all components into a single CSS file. For details on how to achieve this, consult the respective documentation for <a href=\"http://vue-loader.vuejs.org/en/configurations/extract-css.html\" target=\"_blank\" rel=\"external\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify#css-extraction\" target=\"_blank\" rel=\"external\">vueify</a>.</p>\n<p>The official <code>webpack</code> template from <code>vue-cli</code> has this already configured out of the box.</p>\n","excerpt":"","more":"<h2 id=\"Stripping-Out-Warnings\"><a href=\"#Stripping-Out-Warnings\" class=\"headerlink\" title=\"Stripping Out Warnings\"></a>Stripping Out Warnings</h2><p>The minified standalone build of Vue has already stripped out all the warnings for you for a smaller file size, but when you are using tools like Webpack or Browserify, you will need some additional configuration to achieve this.</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>Use Webpack’s <a href=\"http://webpack.github.io/docs/list-of-plugins.html#defineplugin\">DefinePlugin</a> to indicate a production environment, so that warning blocks can be automatically dropped by UglifyJS during minification. Example config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'\"production\"'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Browserify\"><a href=\"#Browserify\" class=\"headerlink\" title=\"Browserify\"></a>Browserify</h3><ul>\n<li>Run your bundling command with <code>NODE_ENV</code> set to <code>&quot;production&quot;</code>. This tells <code>vueify</code> to avoid including hot-reload and development related code.</li>\n<li>Apply a global <a href=\"https://github.com/hughsk/envify\">envify</a> transform to your bundle. This allows the minifier to strip out all the warnings in Vue’s source code wrapped in env variable conditional blocks. For example:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production browserify -g envify <span class=\"_\">-e</span> main.js | uglifyjs -c -m &gt; build.js</div></pre></td></tr></table></figure>\n<ul>\n<li>To extract styles to a separate css file use a extract-css plugin which is included in vueify.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">NODE_ENV=production browserify -g envify -p [ vueify/plugins/extract-css -o build.css ] <span class=\"_\">-e</span> main.js | uglifyjs -c -m &gt; build.js</div></pre></td></tr></table></figure>\n<h2 id=\"Tracking-Runtime-Errors\"><a href=\"#Tracking-Runtime-Errors\" class=\"headerlink\" title=\"Tracking Runtime Errors\"></a>Tracking Runtime Errors</h2><p>If a runtime error occurs during a component’s render, it will be passed to the global <code>Vue.config.errorHandler</code> config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like <a href=\"https://sentry.io\">Sentry</a>, which provides <a href=\"https://sentry.io/for/vue/\">an official integration</a> for Vue.</p>\n<h2 id=\"Extracting-CSS\"><a href=\"#Extracting-CSS\" class=\"headerlink\" title=\"Extracting CSS\"></a>Extracting CSS</h2><p>When using <a href=\"./single-file-components.html\">Single-File Components</a>, the <code>&lt;style&gt;</code> tags are injected dynamically at runtime during development. In production you may want to extract the styles across all components into a single CSS file. For details on how to achieve this, consult the respective documentation for <a href=\"http://vue-loader.vuejs.org/en/configurations/extract-css.html\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify#css-extraction\">vueify</a>.</p>\n<p>The official <code>webpack</code> template from <code>vue-cli</code> has this already configured out of the box.</p>\n"},{"title":"Custom Directives","type":"guide","order":16,"_content":"\n## Intro\n\nIn addition to the default set of directives shipped in core (`v-model` and `v-show`), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you just need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:\n\n{% raw %}\n<div id=\"simplest-directive-example\" class=\"demo\">\n  <input v-focus>\n</div>\n<script>\nVue.directive('focus', {\n  inserted: function (el) {\n    el.focus()\n  }\n})\nnew Vue({\n  el: '#simplest-directive-example'\n})\n</script>\n{% endraw %}\n\nWhen the page loads, that element gains focus. In fact, if you haven't clicked on anything else since visiting this page, the input above should be focused now. Now let's build the directive that accomplishes this:\n\n``` js\n// Register a global custom directive called v-focus\nVue.directive('focus', {\n  // When the bound element is inserted into the DOM...\n  inserted: function (el) {\n    // Focus the element\n    el.focus()\n  }\n})\n```\n\nIf you want to register a directive locally instead, components also accept a `directives` option:\n\n``` js\ndirectives: {\n  focus: {\n    // directive definition\n  }\n}\n```\n\nThen in a template, you can use the new `v-focus` attribute on any element, like this:\n\n``` html\n<input v-focus>\n```\n\n## Hook Functions\n\nA directive definition object can provide several hook functions (all optional):\n\n- `bind`: called only once, when the directive is first bound to the element. This is where you can do one-time setup work.\n\n- `inserted`: called when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).\n\n- `update`: called after the containing component has updated, __but possibly before its children have updated__. The directive's value may or may not have changed, but you can skip unnecessary updates by comparing the binding's current and old values (see below on hook arguments).\n\n- `componentUpdated`: called after the containing component __and its children__ have updated.\n\n- `unbind`: called only once, when the directive is unbound from the element.\n\nWe'll explore the arguments passed into these hooks (i.e. `el`, `binding`, `vnode`, and `oldVnode`) in the next section.\n\n## Directive Hook Arguments\n\nDirective hooks are passed these arguments:\n\n- **el**: The element the directive is bound to. This can be used to directly manipulate the DOM.\n- **binding**: An object containing the following properties.\n  - **name**: The name of the directive, without the `v-` prefix.\n  - **value**: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - **oldValue**: The previous value, only available in `update` and `componentUpdated`. It is available whether or not the value has changed.\n  - **expression**: The expression of the binding as a string. For example in `v-my-directive=\"1 + 1\"`, the expression would be `\"1 + 1\"`.\n  - **arg**: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - **modifiers**: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n- **vnode**: The virtual node produced by Vue's compiler. See the [VNode API](../api/#VNode-Interface) for full details.\n- **oldVnode**: The previous virtual node, only available in the `update` and `componentUpdated` hooks.\n\n<p class=\"tip\">Apart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset).</p>\n\nAn example of a custom directive using some of these properties:\n\n``` html\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\"></div>\n```\n\n``` js\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\n\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n```\n\n{% raw %}\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\" class=\"demo\"></div>\n<script>\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n</script>\n{% endraw %}\n\n## Function Shorthand\n\nIn many cases, you may want the same behavior on `bind` and `update`, but don't care about the other hooks. For example:\n\n``` js\nVue.directive('color-swatch', function (el, binding) {\n  el.style.backgroundColor = binding.value\n})\n```\n\n## Object Literals\n\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n``` html\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n``` js\nVue.directive('demo', function (el, binding) {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text)  // => \"hello!\"\n})\n```\n","source":"v2/guide/custom-directive.md","raw":"---\ntitle: Custom Directives\ntype: guide\norder: 16\n---\n\n## Intro\n\nIn addition to the default set of directives shipped in core (`v-model` and `v-show`), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you just need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:\n\n{% raw %}\n<div id=\"simplest-directive-example\" class=\"demo\">\n  <input v-focus>\n</div>\n<script>\nVue.directive('focus', {\n  inserted: function (el) {\n    el.focus()\n  }\n})\nnew Vue({\n  el: '#simplest-directive-example'\n})\n</script>\n{% endraw %}\n\nWhen the page loads, that element gains focus. In fact, if you haven't clicked on anything else since visiting this page, the input above should be focused now. Now let's build the directive that accomplishes this:\n\n``` js\n// Register a global custom directive called v-focus\nVue.directive('focus', {\n  // When the bound element is inserted into the DOM...\n  inserted: function (el) {\n    // Focus the element\n    el.focus()\n  }\n})\n```\n\nIf you want to register a directive locally instead, components also accept a `directives` option:\n\n``` js\ndirectives: {\n  focus: {\n    // directive definition\n  }\n}\n```\n\nThen in a template, you can use the new `v-focus` attribute on any element, like this:\n\n``` html\n<input v-focus>\n```\n\n## Hook Functions\n\nA directive definition object can provide several hook functions (all optional):\n\n- `bind`: called only once, when the directive is first bound to the element. This is where you can do one-time setup work.\n\n- `inserted`: called when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).\n\n- `update`: called after the containing component has updated, __but possibly before its children have updated__. The directive's value may or may not have changed, but you can skip unnecessary updates by comparing the binding's current and old values (see below on hook arguments).\n\n- `componentUpdated`: called after the containing component __and its children__ have updated.\n\n- `unbind`: called only once, when the directive is unbound from the element.\n\nWe'll explore the arguments passed into these hooks (i.e. `el`, `binding`, `vnode`, and `oldVnode`) in the next section.\n\n## Directive Hook Arguments\n\nDirective hooks are passed these arguments:\n\n- **el**: The element the directive is bound to. This can be used to directly manipulate the DOM.\n- **binding**: An object containing the following properties.\n  - **name**: The name of the directive, without the `v-` prefix.\n  - **value**: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\n  - **oldValue**: The previous value, only available in `update` and `componentUpdated`. It is available whether or not the value has changed.\n  - **expression**: The expression of the binding as a string. For example in `v-my-directive=\"1 + 1\"`, the expression would be `\"1 + 1\"`.\n  - **arg**: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\n  - **modifiers**: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\n- **vnode**: The virtual node produced by Vue's compiler. See the [VNode API](../api/#VNode-Interface) for full details.\n- **oldVnode**: The previous virtual node, only available in the `update` and `componentUpdated` hooks.\n\n<p class=\"tip\">Apart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset).</p>\n\nAn example of a custom directive using some of these properties:\n\n``` html\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\"></div>\n```\n\n``` js\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\n\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n```\n\n{% raw %}\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\" class=\"demo\"></div>\n<script>\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n</script>\n{% endraw %}\n\n## Function Shorthand\n\nIn many cases, you may want the same behavior on `bind` and `update`, but don't care about the other hooks. For example:\n\n``` js\nVue.directive('color-swatch', function (el, binding) {\n  el.style.backgroundColor = binding.value\n})\n```\n\n## Object Literals\n\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\n\n``` html\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n```\n\n``` js\nVue.directive('demo', function (el, binding) {\n  console.log(binding.value.color) // => \"white\"\n  console.log(binding.value.text)  // => \"hello!\"\n})\n```\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/custom-directive.html","comments":1,"layout":"page","_id":"civ8jcjof000v91m1bjigp845","content":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>In addition to the default set of directives shipped in core (<code>v-model</code> and <code>v-show</code>), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you just need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:</p>\n\n<div id=\"simplest-directive-example\" class=\"demo\">\n  <input v-focus=\"\">\n</div>\n<script>\nVue.directive('focus', {\n  inserted: function (el) {\n    el.focus()\n  }\n})\nnew Vue({\n  el: '#simplest-directive-example'\n})\n</script>\n\n<p>When the page loads, that element gains focus. In fact, if you haven’t clicked on anything else since visiting this page, the input above should be focused now. Now let’s build the directive that accomplishes this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Register a global custom directive called v-focus</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// When the bound element is inserted into the DOM...</span></div><div class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Focus the element</span></div><div class=\"line\">    el.focus()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you want to register a directive locally instead, components also accept a <code>directives</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">directives: &#123;</div><div class=\"line\">  <span class=\"attr\">focus</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// directive definition</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then in a template, you can use the new <code>v-focus</code> attribute on any element, like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-focus</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Hook-Functions\"><a href=\"#Hook-Functions\" class=\"headerlink\" title=\"Hook Functions\"></a>Hook Functions</h2><p>A directive definition object can provide several hook functions (all optional):</p>\n<ul>\n<li><p><code>bind</code>: called only once, when the directive is first bound to the element. This is where you can do one-time setup work.</p>\n</li>\n<li><p><code>inserted</code>: called when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).</p>\n</li>\n<li><p><code>update</code>: called after the containing component has updated, <strong>but possibly before its children have updated</strong>. The directive’s value may or may not have changed, but you can skip unnecessary updates by comparing the binding’s current and old values (see below on hook arguments).</p>\n</li>\n<li><p><code>componentUpdated</code>: called after the containing component <strong>and its children</strong> have updated.</p>\n</li>\n<li><p><code>unbind</code>: called only once, when the directive is unbound from the element.</p>\n</li>\n</ul>\n<p>We’ll explore the arguments passed into these hooks (i.e. <code>el</code>, <code>binding</code>, <code>vnode</code>, and <code>oldVnode</code>) in the next section.</p>\n<h2 id=\"Directive-Hook-Arguments\"><a href=\"#Directive-Hook-Arguments\" class=\"headerlink\" title=\"Directive Hook Arguments\"></a>Directive Hook Arguments</h2><p>Directive hooks are passed these arguments:</p>\n<ul>\n<li><strong>el</strong>: The element the directive is bound to. This can be used to directly manipulate the DOM.</li>\n<li><strong>binding</strong>: An object containing the following properties.<ul>\n<li><strong>name</strong>: The name of the directive, without the <code>v-</code> prefix.</li>\n<li><strong>value</strong>: The value passed to the directive. For example in <code>v-my-directive=&quot;1 + 1&quot;</code>, the value would be <code>2</code>.</li>\n<li><strong>oldValue</strong>: The previous value, only available in <code>update</code> and <code>componentUpdated</code>. It is available whether or not the value has changed.</li>\n<li><strong>expression</strong>: The expression of the binding as a string. For example in <code>v-my-directive=&quot;1 + 1&quot;</code>, the expression would be <code>&quot;1 + 1&quot;</code>.</li>\n<li><strong>arg</strong>: The argument passed to the directive, if any. For example in <code>v-my-directive:foo</code>, the arg would be <code>&quot;foo&quot;</code>.</li>\n<li><strong>modifiers</strong>: An object containing modifiers, if any. For example in <code>v-my-directive.foo.bar</code>, the modifiers object would be <code>{ foo: true, bar: true }</code>.</li>\n</ul>\n</li>\n<li><strong>vnode</strong>: The virtual node produced by Vue’s compiler. See the <a href=\"../api/#VNode-Interface\">VNode API</a> for full details.</li>\n<li><strong>oldVnode</strong>: The previous virtual node, only available in the <code>update</code> and <code>componentUpdated</code> hooks.</li>\n</ul>\n<p class=\"tip\">Apart from <code>el</code>, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\" target=\"_blank\" rel=\"external\">dataset</a>.</p>\n\n<p>An example of a custom directive using some of these properties:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hook-arguments-example\"</span> <span class=\"attr\">v-demo:hello.a.b</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'demo'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding, vnode</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify</div><div class=\"line\">    el.innerHTML =</div><div class=\"line\">      <span class=\"string\">'name: '</span>       + s(binding.name) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'value: '</span>      + s(binding.value) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'expression: '</span> + s(binding.expression) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'argument: '</span>   + s(binding.arg) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'modifiers: '</span>  + s(binding.modifiers) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'vnode keys: '</span> + <span class=\"built_in\">Object</span>.keys(vnode).join(<span class=\"string\">', '</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#hook-arguments-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\" class=\"demo\"></div>\n<script>\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n</script>\n\n<h2 id=\"Function-Shorthand\"><a href=\"#Function-Shorthand\" class=\"headerlink\" title=\"Function Shorthand\"></a>Function Shorthand</h2><p>In many cases, you may want the same behavior on <code>bind</code> and <code>update</code>, but don’t care about the other hooks. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'color-swatch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</div><div class=\"line\">  el.style.backgroundColor = binding.value</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Object-Literals\"><a href=\"#Object-Literals\" class=\"headerlink\" title=\"Object Literals\"></a>Object Literals</h2><p>If your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-demo</span>=<span class=\"string\">\"&#123; color: 'white', text: 'hello!' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'demo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(binding.value.color) <span class=\"comment\">// =&gt; \"white\"</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(binding.value.text)  <span class=\"comment\">// =&gt; \"hello!\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>In addition to the default set of directives shipped in core (<code>v-model</code> and <code>v-show</code>), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you just need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:</p>\n\n<div id=\"simplest-directive-example\" class=\"demo\">\n  <input v-focus>\n</div>\n<script>\nVue.directive('focus', {\n  inserted: function (el) {\n    el.focus()\n  }\n})\nnew Vue({\n  el: '#simplest-directive-example'\n})\n</script>\n\n<p>When the page loads, that element gains focus. In fact, if you haven’t clicked on anything else since visiting this page, the input above should be focused now. Now let’s build the directive that accomplishes this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Register a global custom directive called v-focus</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// When the bound element is inserted into the DOM...</span></div><div class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Focus the element</span></div><div class=\"line\">    el.focus()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you want to register a directive locally instead, components also accept a <code>directives</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">directives: &#123;</div><div class=\"line\">  <span class=\"attr\">focus</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// directive definition</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then in a template, you can use the new <code>v-focus</code> attribute on any element, like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-focus</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Hook-Functions\"><a href=\"#Hook-Functions\" class=\"headerlink\" title=\"Hook Functions\"></a>Hook Functions</h2><p>A directive definition object can provide several hook functions (all optional):</p>\n<ul>\n<li><p><code>bind</code>: called only once, when the directive is first bound to the element. This is where you can do one-time setup work.</p>\n</li>\n<li><p><code>inserted</code>: called when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).</p>\n</li>\n<li><p><code>update</code>: called after the containing component has updated, <strong>but possibly before its children have updated</strong>. The directive’s value may or may not have changed, but you can skip unnecessary updates by comparing the binding’s current and old values (see below on hook arguments).</p>\n</li>\n<li><p><code>componentUpdated</code>: called after the containing component <strong>and its children</strong> have updated.</p>\n</li>\n<li><p><code>unbind</code>: called only once, when the directive is unbound from the element.</p>\n</li>\n</ul>\n<p>We’ll explore the arguments passed into these hooks (i.e. <code>el</code>, <code>binding</code>, <code>vnode</code>, and <code>oldVnode</code>) in the next section.</p>\n<h2 id=\"Directive-Hook-Arguments\"><a href=\"#Directive-Hook-Arguments\" class=\"headerlink\" title=\"Directive Hook Arguments\"></a>Directive Hook Arguments</h2><p>Directive hooks are passed these arguments:</p>\n<ul>\n<li><strong>el</strong>: The element the directive is bound to. This can be used to directly manipulate the DOM.</li>\n<li><strong>binding</strong>: An object containing the following properties.<ul>\n<li><strong>name</strong>: The name of the directive, without the <code>v-</code> prefix.</li>\n<li><strong>value</strong>: The value passed to the directive. For example in <code>v-my-directive=&quot;1 + 1&quot;</code>, the value would be <code>2</code>.</li>\n<li><strong>oldValue</strong>: The previous value, only available in <code>update</code> and <code>componentUpdated</code>. It is available whether or not the value has changed.</li>\n<li><strong>expression</strong>: The expression of the binding as a string. For example in <code>v-my-directive=&quot;1 + 1&quot;</code>, the expression would be <code>&quot;1 + 1&quot;</code>.</li>\n<li><strong>arg</strong>: The argument passed to the directive, if any. For example in <code>v-my-directive:foo</code>, the arg would be <code>&quot;foo&quot;</code>.</li>\n<li><strong>modifiers</strong>: An object containing modifiers, if any. For example in <code>v-my-directive.foo.bar</code>, the modifiers object would be <code>{ foo: true, bar: true }</code>.</li>\n</ul>\n</li>\n<li><strong>vnode</strong>: The virtual node produced by Vue’s compiler. See the <a href=\"../api/#VNode-Interface\">VNode API</a> for full details.</li>\n<li><strong>oldVnode</strong>: The previous virtual node, only available in the <code>update</code> and <code>componentUpdated</code> hooks.</li>\n</ul>\n<p class=\"tip\">Apart from <code>el</code>, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\">dataset</a>.</p>\n\n<p>An example of a custom directive using some of these properties:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hook-arguments-example\"</span> <span class=\"attr\">v-demo:hello.a.b</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'demo'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding, vnode</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify</div><div class=\"line\">    el.innerHTML =</div><div class=\"line\">      <span class=\"string\">'name: '</span>       + s(binding.name) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'value: '</span>      + s(binding.value) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'expression: '</span> + s(binding.expression) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'argument: '</span>   + s(binding.arg) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'modifiers: '</span>  + s(binding.modifiers) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">      <span class=\"string\">'vnode keys: '</span> + <span class=\"built_in\">Object</span>.keys(vnode).join(<span class=\"string\">', '</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#hook-arguments-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\" class=\"demo\"></div>\n<script>\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})\n</script>\n\n<h2 id=\"Function-Shorthand\"><a href=\"#Function-Shorthand\" class=\"headerlink\" title=\"Function Shorthand\"></a>Function Shorthand</h2><p>In many cases, you may want the same behavior on <code>bind</code> and <code>update</code>, but don’t care about the other hooks. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'color-swatch'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</div><div class=\"line\">  el.style.backgroundColor = binding.value</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Object-Literals\"><a href=\"#Object-Literals\" class=\"headerlink\" title=\"Object Literals\"></a>Object Literals</h2><p>If your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-demo</span>=<span class=\"string\">\"&#123; color: 'white', text: 'hello!' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'demo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(binding.value.color) <span class=\"comment\">// =&gt; \"white\"</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(binding.value.text)  <span class=\"comment\">// =&gt; \"hello!\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Components","type":"guide","order":11,"_content":"\n## What are Components?\n\nComponents are one of the most powerful features of Vue. They help you extend basic HTML elements to encapsulate reusable code. At a high level, components are custom elements that Vue's compiler attaches behavior to. In some cases, they may also appear as a native HTML element extended with the special `is` attribute.\n\n## Using Components\n\n### Registration\n\nWe've learned in the previous sections that we can create a new Vue instance with:\n\n``` js\nnew Vue({\n  el: '#some-element',\n  // options\n})\n```\n\nTo register a global component, you can use `Vue.component(tagName, options)`. For example:\n\n``` js\nVue.component('my-component', {\n  // options\n})\n```\n\n<p class=\"tip\">Note that Vue does not enforce the [W3C rules](http://www.w3.org/TR/custom-elements/#concepts) for custom tag names (all-lowercase, must contain a hyphen) though following this convention is considered good practice.</p>\n\nOnce registered, a component can be used in an instance's template as a custom element, `<my-component></my-component>`. Make sure the component is registered **before** you instantiate the root Vue instance. Here's the full example:\n\n``` html\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n\n``` js\n// register\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n\n// create a root instance\nnew Vue({\n  el: '#example'\n})\n```\n\nWhich will render:\n\n``` html\n<div id=\"example\">\n  <div>A custom component!</div>\n</div>\n```\n\n{% raw %}\n<div id=\"example\" class=\"demo\">\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\nnew Vue({ el: '#example' })\n</script>\n{% endraw %}\n\n### Local Registration\n\nYou don't have to register every component globally. You can make a component available only in the scope of another instance/component by registering it with the `components` instance option:\n\n``` js\nvar Child = {\n  template: '<div>A custom component!</div>'\n}\n\nnew Vue({\n  // ...\n  components: {\n    // <my-component> will only be available in parent's template\n    'my-component': Child\n  }\n})\n```\n\nThe same encapsulation applies for other registerable Vue features, such as directives.\n\n### DOM Template Parsing Caveats\n\nWhen using the DOM as your template (e.g. using the `el` option to mount an element with existing content), you will be subject to some restrictions that are inherent to how HTML works, because Vue can only retrieve the template content **after** the browser has parsed and normalized it. Most notably, some elements such as `<ul>`, `<ol>`, `<table>` and `<select>` have restrictions on what elements can appear inside them, and some elements such as `<option>` can only appear inside certain other elements.\n\nThis will lead to issues when using custom components with elements that have such restrictions, for example:\n\n``` html\n<table>\n  <my-row>...</my-row>\n</table>\n```\n\nThe custom component `<my-row>` will be hoisted out as invalid content, thus causing errors in the eventual rendered output. A workaround is to use the `is` special attribute:\n\n``` html\n<table>\n  <tr is=\"my-row\"></tr>\n</table>\n```\n\n**It should be noted that these limitations do not apply if you are using string templates from one of the following sources**:\n\n- `<script type=\"text/x-template\">`\n- JavaScript inline template strings\n- `.vue` components\n\nTherefore, prefer using string templates whenever possible.\n\n### `data` Must Be a Function\n\nMost of the options that can be passed into the Vue constructor can be used in a component, with one special case: `data` must be function. In fact, if you try this:\n\n``` js\nVue.component('my-component', {\n  template: '<span>{{ message }}</span>',\n  data: {\n    message: 'hello'\n  }\n})\n```\n\nThen Vue will halt and emit warnings in the console, telling you that `data` must be a function for component instances. It's good to understand why the rules exist though, so let's cheat.\n\n``` html\n<div id=\"example-2\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n```\n\n``` js\nvar data = { counter: 0 }\n\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  // data is technically a function, so Vue won't\n  // complain, but we return the same object\n  // reference for each component instance\n  data: function () {\n    return data\n  }\n})\n\nnew Vue({\n  el: '#example-2'\n})\n```\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n<script>\nvar data = { counter: 0 }\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return data\n  }\n})\nnew Vue({\n  el: '#example-2'\n})\n</script>\n{% endraw %}\n\nSince all three component instances share the same `data` object, incrementing one counter increments them all! Ouch. Let's fix this by instead returning a fresh data object:\n\n``` js\ndata: function () {\n  return {\n    counter: 0\n  }\n}\n```\n\nNow all our counters each have their own internal state:\n\n{% raw %}\n<div id=\"example-2-5\" class=\"demo\">\n  <my-component></my-component>\n  <my-component></my-component>\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  }\n})\nnew Vue({\n  el: '#example-2-5'\n})\n</script>\n{% endraw %}\n\n### Composing Components\n\nComponents are meant to be used together, most commonly in parent-child relationships: component A may use component B in its own template. They inevitably need to communicate to one another: the parent may need to pass data down to the child, and the child may need to inform the parent of something that happened in the child. However, it is also very important to keep the parent and the child as decoupled as possible via a clearly-defined interface. This ensures each component's code can be written and reasoned about in relative isolation, thus making them more maintainable and potentially easier to reuse.\n\nIn Vue.js, the parent-child component relationship can be summarized as **props down, events up**. The parent passes data down to the child via **props**, and the child sends messages to the parent via **events**. Let's see how they work next.\n\n<p style=\"text-align: center\">\n  <img style=\"width:300px\" src=\"/images/props-events.png\" alt=\"props down, events up\">\n</p>\n\n## Props\n\n### Passing Data with Props\n\nEvery component instance has its own **isolated scope**. This means you cannot (and should not) directly reference parent data in a child component's template. Data can be passed down to child components using **props**.\n\nA prop is a custom attribute for passing information from parent components. A child component needs to explicitly declare the props it expects to receive using the [`props` option](../api/#props):\n\n``` js\nVue.component('child', {\n  // declare the props\n  props: ['message'],\n  // just like data, the prop can be used inside templates\n  // and is also made available in the vm as this.message\n  template: '<span>{{ message }}</span>'\n})\n```\n\nThen we can pass a plain string to it like so:\n\n``` html\n<child message=\"hello!\"></child>\n```\n\nResult:\n\n{% raw %}\n<div id=\"prop-example-1\" class=\"demo\">\n  <child message=\"hello!\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#prop-example-1',\n  components: {\n    child: {\n      props: ['message'],\n      template: '<span>{{ message }}</span>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n### camelCase vs. kebab-case\n\nHTML attributes are case-insensitive, so when using non-string templates, camelCased prop names need to use their kebab-case (hyphen-delimited) equivalents:\n\n``` js\nVue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '<span>{{ myMessage }}</span>'\n})\n```\n\n``` html\n<!-- kebab-case in HTML -->\n<child my-message=\"hello!\"></child>\n```\n\nAgain, if you're using string templates, then this limitation does not apply.\n\n### Dynamic Props\n\nSimilar to binding a normal attribute to an expression, we can also use `v-bind` for dynamically binding props to data on the parent. Whenever the data is updated in the parent, it will also flow down to the child:\n\n``` html\n<div>\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n```\n\nIt's often simpler to use the shorthand syntax for `v-bind`:\n\n``` html\n<child :my-message=\"parentMsg\"></child>\n```\n\nResult:\n\n{% raw %}\n<div id=\"demo-2\" class=\"demo\">\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#demo-2',\n  data: {\n    parentMsg: 'Message from parent'\n  },\n  components: {\n    child: {\n      props: ['myMessage'],\n      template: '<span>{{myMessage}}</span>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n### Literal vs Dynamic\n\nA common mistake beginners tend to make is attempting to pass down a number using the literal syntax:\n\n``` html\n<!-- this passes down a plain string \"1\" -->\n<comp some-prop=\"1\"></comp>\n```\n\nHowever, since this is a literal prop, its value is passed down as a plain string `\"1\"` instead of an actual number. If we want to pass down an actual JavaScript number, we need to use `v-bind` so that its value is evaluated as a JavaScript expression:\n\n``` html\n<!-- this passes down an actual number -->\n<comp v-bind:some-prop=\"1\"></comp>\n```\n\n### One-Way Data Flow\n\nAll props form a **one-way-down** binding between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to reason about.\n\nIn addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console.\n\nThere are usually two cases where it's tempting to mutate a prop:\n\n1. The prop is used to only pass in an initial value, the child component simply wants to use it as a local data property afterwards;\n\n2. The prop is passed in as a raw value that needs to be transformed.\n\nThe proper answer to these use cases are:\n\n1. Define a local data property that uses the prop's initial value as its initial value:\n\n  ``` js\n  props: ['initialCounter'],\n  data: function () {\n    return { counter: this.initialCounter }\n  }\n  ```\n\n2. Define a computed property that is computed from the prop's value:\n\n  ``` js\n  props: ['size'],\n  computed: {\n    normalizedSize: function () {\n      return this.size.trim().toLowerCase()\n    }\n  }\n  ```\n\n<p class=\"tip\">Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child **will** affect parent state.</p>\n\n### Prop Validation\n\nIt is possible for a component to specify requirements for the props it is receiving. If a requirement is not met, Vue will emit warnings. This is especially useful when you are authoring a component that is intended to be used by others.\n\nInstead of defining the props as an array of strings, you can use an object with validation requirements:\n\n``` js\nVue.component('example', {\n  props: {\n    // basic type check (`null` means accept any type)\n    propA: Number,\n    // multiple possible types\n    propB: [String, Number],\n    // a required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // a number with default value\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // object/array defaults should be returned from a\n    // factory function\n    propE: {\n      type: Object,\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // custom validator function\n    propF: {\n      validator: function (value) {\n        return value > 10\n      }\n    }\n  }\n})\n```\n\nThe `type` can be one of the following native constructors:\n\n- String\n- Number\n- Boolean\n- Function\n- Object\n- Array\n\nIn addition, `type` can also be a custom constructor function and the assertion will be made with an `instanceof` check.\n\nWhen a prop validation fails, Vue will produce a console warning (if using the development build).\n\n## Custom Events\n\nWe have learned that the parent can pass data down to the child using props, but how do we communicate back to the parent when something happens? This is where Vue's custom event system comes in.\n\n### Using `v-on` with Custom Events\n\nEvery Vue instance implements an [events interface](../api/#Instance-Methods-Events), which means it can:\n\n- Listen to an event using `$on(eventName)`\n- Trigger an event using `$emit(eventName)`\n\n<p class=\"tip\">Note that Vue's event system is separate from the browser's [EventTarget API](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget). Though they work similarly, `$on` and `$emit` are __not__ aliases for `addEventListener` and `dispatchEvent`.</p>\n\nIn addition, a parent component can listen to the events emitted from a child component using `v-on` directly in the template where the child component is used.\n\nHere's an example:\n\n``` html\n<div id=\"counter-event-example\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n```\n\n``` js\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\n\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"counter-event-example\" class=\"demo\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n{% endraw %}\n\nIn this example, it's important to note that the child component is still completely decoupled from what happens outside of it. All it does is report information about its own activity, just in case a parent component might care.\n\n#### Binding Native Events to Components\n\nThere may be times when you want to listen for a native event on the root element of a component. In these cases, you can use the `.native` modifier for `v-on`. For example:\n\n``` html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n### Form Input Components using Custom Events\n\nCustom events can also be used to create custom inputs that work with `v-model`. Remember:\n\n``` html\n<input v-model=\"something\">\n```\n\nis just syntactic sugar for:\n\n``` html\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n```\n\nWhen used with a component, this simplifies to:\n\n``` html\n<input v-bind:value=\"something\" v-on:input=\"something = arguments[0]\">\n```\n\nSo for a component to work with `v-model`, it must:\n\n- accept a `value` prop\n- emit an `input` event with the new value\n\nLet's see it in action with a very simple currency input:\n\n``` html\n<currency-input v-model=\"price\"></currency-input>\n```\n\n``` js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // Instead of updating the value directly, this\n    // method is used to format and place constraints\n    // on the input's value\n    updateValue: function (value) {\n      var formattedValue = value\n        // Remove whitespace on either side\n        .trim()\n        // Shorten to 2 decimal places\n        .slice(0, value.indexOf('.') + 3)\n      // If the value was not already normalized,\n      // manually override it to conform\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"currency-input-example\" class=\"demo\">\n  <currency-input v-model=\"price\"></currency-input>\n</div>\n<script>\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    updateValue: function (value) {\n      var formattedValue = value\n        .trim()\n        .slice(0, value.indexOf('.') + 3)\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\nnew Vue({ el: '#currency-input-example' })\n</script>\n{% endraw %}\n\nThe implementation above is pretty naive though. For example, users are allowed to enter multiple periods and even letters sometimes - yuck! So for those that want to see a non-trivial example, here's a more robust currency filter:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/result,html,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThe events interface can also be used to create more unusual inputs. For example, imagine these possibilities:\n\n``` html\n<voice-recognizer v-model=\"question\"></voice-recognizer>\n<webcam-gesture-reader v-model=\"gesture\"></webcam-gesture-reader>\n<webcam-retinal-scanner v-model=\"retinalImage\"></webcam-retinal-scanner>\n```\n\n### Non Parent-Child Communication\n\nSometimes two components may need to communicate with one-another but they are not parent/child to each other. In simple scenarios, you can use an empty Vue instance as a central event bus:\n\n``` js\nvar bus = new Vue()\n```\n``` js\n// in component A's method\nbus.$emit('id-selected', 1)\n```\n``` js\n// in component B's created hook\nbus.$on('id-selected', function (id) {\n  // ...\n})\n```\n\nIn more complex cases, you should consider employing a dedicated [state-management pattern](state-management.html).\n\n## Content Distribution with Slots\n\nWhen using components, it is often desired to compose them like this:\n\n``` html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\nThere are two things to note here:\n\n1. The `<app>` component does not know what content may be present inside its mount target. It is decided by whatever parent component that is using `<app>`.\n\n2. The `<app>` component very likely has its own template.\n\nTo make the composition work, we need a way to interweave the parent \"content\" and the component's own template. This is a process called **content distribution** (or \"transclusion\" if you are familiar with Angular). Vue.js implements a content distribution API that is modeled after the current [Web Components spec draft](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md), using the special `<slot>` element to serve as distribution outlets for the original content.\n\n### Compilation Scope\n\nBefore we dig into the API, let's first clarify which scope the contents are compiled in. Imagine a template like this:\n\n``` html\n<child-component>\n  {{ message }}\n</child-component>\n```\n\nShould the `message` be bound to the parent's data or the child data? The answer is the parent. A simple rule of thumb for component scope is:\n\n> Everything in the parent template is compiled in parent scope; everything in the child template is compiled in child scope.\n\nA common mistake is trying to bind a directive to a child property/method in the parent template:\n\n``` html\n<!-- does NOT work -->\n<child-component v-show=\"someChildProperty\"></child-component>\n```\n\nAssuming `someChildProperty` is a property on the child component, the example above would not work. The parent's template is not aware of the state of a child component.\n\nIf you need to bind child-scope directives on a component root node, you should do so in the child component's own template:\n\n``` js\nVue.component('child-component', {\n  // this does work, because we are in the right scope\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n```\n\nSimilarly, distributed content will be compiled in the parent scope.\n\n### Single Slot\n\nParent content will be **discarded** unless the child component template contains at least one `<slot>` outlet. When there is only one slot with no attributes, the entire content fragment will be inserted at its position in the DOM, replacing the slot itself.\n\nAnything originally inside the `<slot>` tags is considered **fallback content**. Fallback content is compiled in the child scope and will only be displayed if the hosting element is empty and has no content to be inserted.\n\nSuppose we have a component called `my-component` with the following template:\n\n``` html\n<div>\n  <h2>I'm the child title</h2>\n  <slot>\n    This will only be displayed if there is no content\n    to be distributed.\n  </slot>\n</div>\n```\n\nAnd a parent that uses the component:\n\n``` html\n<div>\n  <h1>I'm the parent title</h1>\n  <my-component>\n    <p>This is some original content</p>\n    <p>This is some more original content</p>\n  </my-component>\n</div>\n```\n\nThe rendered result will be:\n\n``` html\n<div>\n  <h1>I'm the parent title</h1>\n  <div>\n    <h2>I'm the child title</h2>\n    <p>This is some original content</p>\n    <p>This is some more original content</p>\n  </div>\n</div>\n```\n\n### Named Slots\n\n`<slot>` elements have a special attribute, `name`, which can be used to further customize how content should be distributed. You can have multiple slots with different names. A named slot will match any element that has a corresponding `slot` attribute in the content fragment.\n\nThere can still be one unnamed slot, which is the **default slot** that serves as a catch-all outlet for any unmatched content. If there is no default slot, unmatched content will be discarded.\n\nFor example, suppose we have an `app-layout` component with the following template:\n\n``` html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\nParent markup:\n\n``` html\n<app-layout>\n  <h1 slot=\"header\">Here might be a page title</h1>\n\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <p slot=\"footer\">Here's some contact info</p>\n</app-layout>\n```\n\nThe rendered result will be:\n\n``` html\n<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>\n```\n\nThe content distribution API is a very useful mechanism when designing components that are meant to be composed together.\n\n## Dynamic Components\n\nYou can use the same mount point and dynamically switch between multiple components using the reserved `<component>` element and dynamically bind to its `is` attribute:\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n``` html\n<component v-bind:is=\"currentView\">\n  <!-- component changes when vm.currentView changes! -->\n</component>\n```\n\nIf you prefer, you can also bind directly to component objects:\n\n``` js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n### `keep-alive`\n\nIf you want to keep the switched-out components in memory so that you can preserve their state or avoid re-rendering, you can wrap a dynamic component in a `<keep-alive>` element:\n\n``` html\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- inactive components will be cached! -->\n  </component>\n</keep-alive>\n```\n\nCheck out more details on `<keep-alive>` in the [API reference](../api/#keep-alive).\n\n## Misc\n\n### Authoring Reusable Components\n\nWhen authoring components, it's good to keep in mind whether you intend to reuse it somewhere else later. It's OK for one-off components to be tightly coupled, but reusable components should define a clean public interface and make no assumptions about the context it's used in.\n\nThe API for a Vue component comes in three parts - props, events, and slots:\n\n- **Props** allow the external environment to pass data into the component\n\n- **Events** allow the component to trigger side effects in the external environment\n\n- **Slots** allow the external environment to compose the component with extra content.\n\nWith the dedicated shorthand syntaxes for `v-bind` and `v-on`, the intents can be clearly and succinctly conveyed in the template:\n\n``` html\n<my-component\n  :foo=\"baz\"\n  :bar=\"qux\"\n  @event-a=\"doThis\"\n  @event-b=\"doThat\"\n>\n  <img slot=\"icon\" src=\"...\">\n  <p slot=\"main-text\">Hello!</p>\n</my-component>\n```\n\n### Child Component Refs\n\nDespite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you have to assign a reference ID to the child component using `ref`. For example:\n\n``` html\n<div id=\"parent\">\n  <user-profile ref=\"profile\"></user-profile>\n</div>\n```\n\n``` js\nvar parent = new Vue({ el: '#parent' })\n// access child component instance\nvar child = parent.$refs.profile\n```\n\nWhen `ref` is used together with `v-for`, the ref you get will be an array or an object containing the child components mirroring the data source.\n\n<p class=\"tip\">`$refs` are only populated after the component has been rendered, and it is not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid using `$refs` in templates or computed properties.</p>\n\n### Async Components\n\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's actually needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component actually needs to be rendered and will cache the result for future re-renders. For example:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nThe factory function receives a `resolve` callback, which should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed. The `setTimeout` here is simply for demonstration; How to retrieve the component is entirely up to you. One recommended approach is to use async components together with [Webpack's code-splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve) {\n  // This special require syntax will instruct Webpack to\n  // automatically split your built code into bundles which\n  // are loaded over Ajax requests.\n  require(['./my-async-component'], resolve)\n})\n```\n\nYou can also return a `Promise` in the resolve function, so with Webpack 2 + ES2015 syntax you can do:\n\n``` js\nVue.component(\n  'async-webpack-example',\n  () => System.import('./my-async-component')\n)\n```\n\n<p class=\"tip\">If you're a <strong>Browserify</strong> user that would like to use async components, it's unfortunately not possible and probably never will be, as its creator has [made it clear](https://github.com/substack/node-browserify/issues/58#issuecomment-21978224) that async loading \"is not something that Browserify will ever support.\" If this is a feature that's important to you, we recommend using Webpack instead.</p>\n\n### Component Naming Conventions\n\nWhen registering components (or props), you can use kebab-case, camelCase, or TitleCase. Vue doesn't care.\n\n``` js\n// in a component definition\ncomponents: {\n  // register using camelCase\n  'kebab-cased-component': { /* ... */ },\n  'camelCasedComponent': { /* ... */ },\n  'TitleCasedComponent': { /* ... */ }\n}\n```\n\nWithin HTML templates though, you have to use the kebab-case equivalents:\n\n``` html\n<!-- alway use kebab-case in HTML templates -->\n<kebab-cased-component></kebab-cased-component>\n<camel-cased-component></camel-cased-component>\n<title-cased-component></title-cased-component>\n```\n\nWhen using _string_ templates however, we're not bound by HTML's case-insensitive restrictions. That means even in the template, you reference your components and props using camelCase, PascalCase, or kebab-case:\n\n``` html\n<!-- use whatever you want in string templates! -->\n<my-component></my-component>\n<myComponent></myComponent>\n<MyComponent></MyComponent>\n```\n\nIf your component isn't passed content via `slot` elements, you can even make it self-closing with a `/` after the name:\n\n``` html\n<my-component/>\n```\n\nAgain, this _only_ works within string templates, as self-closing custom elements are not valid HTML and your browser's native parser will not understand them.\n\n### Recursive Component\n\nComponents can recursively invoke themselves in their own template. However, they can only do so with the `name` option:\n\n``` js\nname: 'unique-name-of-my-component'\n```\n\nWhen you register a component globally using `Vue.component`, the global ID is automatically set as the component's `name` option.\n\n``` js\nVue.component('unique-name-of-my-component', {\n  // ...\n})\n```\n\nIf you're not careful, recursive components can also lead to infinite loops:\n\n``` js\nname: 'stack-overflow',\ntemplate: '<div><stack-overflow></stack-overflow></div>'\n```\n\nA component like the above will result in a \"max stack size exceeded\" error, so make sure recursive invocation is conditional (i.e. uses a `v-if` that will eventually be `false`).\n\n### Inline Templates\n\nWhen the `inline-template` special attribute is present on a child component, the component will use its inner content as its template, rather than treating it as distributed content. This allows more flexible template-authoring.\n\n``` html\n<my-component inline-template>\n  <div>\n    <p>These are compiled as the component's own template.</p>\n    <p>Not parent's transclusion content.</p>\n  </div>\n</my-component>\n```\n\nHowever, `inline-template` makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the `template` option or in a `template` element in a `.vue` file.\n\n### X-Templates\n\nAnother way to define templates is inside of a script element with the type `text/x-template`, then referencing the template by an id. For example:\n\n``` html\n<script type=\"text/x-template\" id=\"hello-world-template\">\n  <p>Hello hello hello</p>\n</script>\n```\n\n``` js\nVue.component('hello-world', {\n  template: '#hello-world-template'\n})\n```\n\nThese can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.\n\n### Cheap Static Components with `v-once`\n\nRendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains **a lot** of static content. In these cases, you can ensure that it's only evaluated once and then cached by adding the `v-once` directive to the root element, like this:\n\n``` js\nVue.component('terms-of-service', {\n  template: '\\\n    <div v-once>\\\n      <h1>Terms of Service</h1>\\\n      ... a lot of static content ...\\\n    </div>\\\n  '\n})\n```\n","source":"v2/guide/components.md","raw":"---\ntitle: Components\ntype: guide\norder: 11\n---\n\n## What are Components?\n\nComponents are one of the most powerful features of Vue. They help you extend basic HTML elements to encapsulate reusable code. At a high level, components are custom elements that Vue's compiler attaches behavior to. In some cases, they may also appear as a native HTML element extended with the special `is` attribute.\n\n## Using Components\n\n### Registration\n\nWe've learned in the previous sections that we can create a new Vue instance with:\n\n``` js\nnew Vue({\n  el: '#some-element',\n  // options\n})\n```\n\nTo register a global component, you can use `Vue.component(tagName, options)`. For example:\n\n``` js\nVue.component('my-component', {\n  // options\n})\n```\n\n<p class=\"tip\">Note that Vue does not enforce the [W3C rules](http://www.w3.org/TR/custom-elements/#concepts) for custom tag names (all-lowercase, must contain a hyphen) though following this convention is considered good practice.</p>\n\nOnce registered, a component can be used in an instance's template as a custom element, `<my-component></my-component>`. Make sure the component is registered **before** you instantiate the root Vue instance. Here's the full example:\n\n``` html\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n\n``` js\n// register\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n\n// create a root instance\nnew Vue({\n  el: '#example'\n})\n```\n\nWhich will render:\n\n``` html\n<div id=\"example\">\n  <div>A custom component!</div>\n</div>\n```\n\n{% raw %}\n<div id=\"example\" class=\"demo\">\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\nnew Vue({ el: '#example' })\n</script>\n{% endraw %}\n\n### Local Registration\n\nYou don't have to register every component globally. You can make a component available only in the scope of another instance/component by registering it with the `components` instance option:\n\n``` js\nvar Child = {\n  template: '<div>A custom component!</div>'\n}\n\nnew Vue({\n  // ...\n  components: {\n    // <my-component> will only be available in parent's template\n    'my-component': Child\n  }\n})\n```\n\nThe same encapsulation applies for other registerable Vue features, such as directives.\n\n### DOM Template Parsing Caveats\n\nWhen using the DOM as your template (e.g. using the `el` option to mount an element with existing content), you will be subject to some restrictions that are inherent to how HTML works, because Vue can only retrieve the template content **after** the browser has parsed and normalized it. Most notably, some elements such as `<ul>`, `<ol>`, `<table>` and `<select>` have restrictions on what elements can appear inside them, and some elements such as `<option>` can only appear inside certain other elements.\n\nThis will lead to issues when using custom components with elements that have such restrictions, for example:\n\n``` html\n<table>\n  <my-row>...</my-row>\n</table>\n```\n\nThe custom component `<my-row>` will be hoisted out as invalid content, thus causing errors in the eventual rendered output. A workaround is to use the `is` special attribute:\n\n``` html\n<table>\n  <tr is=\"my-row\"></tr>\n</table>\n```\n\n**It should be noted that these limitations do not apply if you are using string templates from one of the following sources**:\n\n- `<script type=\"text/x-template\">`\n- JavaScript inline template strings\n- `.vue` components\n\nTherefore, prefer using string templates whenever possible.\n\n### `data` Must Be a Function\n\nMost of the options that can be passed into the Vue constructor can be used in a component, with one special case: `data` must be function. In fact, if you try this:\n\n``` js\nVue.component('my-component', {\n  template: '<span>{{ message }}</span>',\n  data: {\n    message: 'hello'\n  }\n})\n```\n\nThen Vue will halt and emit warnings in the console, telling you that `data` must be a function for component instances. It's good to understand why the rules exist though, so let's cheat.\n\n``` html\n<div id=\"example-2\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n```\n\n``` js\nvar data = { counter: 0 }\n\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  // data is technically a function, so Vue won't\n  // complain, but we return the same object\n  // reference for each component instance\n  data: function () {\n    return data\n  }\n})\n\nnew Vue({\n  el: '#example-2'\n})\n```\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n<script>\nvar data = { counter: 0 }\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return data\n  }\n})\nnew Vue({\n  el: '#example-2'\n})\n</script>\n{% endraw %}\n\nSince all three component instances share the same `data` object, incrementing one counter increments them all! Ouch. Let's fix this by instead returning a fresh data object:\n\n``` js\ndata: function () {\n  return {\n    counter: 0\n  }\n}\n```\n\nNow all our counters each have their own internal state:\n\n{% raw %}\n<div id=\"example-2-5\" class=\"demo\">\n  <my-component></my-component>\n  <my-component></my-component>\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  }\n})\nnew Vue({\n  el: '#example-2-5'\n})\n</script>\n{% endraw %}\n\n### Composing Components\n\nComponents are meant to be used together, most commonly in parent-child relationships: component A may use component B in its own template. They inevitably need to communicate to one another: the parent may need to pass data down to the child, and the child may need to inform the parent of something that happened in the child. However, it is also very important to keep the parent and the child as decoupled as possible via a clearly-defined interface. This ensures each component's code can be written and reasoned about in relative isolation, thus making them more maintainable and potentially easier to reuse.\n\nIn Vue.js, the parent-child component relationship can be summarized as **props down, events up**. The parent passes data down to the child via **props**, and the child sends messages to the parent via **events**. Let's see how they work next.\n\n<p style=\"text-align: center\">\n  <img style=\"width:300px\" src=\"/images/props-events.png\" alt=\"props down, events up\">\n</p>\n\n## Props\n\n### Passing Data with Props\n\nEvery component instance has its own **isolated scope**. This means you cannot (and should not) directly reference parent data in a child component's template. Data can be passed down to child components using **props**.\n\nA prop is a custom attribute for passing information from parent components. A child component needs to explicitly declare the props it expects to receive using the [`props` option](../api/#props):\n\n``` js\nVue.component('child', {\n  // declare the props\n  props: ['message'],\n  // just like data, the prop can be used inside templates\n  // and is also made available in the vm as this.message\n  template: '<span>{{ message }}</span>'\n})\n```\n\nThen we can pass a plain string to it like so:\n\n``` html\n<child message=\"hello!\"></child>\n```\n\nResult:\n\n{% raw %}\n<div id=\"prop-example-1\" class=\"demo\">\n  <child message=\"hello!\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#prop-example-1',\n  components: {\n    child: {\n      props: ['message'],\n      template: '<span>{{ message }}</span>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n### camelCase vs. kebab-case\n\nHTML attributes are case-insensitive, so when using non-string templates, camelCased prop names need to use their kebab-case (hyphen-delimited) equivalents:\n\n``` js\nVue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '<span>{{ myMessage }}</span>'\n})\n```\n\n``` html\n<!-- kebab-case in HTML -->\n<child my-message=\"hello!\"></child>\n```\n\nAgain, if you're using string templates, then this limitation does not apply.\n\n### Dynamic Props\n\nSimilar to binding a normal attribute to an expression, we can also use `v-bind` for dynamically binding props to data on the parent. Whenever the data is updated in the parent, it will also flow down to the child:\n\n``` html\n<div>\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n```\n\nIt's often simpler to use the shorthand syntax for `v-bind`:\n\n``` html\n<child :my-message=\"parentMsg\"></child>\n```\n\nResult:\n\n{% raw %}\n<div id=\"demo-2\" class=\"demo\">\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#demo-2',\n  data: {\n    parentMsg: 'Message from parent'\n  },\n  components: {\n    child: {\n      props: ['myMessage'],\n      template: '<span>{{myMessage}}</span>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n### Literal vs Dynamic\n\nA common mistake beginners tend to make is attempting to pass down a number using the literal syntax:\n\n``` html\n<!-- this passes down a plain string \"1\" -->\n<comp some-prop=\"1\"></comp>\n```\n\nHowever, since this is a literal prop, its value is passed down as a plain string `\"1\"` instead of an actual number. If we want to pass down an actual JavaScript number, we need to use `v-bind` so that its value is evaluated as a JavaScript expression:\n\n``` html\n<!-- this passes down an actual number -->\n<comp v-bind:some-prop=\"1\"></comp>\n```\n\n### One-Way Data Flow\n\nAll props form a **one-way-down** binding between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to reason about.\n\nIn addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console.\n\nThere are usually two cases where it's tempting to mutate a prop:\n\n1. The prop is used to only pass in an initial value, the child component simply wants to use it as a local data property afterwards;\n\n2. The prop is passed in as a raw value that needs to be transformed.\n\nThe proper answer to these use cases are:\n\n1. Define a local data property that uses the prop's initial value as its initial value:\n\n  ``` js\n  props: ['initialCounter'],\n  data: function () {\n    return { counter: this.initialCounter }\n  }\n  ```\n\n2. Define a computed property that is computed from the prop's value:\n\n  ``` js\n  props: ['size'],\n  computed: {\n    normalizedSize: function () {\n      return this.size.trim().toLowerCase()\n    }\n  }\n  ```\n\n<p class=\"tip\">Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child **will** affect parent state.</p>\n\n### Prop Validation\n\nIt is possible for a component to specify requirements for the props it is receiving. If a requirement is not met, Vue will emit warnings. This is especially useful when you are authoring a component that is intended to be used by others.\n\nInstead of defining the props as an array of strings, you can use an object with validation requirements:\n\n``` js\nVue.component('example', {\n  props: {\n    // basic type check (`null` means accept any type)\n    propA: Number,\n    // multiple possible types\n    propB: [String, Number],\n    // a required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // a number with default value\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // object/array defaults should be returned from a\n    // factory function\n    propE: {\n      type: Object,\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // custom validator function\n    propF: {\n      validator: function (value) {\n        return value > 10\n      }\n    }\n  }\n})\n```\n\nThe `type` can be one of the following native constructors:\n\n- String\n- Number\n- Boolean\n- Function\n- Object\n- Array\n\nIn addition, `type` can also be a custom constructor function and the assertion will be made with an `instanceof` check.\n\nWhen a prop validation fails, Vue will produce a console warning (if using the development build).\n\n## Custom Events\n\nWe have learned that the parent can pass data down to the child using props, but how do we communicate back to the parent when something happens? This is where Vue's custom event system comes in.\n\n### Using `v-on` with Custom Events\n\nEvery Vue instance implements an [events interface](../api/#Instance-Methods-Events), which means it can:\n\n- Listen to an event using `$on(eventName)`\n- Trigger an event using `$emit(eventName)`\n\n<p class=\"tip\">Note that Vue's event system is separate from the browser's [EventTarget API](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget). Though they work similarly, `$on` and `$emit` are __not__ aliases for `addEventListener` and `dispatchEvent`.</p>\n\nIn addition, a parent component can listen to the events emitted from a child component using `v-on` directly in the template where the child component is used.\n\nHere's an example:\n\n``` html\n<div id=\"counter-event-example\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n```\n\n``` js\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\n\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"counter-event-example\" class=\"demo\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n{% endraw %}\n\nIn this example, it's important to note that the child component is still completely decoupled from what happens outside of it. All it does is report information about its own activity, just in case a parent component might care.\n\n#### Binding Native Events to Components\n\nThere may be times when you want to listen for a native event on the root element of a component. In these cases, you can use the `.native` modifier for `v-on`. For example:\n\n``` html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n### Form Input Components using Custom Events\n\nCustom events can also be used to create custom inputs that work with `v-model`. Remember:\n\n``` html\n<input v-model=\"something\">\n```\n\nis just syntactic sugar for:\n\n``` html\n<input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n```\n\nWhen used with a component, this simplifies to:\n\n``` html\n<input v-bind:value=\"something\" v-on:input=\"something = arguments[0]\">\n```\n\nSo for a component to work with `v-model`, it must:\n\n- accept a `value` prop\n- emit an `input` event with the new value\n\nLet's see it in action with a very simple currency input:\n\n``` html\n<currency-input v-model=\"price\"></currency-input>\n```\n\n``` js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // Instead of updating the value directly, this\n    // method is used to format and place constraints\n    // on the input's value\n    updateValue: function (value) {\n      var formattedValue = value\n        // Remove whitespace on either side\n        .trim()\n        // Shorten to 2 decimal places\n        .slice(0, value.indexOf('.') + 3)\n      // If the value was not already normalized,\n      // manually override it to conform\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"currency-input-example\" class=\"demo\">\n  <currency-input v-model=\"price\"></currency-input>\n</div>\n<script>\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    updateValue: function (value) {\n      var formattedValue = value\n        .trim()\n        .slice(0, value.indexOf('.') + 3)\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\nnew Vue({ el: '#currency-input-example' })\n</script>\n{% endraw %}\n\nThe implementation above is pretty naive though. For example, users are allowed to enter multiple periods and even letters sometimes - yuck! So for those that want to see a non-trivial example, here's a more robust currency filter:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/result,html,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThe events interface can also be used to create more unusual inputs. For example, imagine these possibilities:\n\n``` html\n<voice-recognizer v-model=\"question\"></voice-recognizer>\n<webcam-gesture-reader v-model=\"gesture\"></webcam-gesture-reader>\n<webcam-retinal-scanner v-model=\"retinalImage\"></webcam-retinal-scanner>\n```\n\n### Non Parent-Child Communication\n\nSometimes two components may need to communicate with one-another but they are not parent/child to each other. In simple scenarios, you can use an empty Vue instance as a central event bus:\n\n``` js\nvar bus = new Vue()\n```\n``` js\n// in component A's method\nbus.$emit('id-selected', 1)\n```\n``` js\n// in component B's created hook\nbus.$on('id-selected', function (id) {\n  // ...\n})\n```\n\nIn more complex cases, you should consider employing a dedicated [state-management pattern](state-management.html).\n\n## Content Distribution with Slots\n\nWhen using components, it is often desired to compose them like this:\n\n``` html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\nThere are two things to note here:\n\n1. The `<app>` component does not know what content may be present inside its mount target. It is decided by whatever parent component that is using `<app>`.\n\n2. The `<app>` component very likely has its own template.\n\nTo make the composition work, we need a way to interweave the parent \"content\" and the component's own template. This is a process called **content distribution** (or \"transclusion\" if you are familiar with Angular). Vue.js implements a content distribution API that is modeled after the current [Web Components spec draft](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md), using the special `<slot>` element to serve as distribution outlets for the original content.\n\n### Compilation Scope\n\nBefore we dig into the API, let's first clarify which scope the contents are compiled in. Imagine a template like this:\n\n``` html\n<child-component>\n  {{ message }}\n</child-component>\n```\n\nShould the `message` be bound to the parent's data or the child data? The answer is the parent. A simple rule of thumb for component scope is:\n\n> Everything in the parent template is compiled in parent scope; everything in the child template is compiled in child scope.\n\nA common mistake is trying to bind a directive to a child property/method in the parent template:\n\n``` html\n<!-- does NOT work -->\n<child-component v-show=\"someChildProperty\"></child-component>\n```\n\nAssuming `someChildProperty` is a property on the child component, the example above would not work. The parent's template is not aware of the state of a child component.\n\nIf you need to bind child-scope directives on a component root node, you should do so in the child component's own template:\n\n``` js\nVue.component('child-component', {\n  // this does work, because we are in the right scope\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n```\n\nSimilarly, distributed content will be compiled in the parent scope.\n\n### Single Slot\n\nParent content will be **discarded** unless the child component template contains at least one `<slot>` outlet. When there is only one slot with no attributes, the entire content fragment will be inserted at its position in the DOM, replacing the slot itself.\n\nAnything originally inside the `<slot>` tags is considered **fallback content**. Fallback content is compiled in the child scope and will only be displayed if the hosting element is empty and has no content to be inserted.\n\nSuppose we have a component called `my-component` with the following template:\n\n``` html\n<div>\n  <h2>I'm the child title</h2>\n  <slot>\n    This will only be displayed if there is no content\n    to be distributed.\n  </slot>\n</div>\n```\n\nAnd a parent that uses the component:\n\n``` html\n<div>\n  <h1>I'm the parent title</h1>\n  <my-component>\n    <p>This is some original content</p>\n    <p>This is some more original content</p>\n  </my-component>\n</div>\n```\n\nThe rendered result will be:\n\n``` html\n<div>\n  <h1>I'm the parent title</h1>\n  <div>\n    <h2>I'm the child title</h2>\n    <p>This is some original content</p>\n    <p>This is some more original content</p>\n  </div>\n</div>\n```\n\n### Named Slots\n\n`<slot>` elements have a special attribute, `name`, which can be used to further customize how content should be distributed. You can have multiple slots with different names. A named slot will match any element that has a corresponding `slot` attribute in the content fragment.\n\nThere can still be one unnamed slot, which is the **default slot** that serves as a catch-all outlet for any unmatched content. If there is no default slot, unmatched content will be discarded.\n\nFor example, suppose we have an `app-layout` component with the following template:\n\n``` html\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\nParent markup:\n\n``` html\n<app-layout>\n  <h1 slot=\"header\">Here might be a page title</h1>\n\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <p slot=\"footer\">Here's some contact info</p>\n</app-layout>\n```\n\nThe rendered result will be:\n\n``` html\n<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>\n```\n\nThe content distribution API is a very useful mechanism when designing components that are meant to be composed together.\n\n## Dynamic Components\n\nYou can use the same mount point and dynamically switch between multiple components using the reserved `<component>` element and dynamically bind to its `is` attribute:\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n``` html\n<component v-bind:is=\"currentView\">\n  <!-- component changes when vm.currentView changes! -->\n</component>\n```\n\nIf you prefer, you can also bind directly to component objects:\n\n``` js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n### `keep-alive`\n\nIf you want to keep the switched-out components in memory so that you can preserve their state or avoid re-rendering, you can wrap a dynamic component in a `<keep-alive>` element:\n\n``` html\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- inactive components will be cached! -->\n  </component>\n</keep-alive>\n```\n\nCheck out more details on `<keep-alive>` in the [API reference](../api/#keep-alive).\n\n## Misc\n\n### Authoring Reusable Components\n\nWhen authoring components, it's good to keep in mind whether you intend to reuse it somewhere else later. It's OK for one-off components to be tightly coupled, but reusable components should define a clean public interface and make no assumptions about the context it's used in.\n\nThe API for a Vue component comes in three parts - props, events, and slots:\n\n- **Props** allow the external environment to pass data into the component\n\n- **Events** allow the component to trigger side effects in the external environment\n\n- **Slots** allow the external environment to compose the component with extra content.\n\nWith the dedicated shorthand syntaxes for `v-bind` and `v-on`, the intents can be clearly and succinctly conveyed in the template:\n\n``` html\n<my-component\n  :foo=\"baz\"\n  :bar=\"qux\"\n  @event-a=\"doThis\"\n  @event-b=\"doThat\"\n>\n  <img slot=\"icon\" src=\"...\">\n  <p slot=\"main-text\">Hello!</p>\n</my-component>\n```\n\n### Child Component Refs\n\nDespite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you have to assign a reference ID to the child component using `ref`. For example:\n\n``` html\n<div id=\"parent\">\n  <user-profile ref=\"profile\"></user-profile>\n</div>\n```\n\n``` js\nvar parent = new Vue({ el: '#parent' })\n// access child component instance\nvar child = parent.$refs.profile\n```\n\nWhen `ref` is used together with `v-for`, the ref you get will be an array or an object containing the child components mirroring the data source.\n\n<p class=\"tip\">`$refs` are only populated after the component has been rendered, and it is not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid using `$refs` in templates or computed properties.</p>\n\n### Async Components\n\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's actually needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component actually needs to be rendered and will cache the result for future re-renders. For example:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nThe factory function receives a `resolve` callback, which should be called when you have retrieved your component definition from the server. You can also call `reject(reason)` to indicate the load has failed. The `setTimeout` here is simply for demonstration; How to retrieve the component is entirely up to you. One recommended approach is to use async components together with [Webpack's code-splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve) {\n  // This special require syntax will instruct Webpack to\n  // automatically split your built code into bundles which\n  // are loaded over Ajax requests.\n  require(['./my-async-component'], resolve)\n})\n```\n\nYou can also return a `Promise` in the resolve function, so with Webpack 2 + ES2015 syntax you can do:\n\n``` js\nVue.component(\n  'async-webpack-example',\n  () => System.import('./my-async-component')\n)\n```\n\n<p class=\"tip\">If you're a <strong>Browserify</strong> user that would like to use async components, it's unfortunately not possible and probably never will be, as its creator has [made it clear](https://github.com/substack/node-browserify/issues/58#issuecomment-21978224) that async loading \"is not something that Browserify will ever support.\" If this is a feature that's important to you, we recommend using Webpack instead.</p>\n\n### Component Naming Conventions\n\nWhen registering components (or props), you can use kebab-case, camelCase, or TitleCase. Vue doesn't care.\n\n``` js\n// in a component definition\ncomponents: {\n  // register using camelCase\n  'kebab-cased-component': { /* ... */ },\n  'camelCasedComponent': { /* ... */ },\n  'TitleCasedComponent': { /* ... */ }\n}\n```\n\nWithin HTML templates though, you have to use the kebab-case equivalents:\n\n``` html\n<!-- alway use kebab-case in HTML templates -->\n<kebab-cased-component></kebab-cased-component>\n<camel-cased-component></camel-cased-component>\n<title-cased-component></title-cased-component>\n```\n\nWhen using _string_ templates however, we're not bound by HTML's case-insensitive restrictions. That means even in the template, you reference your components and props using camelCase, PascalCase, or kebab-case:\n\n``` html\n<!-- use whatever you want in string templates! -->\n<my-component></my-component>\n<myComponent></myComponent>\n<MyComponent></MyComponent>\n```\n\nIf your component isn't passed content via `slot` elements, you can even make it self-closing with a `/` after the name:\n\n``` html\n<my-component/>\n```\n\nAgain, this _only_ works within string templates, as self-closing custom elements are not valid HTML and your browser's native parser will not understand them.\n\n### Recursive Component\n\nComponents can recursively invoke themselves in their own template. However, they can only do so with the `name` option:\n\n``` js\nname: 'unique-name-of-my-component'\n```\n\nWhen you register a component globally using `Vue.component`, the global ID is automatically set as the component's `name` option.\n\n``` js\nVue.component('unique-name-of-my-component', {\n  // ...\n})\n```\n\nIf you're not careful, recursive components can also lead to infinite loops:\n\n``` js\nname: 'stack-overflow',\ntemplate: '<div><stack-overflow></stack-overflow></div>'\n```\n\nA component like the above will result in a \"max stack size exceeded\" error, so make sure recursive invocation is conditional (i.e. uses a `v-if` that will eventually be `false`).\n\n### Inline Templates\n\nWhen the `inline-template` special attribute is present on a child component, the component will use its inner content as its template, rather than treating it as distributed content. This allows more flexible template-authoring.\n\n``` html\n<my-component inline-template>\n  <div>\n    <p>These are compiled as the component's own template.</p>\n    <p>Not parent's transclusion content.</p>\n  </div>\n</my-component>\n```\n\nHowever, `inline-template` makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the `template` option or in a `template` element in a `.vue` file.\n\n### X-Templates\n\nAnother way to define templates is inside of a script element with the type `text/x-template`, then referencing the template by an id. For example:\n\n``` html\n<script type=\"text/x-template\" id=\"hello-world-template\">\n  <p>Hello hello hello</p>\n</script>\n```\n\n``` js\nVue.component('hello-world', {\n  template: '#hello-world-template'\n})\n```\n\nThese can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.\n\n### Cheap Static Components with `v-once`\n\nRendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains **a lot** of static content. In these cases, you can ensure that it's only evaluated once and then cached by adding the `v-once` directive to the root element, like this:\n\n``` js\nVue.component('terms-of-service', {\n  template: '\\\n    <div v-once>\\\n      <h1>Terms of Service</h1>\\\n      ... a lot of static content ...\\\n    </div>\\\n  '\n})\n```\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/components.html","comments":1,"layout":"page","_id":"civ8jcjof000w91m1osb4z45f","content":"<h2 id=\"What-are-Components\"><a href=\"#What-are-Components\" class=\"headerlink\" title=\"What are Components?\"></a>What are Components?</h2><p>Components are one of the most powerful features of Vue. They help you extend basic HTML elements to encapsulate reusable code. At a high level, components are custom elements that Vue’s compiler attaches behavior to. In some cases, they may also appear as a native HTML element extended with the special <code>is</code> attribute.</p>\n<h2 id=\"Using-Components\"><a href=\"#Using-Components\" class=\"headerlink\" title=\"Using Components\"></a>Using Components</h2><h3 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h3><p>We’ve learned in the previous sections that we can create a new Vue instance with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#some-element'</span>,</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To register a global component, you can use <code>Vue.component(tagName, options)</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that Vue does not enforce the <a href=\"http://www.w3.org/TR/custom-elements/#concepts\" target=\"_blank\" rel=\"external\">W3C rules</a> for custom tag names (all-lowercase, must contain a hyphen) though following this convention is considered good practice.</p>\n\n<p>Once registered, a component can be used in an instance’s template as a custom element, <code>&lt;my-component&gt;&lt;/my-component&gt;</code>. Make sure the component is registered <strong>before</strong> you instantiate the root Vue instance. Here’s the full example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create a root instance</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Which will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example\" class=\"demo\">\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\nnew Vue({ el: '#example' })\n</script>\n\n<h3 id=\"Local-Registration\"><a href=\"#Local-Registration\" class=\"headerlink\" title=\"Local Registration\"></a>Local Registration</h3><p>You don’t have to register every component globally. You can make a component available only in the scope of another instance/component by registering it with the <code>components</code> instance option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  components: &#123;</div><div class=\"line\">    <span class=\"comment\">// &lt;my-component&gt; will only be available in parent's template</span></div><div class=\"line\">    <span class=\"string\">'my-component'</span>: Child</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The same encapsulation applies for other registerable Vue features, such as directives.</p>\n<h3 id=\"DOM-Template-Parsing-Caveats\"><a href=\"#DOM-Template-Parsing-Caveats\" class=\"headerlink\" title=\"DOM Template Parsing Caveats\"></a>DOM Template Parsing Caveats</h3><p>When using the DOM as your template (e.g. using the <code>el</code> option to mount an element with existing content), you will be subject to some restrictions that are inherent to how HTML works, because Vue can only retrieve the template content <strong>after</strong> the browser has parsed and normalized it. Most notably, some elements such as <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;table&gt;</code> and <code>&lt;select&gt;</code> have restrictions on what elements can appear inside them, and some elements such as <code>&lt;option&gt;</code> can only appear inside certain other elements.</p>\n<p>This will lead to issues when using custom components with elements that have such restrictions, for example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The custom component <code>&lt;my-row&gt;</code> will be hoisted out as invalid content, thus causing errors in the eventual rendered output. A workaround is to use the <code>is</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>It should be noted that these limitations do not apply if you are using string templates from one of the following sources</strong>:</p>\n<ul>\n<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>\n<li>JavaScript inline template strings</li>\n<li><code>.vue</code> components</li>\n</ul>\n<p>Therefore, prefer using string templates whenever possible.</p>\n<h3 id=\"data-Must-Be-a-Function\"><a href=\"#data-Must-Be-a-Function\" class=\"headerlink\" title=\"data Must Be a Function\"></a><code>data</code> Must Be a Function</h3><p>Most of the options that can be passed into the Vue constructor can be used in a component, with one special case: <code>data</code> must be function. In fact, if you try this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then Vue will halt and emit warnings in the console, telling you that <code>data</code> must be a function for component instances. It’s good to understand why the rules exist though, so let’s cheat.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'simple-counter'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">  <span class=\"comment\">// data is technically a function, so Vue won't</span></div><div class=\"line\">  <span class=\"comment\">// complain, but we return the same object</span></div><div class=\"line\">  <span class=\"comment\">// reference for each component instance</span></div><div class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n<script>\nvar data = { counter: 0 }\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return data\n  }\n})\nnew Vue({\n  el: '#example-2'\n})\n</script>\n\n<p>Since all three component instances share the same <code>data</code> object, incrementing one counter increments them all! Ouch. Let’s fix this by instead returning a fresh data object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now all our counters each have their own internal state:</p>\n\n<div id=\"example-2-5\" class=\"demo\">\n  <my-component></my-component>\n  <my-component></my-component>\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  }\n})\nnew Vue({\n  el: '#example-2-5'\n})\n</script>\n\n<h3 id=\"Composing-Components\"><a href=\"#Composing-Components\" class=\"headerlink\" title=\"Composing Components\"></a>Composing Components</h3><p>Components are meant to be used together, most commonly in parent-child relationships: component A may use component B in its own template. They inevitably need to communicate to one another: the parent may need to pass data down to the child, and the child may need to inform the parent of something that happened in the child. However, it is also very important to keep the parent and the child as decoupled as possible via a clearly-defined interface. This ensures each component’s code can be written and reasoned about in relative isolation, thus making them more maintainable and potentially easier to reuse.</p>\n<p>In Vue.js, the parent-child component relationship can be summarized as <strong>props down, events up</strong>. The parent passes data down to the child via <strong>props</strong>, and the child sends messages to the parent via <strong>events</strong>. Let’s see how they work next.</p>\n<p style=\"text-align: center\"><br>  <img style=\"width:300px\" src=\"/images/props-events.png\" alt=\"props down, events up\"><br></p>\n\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><h3 id=\"Passing-Data-with-Props\"><a href=\"#Passing-Data-with-Props\" class=\"headerlink\" title=\"Passing Data with Props\"></a>Passing Data with Props</h3><p>Every component instance has its own <strong>isolated scope</strong>. This means you cannot (and should not) directly reference parent data in a child component’s template. Data can be passed down to child components using <strong>props</strong>.</p>\n<p>A prop is a custom attribute for passing information from parent components. A child component needs to explicitly declare the props it expects to receive using the <a href=\"../api/#props\"><code>props</code> option</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// declare the props</span></div><div class=\"line\">  props: [<span class=\"string\">'message'</span>],</div><div class=\"line\">  <span class=\"comment\">// just like data, the prop can be used inside templates</span></div><div class=\"line\">  <span class=\"comment\">// and is also made available in the vm as this.message</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then we can pass a plain string to it like so:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"prop-example-1\" class=\"demo\">\n  <child message=\"hello!\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#prop-example-1',\n  components: {\n    child: {\n      props: ['message'],\n      template: '<span>{{ message }}</span>'\n    }\n  }\n})\n</script>\n\n<h3 id=\"camelCase-vs-kebab-case\"><a href=\"#camelCase-vs-kebab-case\" class=\"headerlink\" title=\"camelCase vs. kebab-case\"></a>camelCase vs. kebab-case</h3><p>HTML attributes are case-insensitive, so when using non-string templates, camelCased prop names need to use their kebab-case (hyphen-delimited) equivalents:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// camelCase in JavaScript</span></div><div class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- kebab-case in HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">my-message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Again, if you’re using string templates, then this limitation does not apply.</p>\n<h3 id=\"Dynamic-Props\"><a href=\"#Dynamic-Props\" class=\"headerlink\" title=\"Dynamic Props\"></a>Dynamic Props</h3><p>Similar to binding a normal attribute to an expression, we can also use <code>v-bind</code> for dynamically binding props to data on the parent. Whenever the data is updated in the parent, it will also flow down to the child:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s often simpler to use the shorthand syntax for <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"demo-2\" class=\"demo\">\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#demo-2',\n  data: {\n    parentMsg: 'Message from parent'\n  },\n  components: {\n    child: {\n      props: ['myMessage'],\n      template: '<span>{{myMessage}}</span>'\n    }\n  }\n})\n</script>\n\n<h3 id=\"Literal-vs-Dynamic\"><a href=\"#Literal-vs-Dynamic\" class=\"headerlink\" title=\"Literal vs Dynamic\"></a>Literal vs Dynamic</h3><p>A common mistake beginners tend to make is attempting to pass down a number using the literal syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this passes down a plain string \"1\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, since this is a literal prop, its value is passed down as a plain string <code>&quot;1&quot;</code> instead of an actual number. If we want to pass down an actual JavaScript number, we need to use <code>v-bind</code> so that its value is evaluated as a JavaScript expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this passes down an actual number --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-bind:some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"One-Way-Data-Flow\"><a href=\"#One-Way-Data-Flow\" class=\"headerlink\" title=\"One-Way Data Flow\"></a>One-Way Data Flow</h3><p>All props form a <strong>one-way-down</strong> binding between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent’s state, which can make your app’s data flow harder to reason about.</p>\n<p>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should <strong>not</strong> attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console.</p>\n<p>There are usually two cases where it’s tempting to mutate a prop:</p>\n<ol>\n<li><p>The prop is used to only pass in an initial value, the child component simply wants to use it as a local data property afterwards;</p>\n</li>\n<li><p>The prop is passed in as a raw value that needs to be transformed.</p>\n</li>\n</ol>\n<p>The proper answer to these use cases are:</p>\n<ol>\n<li><p>Define a local data property that uses the prop’s initial value as its initial value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</div><div class=\"line\"><span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.initialCounter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Define a computed property that is computed from the prop’s value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'size'</span>],</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">normalizedSize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p class=\"tip\">Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child <strong>will</strong> affect parent state.</p>\n\n<h3 id=\"Prop-Validation\"><a href=\"#Prop-Validation\" class=\"headerlink\" title=\"Prop Validation\"></a>Prop Validation</h3><p>It is possible for a component to specify requirements for the props it is receiving. If a requirement is not met, Vue will emit warnings. This is especially useful when you are authoring a component that is intended to be used by others.</p>\n<p>Instead of defining the props as an array of strings, you can use an object with validation requirements:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// basic type check (`null` means accept any type)</span></div><div class=\"line\">    propA: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// multiple possible types</span></div><div class=\"line\">    propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</div><div class=\"line\">    <span class=\"comment\">// a required string</span></div><div class=\"line\">    propC: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// a number with default value</span></div><div class=\"line\">    propD: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">100</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// object/array defaults should be returned from a</span></div><div class=\"line\">    <span class=\"comment\">// factory function</span></div><div class=\"line\">    propE: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// custom validator function</span></div><div class=\"line\">    propF: &#123;</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt; <span class=\"number\">10</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The <code>type</code> can be one of the following native constructors:</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Function</li>\n<li>Object</li>\n<li>Array</li>\n</ul>\n<p>In addition, <code>type</code> can also be a custom constructor function and the assertion will be made with an <code>instanceof</code> check.</p>\n<p>When a prop validation fails, Vue will produce a console warning (if using the development build).</p>\n<h2 id=\"Custom-Events\"><a href=\"#Custom-Events\" class=\"headerlink\" title=\"Custom Events\"></a>Custom Events</h2><p>We have learned that the parent can pass data down to the child using props, but how do we communicate back to the parent when something happens? This is where Vue’s custom event system comes in.</p>\n<h3 id=\"Using-v-on-with-Custom-Events\"><a href=\"#Using-v-on-with-Custom-Events\" class=\"headerlink\" title=\"Using v-on with Custom Events\"></a>Using <code>v-on</code> with Custom Events</h3><p>Every Vue instance implements an <a href=\"../api/#Instance-Methods-Events\">events interface</a>, which means it can:</p>\n<ul>\n<li>Listen to an event using <code>$on(eventName)</code></li>\n<li>Trigger an event using <code>$emit(eventName)</code></li>\n</ul>\n<p class=\"tip\">Note that Vue’s event system is separate from the browser’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\" target=\"_blank\" rel=\"external\">EventTarget API</a>. Though they work similarly, <code>$on</code> and <code>$emit</code> are <strong>not</strong> aliases for <code>addEventListener</code> and <code>dispatchEvent</code>.</p>\n\n<p>In addition, a parent component can listen to the events emitted from a child component using <code>v-on</code> directly in the template where the child component is used.</p>\n<p>Here’s an example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"counter-event-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"increment\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increment'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#counter-event-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">total</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">incrementTotal</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.total += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"counter-event-example\" class=\"demo\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n\n<p>In this example, it’s important to note that the child component is still completely decoupled from what happens outside of it. All it does is report information about its own activity, just in case a parent component might care.</p>\n<h4 id=\"Binding-Native-Events-to-Components\"><a href=\"#Binding-Native-Events-to-Components\" class=\"headerlink\" title=\"Binding Native Events to Components\"></a>Binding Native Events to Components</h4><p>There may be times when you want to listen for a native event on the root element of a component. In these cases, you can use the <code>.native</code> modifier for <code>v-on</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Form-Input-Components-using-Custom-Events\"><a href=\"#Form-Input-Components-using-Custom-Events\" class=\"headerlink\" title=\"Form Input Components using Custom Events\"></a>Form Input Components using Custom Events</h3><p>Custom events can also be used to create custom inputs that work with <code>v-model</code>. Remember:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"something\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>is just syntactic sugar for:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used with a component, this simplifies to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>So for a component to work with <code>v-model</code>, it must:</p>\n<ul>\n<li>accept a <code>value</code> prop</li>\n<li>emit an <code>input</code> event with the new value</li>\n</ul>\n<p>Let’s see it in action with a very simple currency input:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">currency-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'value'</span>],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// Instead of updating the value directly, this</span></div><div class=\"line\">    <span class=\"comment\">// method is used to format and place constraints</span></div><div class=\"line\">    <span class=\"comment\">// on the input's value</span></div><div class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</div><div class=\"line\">        <span class=\"comment\">// Remove whitespace on either side</span></div><div class=\"line\">        .trim()</div><div class=\"line\">        <span class=\"comment\">// Shorten to 2 decimal places</span></div><div class=\"line\">        .slice(<span class=\"number\">0</span>, value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span>)</div><div class=\"line\">      <span class=\"comment\">// If the value was not already normalized,</span></div><div class=\"line\">      <span class=\"comment\">// manually override it to conform</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// Emit the number value through the input event</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"currency-input-example\" class=\"demo\">\n  <currency-input v-model=\"price\"></currency-input>\n</div>\n<script>\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    updateValue: function (value) {\n      var formattedValue = value\n        .trim()\n        .slice(0, value.indexOf('.') + 3)\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\nnew Vue({ el: '#currency-input-example' })\n</script>\n\n<p>The implementation above is pretty naive though. For example, users are allowed to enter multiple periods and even letters sometimes - yuck! So for those that want to see a non-trivial example, here’s a more robust currency filter:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/result,html,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>The events interface can also be used to create more unusual inputs. For example, imagine these possibilities:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">voice-recognizer</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">voice-recognizer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-gesture-reader</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gesture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-gesture-reader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-retinal-scanner</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"retinalImage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-retinal-scanner</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Non-Parent-Child-Communication\"><a href=\"#Non-Parent-Child-Communication\" class=\"headerlink\" title=\"Non Parent-Child Communication\"></a>Non Parent-Child Communication</h3><p>Sometimes two components may need to communicate with one-another but they are not parent/child to each other. In simple scenarios, you can use an empty Vue instance as a central event bus:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component A's method</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component B's created hook</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In more complex cases, you should consider employing a dedicated <a href=\"state-management.html\">state-management pattern</a>.</p>\n<h2 id=\"Content-Distribution-with-Slots\"><a href=\"#Content-Distribution-with-Slots\" class=\"headerlink\" title=\"Content Distribution with Slots\"></a>Content Distribution with Slots</h2><p>When using components, it is often desired to compose them like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>There are two things to note here:</p>\n<ol>\n<li><p>The <code>&lt;app&gt;</code> component does not know what content may be present inside its mount target. It is decided by whatever parent component that is using <code>&lt;app&gt;</code>.</p>\n</li>\n<li><p>The <code>&lt;app&gt;</code> component very likely has its own template.</p>\n</li>\n</ol>\n<p>To make the composition work, we need a way to interweave the parent “content” and the component’s own template. This is a process called <strong>content distribution</strong> (or “transclusion” if you are familiar with Angular). Vue.js implements a content distribution API that is modeled after the current <a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" target=\"_blank\" rel=\"external\">Web Components spec draft</a>, using the special <code>&lt;slot&gt;</code> element to serve as distribution outlets for the original content.</p>\n<h3 id=\"Compilation-Scope\"><a href=\"#Compilation-Scope\" class=\"headerlink\" title=\"Compilation Scope\"></a>Compilation Scope</h3><p>Before we dig into the API, let’s first clarify which scope the contents are compiled in. Imagine a template like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Should the <code>message</code> be bound to the parent’s data or the child data? The answer is the parent. A simple rule of thumb for component scope is:</p>\n<blockquote>\n<p>Everything in the parent template is compiled in parent scope; everything in the child template is compiled in child scope.</p>\n</blockquote>\n<p>A common mistake is trying to bind a directive to a child property/method in the parent template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- does NOT work --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"someChildProperty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Assuming <code>someChildProperty</code> is a property on the child component, the example above would not work. The parent’s template is not aware of the state of a child component.</p>\n<p>If you need to bind child-scope directives on a component root node, you should do so in the child component’s own template:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// this does work, because we are in the right scope</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">someChildProperty</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Similarly, distributed content will be compiled in the parent scope.</p>\n<h3 id=\"Single-Slot\"><a href=\"#Single-Slot\" class=\"headerlink\" title=\"Single Slot\"></a>Single Slot</h3><p>Parent content will be <strong>discarded</strong> unless the child component template contains at least one <code>&lt;slot&gt;</code> outlet. When there is only one slot with no attributes, the entire content fragment will be inserted at its position in the DOM, replacing the slot itself.</p>\n<p>Anything originally inside the <code>&lt;slot&gt;</code> tags is considered <strong>fallback content</strong>. Fallback content is compiled in the child scope and will only be displayed if the hosting element is empty and has no content to be inserted.</p>\n<p>Suppose we have a component called <code>my-component</code> with the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>I'm the child title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    This will only be displayed if there is no content</div><div class=\"line\">    to be distributed.</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And a parent that uses the component:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm the parent title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some more original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered result will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm the parent title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>I'm the child title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some more original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Named-Slots\"><a href=\"#Named-Slots\" class=\"headerlink\" title=\"Named Slots\"></a>Named Slots</h3><p><code>&lt;slot&gt;</code> elements have a special attribute, <code>name</code>, which can be used to further customize how content should be distributed. You can have multiple slots with different names. A named slot will match any element that has a corresponding <code>slot</code> attribute in the content fragment.</p>\n<p>There can still be one unnamed slot, which is the <strong>default slot</strong> that serves as a catch-all outlet for any unmatched content. If there is no default slot, unmatched content will be discarded.</p>\n<p>For example, suppose we have an <code>app-layout</code> component with the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Parent markup:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-layout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered result will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The content distribution API is a very useful mechanism when designing components that are meant to be composed together.</p>\n<h2 id=\"Dynamic-Components\"><a href=\"#Dynamic-Components\" class=\"headerlink\" title=\"Dynamic Components\"></a>Dynamic Components</h2><p>You can use the same mount point and dynamically switch between multiple components using the reserved <code>&lt;component&gt;</code> element and dynamically bind to its <code>is</code> attribute:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentView</span>: <span class=\"string\">'home'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">    <span class=\"attr\">posts</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">    <span class=\"attr\">archive</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- component changes when vm.currentView changes! --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you prefer, you can also bind directly to component objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentView</span>: Home</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a><code>keep-alive</code></h3><p>If you want to keep the switched-out components in memory so that you can preserve their state or avoid re-rendering, you can wrap a dynamic component in a <code>&lt;keep-alive&gt;</code> element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- inactive components will be cached! --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Check out more details on <code>&lt;keep-alive&gt;</code> in the <a href=\"../api/#keep-alive\">API reference</a>.</p>\n<h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><h3 id=\"Authoring-Reusable-Components\"><a href=\"#Authoring-Reusable-Components\" class=\"headerlink\" title=\"Authoring Reusable Components\"></a>Authoring Reusable Components</h3><p>When authoring components, it’s good to keep in mind whether you intend to reuse it somewhere else later. It’s OK for one-off components to be tightly coupled, but reusable components should define a clean public interface and make no assumptions about the context it’s used in.</p>\n<p>The API for a Vue component comes in three parts - props, events, and slots:</p>\n<ul>\n<li><p><strong>Props</strong> allow the external environment to pass data into the component</p>\n</li>\n<li><p><strong>Events</strong> allow the component to trigger side effects in the external environment</p>\n</li>\n<li><p><strong>Slots</strong> allow the external environment to compose the component with extra content.</p>\n</li>\n</ul>\n<p>With the dedicated shorthand syntaxes for <code>v-bind</code> and <code>v-on</code>, the intents can be clearly and succinctly conveyed in the template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></div><div class=\"line\">  <span class=\"attr\">:foo</span>=<span class=\"string\">\"baz\"</span></div><div class=\"line\">  <span class=\"attr\">:bar</span>=<span class=\"string\">\"qux\"</span></div><div class=\"line\">  @<span class=\"attr\">event-a</span>=<span class=\"string\">\"doThis\"</span></div><div class=\"line\">  @<span class=\"attr\">event-b</span>=<span class=\"string\">\"doThat\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Child-Component-Refs\"><a href=\"#Child-Component-Refs\" class=\"headerlink\" title=\"Child Component Refs\"></a>Child Component Refs</h3><p>Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you have to assign a reference ID to the child component using <code>ref</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">user-profile</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"profile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-profile</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Vue(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#parent'</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// access child component instance</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = parent.$refs.profile</div></pre></td></tr></table></figure>\n<p>When <code>ref</code> is used together with <code>v-for</code>, the ref you get will be an array or an object containing the child components mirroring the data source.</p>\n<p class=\"tip\"><code>$refs</code> are only populated after the component has been rendered, and it is not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid using <code>$refs</code> in templates or computed properties.</p>\n\n<h3 id=\"Async-Components\"><a href=\"#Async-Components\" class=\"headerlink\" title=\"Async Components\"></a>Async Components</h3><p>In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it’s actually needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component actually needs to be rendered and will cache the result for future re-renders. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    resolve(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The factory function receives a <code>resolve</code> callback, which should be called when you have retrieved your component definition from the server. You can also call <code>reject(reason)</code> to indicate the load has failed. The <code>setTimeout</code> here is simply for demonstration; How to retrieve the component is entirely up to you. One recommended approach is to use async components together with <a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">Webpack’s code-splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// This special require syntax will instruct Webpack to</span></div><div class=\"line\">  <span class=\"comment\">// automatically split your built code into bundles which</span></div><div class=\"line\">  <span class=\"comment\">// are loaded over Ajax requests.</span></div><div class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can also return a <code>Promise</code> in the resolve function, so with Webpack 2 + ES2015 syntax you can do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(</div><div class=\"line\">  <span class=\"string\">'async-webpack-example'</span>,</div><div class=\"line\">  () =&gt; System.import(<span class=\"string\">'./my-async-component'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p class=\"tip\">If you’re a <strong>Browserify</strong> user that would like to use async components, it’s unfortunately not possible and probably never will be, as its creator has <a href=\"https://github.com/substack/node-browserify/issues/58#issuecomment-21978224\" target=\"_blank\" rel=\"external\">made it clear</a> that async loading “is not something that Browserify will ever support.” If this is a feature that’s important to you, we recommend using Webpack instead.</p>\n\n<h3 id=\"Component-Naming-Conventions\"><a href=\"#Component-Naming-Conventions\" class=\"headerlink\" title=\"Component Naming Conventions\"></a>Component Naming Conventions</h3><p>When registering components (or props), you can use kebab-case, camelCase, or TitleCase. Vue doesn’t care.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in a component definition</span></div><div class=\"line\">components: &#123;</div><div class=\"line\">  <span class=\"comment\">// register using camelCase</span></div><div class=\"line\">  <span class=\"string\">'kebab-cased-component'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"string\">'camelCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"string\">'TitleCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Within HTML templates though, you have to use the kebab-case equivalents:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- alway use kebab-case in HTML templates --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kebab-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">kebab-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">camel-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">camel-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title-cased-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When using <em>string</em> templates however, we’re not bound by HTML’s case-insensitive restrictions. That means even in the template, you reference your components and props using camelCase, PascalCase, or kebab-case:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- use whatever you want in string templates! --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myComponent</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If your component isn’t passed content via <code>slot</code> elements, you can even make it self-closing with a <code>/</code> after the name:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>Again, this <em>only</em> works within string templates, as self-closing custom elements are not valid HTML and your browser’s native parser will not understand them.</p>\n<h3 id=\"Recursive-Component\"><a href=\"#Recursive-Component\" class=\"headerlink\" title=\"Recursive Component\"></a>Recursive Component</h3><p>Components can recursively invoke themselves in their own template. However, they can only do so with the <code>name</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">name: <span class=\"string\">'unique-name-of-my-component'</span></div></pre></td></tr></table></figure>\n<p>When you register a component globally using <code>Vue.component</code>, the global ID is automatically set as the component’s <code>name</code> option.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'unique-name-of-my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you’re not careful, recursive components can also lead to infinite loops:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">name: <span class=\"string\">'stack-overflow'</span>,</div><div class=\"line\"><span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</span></div></pre></td></tr></table></figure>\n<p>A component like the above will result in a “max stack size exceeded” error, so make sure recursive invocation is conditional (i.e. uses a <code>v-if</code> that will eventually be <code>false</code>).</p>\n<h3 id=\"Inline-Templates\"><a href=\"#Inline-Templates\" class=\"headerlink\" title=\"Inline Templates\"></a>Inline Templates</h3><p>When the <code>inline-template</code> special attribute is present on a child component, the component will use its inner content as its template, rather than treating it as distributed content. This allows more flexible template-authoring.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">inline-template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>These are compiled as the component's own template.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Not parent's transclusion content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, <code>inline-template</code> makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the <code>template</code> option or in a <code>template</code> element in a <code>.vue</code> file.</p>\n<h3 id=\"X-Templates\"><a href=\"#X-Templates\" class=\"headerlink\" title=\"X-Templates\"></a>X-Templates</h3><p>Another way to define templates is inside of a script element with the type <code>text/x-template</code>, then referencing the template by an id. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello-world-template\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello hello hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'hello-world'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'#hello-world-template'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</p>\n<h3 id=\"Cheap-Static-Components-with-v-once\"><a href=\"#Cheap-Static-Components-with-v-once\" class=\"headerlink\" title=\"Cheap Static Components with v-once\"></a>Cheap Static Components with <code>v-once</code></h3><p>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains <strong>a lot</strong> of static content. In these cases, you can ensure that it’s only evaluated once and then cached by adding the <code>v-once</code> directive to the root element, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'terms-of-service'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;div v-once&gt;\\</div><div class=\"line\">      &lt;h1&gt;Terms of Service&lt;/h1&gt;\\</div><div class=\"line\">      ... a lot of static content ...\\</div><div class=\"line\">    &lt;/div&gt;\\</div><div class=\"line\">  '</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"What-are-Components\"><a href=\"#What-are-Components\" class=\"headerlink\" title=\"What are Components?\"></a>What are Components?</h2><p>Components are one of the most powerful features of Vue. They help you extend basic HTML elements to encapsulate reusable code. At a high level, components are custom elements that Vue’s compiler attaches behavior to. In some cases, they may also appear as a native HTML element extended with the special <code>is</code> attribute.</p>\n<h2 id=\"Using-Components\"><a href=\"#Using-Components\" class=\"headerlink\" title=\"Using Components\"></a>Using Components</h2><h3 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h3><p>We’ve learned in the previous sections that we can create a new Vue instance with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#some-element'</span>,</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To register a global component, you can use <code>Vue.component(tagName, options)</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that Vue does not enforce the <a href=\"http://www.w3.org/TR/custom-elements/#concepts\">W3C rules</a> for custom tag names (all-lowercase, must contain a hyphen) though following this convention is considered good practice.</p>\n\n<p>Once registered, a component can be used in an instance’s template as a custom element, <code>&lt;my-component&gt;&lt;/my-component&gt;</code>. Make sure the component is registered <strong>before</strong> you instantiate the root Vue instance. Here’s the full example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create a root instance</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Which will render:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>A custom component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example\" class=\"demo\">\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\nnew Vue({ el: '#example' })\n</script>\n\n<h3 id=\"Local-Registration\"><a href=\"#Local-Registration\" class=\"headerlink\" title=\"Local Registration\"></a>Local Registration</h3><p>You don’t have to register every component globally. You can make a component available only in the scope of another instance/component by registering it with the <code>components</code> instance option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  components: &#123;</div><div class=\"line\">    <span class=\"comment\">// &lt;my-component&gt; will only be available in parent's template</span></div><div class=\"line\">    <span class=\"string\">'my-component'</span>: Child</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The same encapsulation applies for other registerable Vue features, such as directives.</p>\n<h3 id=\"DOM-Template-Parsing-Caveats\"><a href=\"#DOM-Template-Parsing-Caveats\" class=\"headerlink\" title=\"DOM Template Parsing Caveats\"></a>DOM Template Parsing Caveats</h3><p>When using the DOM as your template (e.g. using the <code>el</code> option to mount an element with existing content), you will be subject to some restrictions that are inherent to how HTML works, because Vue can only retrieve the template content <strong>after</strong> the browser has parsed and normalized it. Most notably, some elements such as <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;table&gt;</code> and <code>&lt;select&gt;</code> have restrictions on what elements can appear inside them, and some elements such as <code>&lt;option&gt;</code> can only appear inside certain other elements.</p>\n<p>This will lead to issues when using custom components with elements that have such restrictions, for example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-row</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">my-row</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The custom component <code>&lt;my-row&gt;</code> will be hoisted out as invalid content, thus causing errors in the eventual rendered output. A workaround is to use the <code>is</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>It should be noted that these limitations do not apply if you are using string templates from one of the following sources</strong>:</p>\n<ul>\n<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>\n<li>JavaScript inline template strings</li>\n<li><code>.vue</code> components</li>\n</ul>\n<p>Therefore, prefer using string templates whenever possible.</p>\n<h3 id=\"data-Must-Be-a-Function\"><a href=\"#data-Must-Be-a-Function\" class=\"headerlink\" title=\"data Must Be a Function\"></a><code>data</code> Must Be a Function</h3><p>Most of the options that can be passed into the Vue constructor can be used in a component, with one special case: <code>data</code> must be function. In fact, if you try this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then Vue will halt and emit warnings in the console, telling you that <code>data</code> must be a function for component instances. It’s good to understand why the rules exist though, so let’s cheat.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">simple-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">simple-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'simple-counter'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"counter += 1\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">  <span class=\"comment\">// data is technically a function, so Vue won't</span></div><div class=\"line\">  <span class=\"comment\">// complain, but we return the same object</span></div><div class=\"line\">  <span class=\"comment\">// reference for each component instance</span></div><div class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n  <simple-counter></simple-counter>\n</div>\n<script>\nvar data = { counter: 0 }\nVue.component('simple-counter', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return data\n  }\n})\nnew Vue({\n  el: '#example-2'\n})\n</script>\n\n<p>Since all three component instances share the same <code>data</code> object, incrementing one counter increments them all! Ouch. Let’s fix this by instead returning a fresh data object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now all our counters each have their own internal state:</p>\n\n<div id=\"example-2-5\" class=\"demo\">\n  <my-component></my-component>\n  <my-component></my-component>\n  <my-component></my-component>\n</div>\n<script>\nVue.component('my-component', {\n  template: '<button v-on:click=\"counter += 1\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  }\n})\nnew Vue({\n  el: '#example-2-5'\n})\n</script>\n\n<h3 id=\"Composing-Components\"><a href=\"#Composing-Components\" class=\"headerlink\" title=\"Composing Components\"></a>Composing Components</h3><p>Components are meant to be used together, most commonly in parent-child relationships: component A may use component B in its own template. They inevitably need to communicate to one another: the parent may need to pass data down to the child, and the child may need to inform the parent of something that happened in the child. However, it is also very important to keep the parent and the child as decoupled as possible via a clearly-defined interface. This ensures each component’s code can be written and reasoned about in relative isolation, thus making them more maintainable and potentially easier to reuse.</p>\n<p>In Vue.js, the parent-child component relationship can be summarized as <strong>props down, events up</strong>. The parent passes data down to the child via <strong>props</strong>, and the child sends messages to the parent via <strong>events</strong>. Let’s see how they work next.</p>\n<p style=\"text-align: center\"><br>  <img style=\"width:300px\" src=\"/images/props-events.png\" alt=\"props down, events up\"><br></p>\n\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><h3 id=\"Passing-Data-with-Props\"><a href=\"#Passing-Data-with-Props\" class=\"headerlink\" title=\"Passing Data with Props\"></a>Passing Data with Props</h3><p>Every component instance has its own <strong>isolated scope</strong>. This means you cannot (and should not) directly reference parent data in a child component’s template. Data can be passed down to child components using <strong>props</strong>.</p>\n<p>A prop is a custom attribute for passing information from parent components. A child component needs to explicitly declare the props it expects to receive using the <a href=\"../api/#props\"><code>props</code> option</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// declare the props</span></div><div class=\"line\">  props: [<span class=\"string\">'message'</span>],</div><div class=\"line\">  <span class=\"comment\">// just like data, the prop can be used inside templates</span></div><div class=\"line\">  <span class=\"comment\">// and is also made available in the vm as this.message</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then we can pass a plain string to it like so:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"prop-example-1\" class=\"demo\">\n  <child message=\"hello!\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#prop-example-1',\n  components: {\n    child: {\n      props: ['message'],\n      template: '<span>{{ message }}</span>'\n    }\n  }\n})\n</script>\n\n<h3 id=\"camelCase-vs-kebab-case\"><a href=\"#camelCase-vs-kebab-case\" class=\"headerlink\" title=\"camelCase vs. kebab-case\"></a>camelCase vs. kebab-case</h3><p>HTML attributes are case-insensitive, so when using non-string templates, camelCased prop names need to use their kebab-case (hyphen-delimited) equivalents:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// camelCase in JavaScript</span></div><div class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- kebab-case in HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">my-message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Again, if you’re using string templates, then this limitation does not apply.</p>\n<h3 id=\"Dynamic-Props\"><a href=\"#Dynamic-Props\" class=\"headerlink\" title=\"Dynamic Props\"></a>Dynamic Props</h3><p>Similar to binding a normal attribute to an expression, we can also use <code>v-bind</code> for dynamically binding props to data on the parent. Whenever the data is updated in the parent, it will also flow down to the child:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s often simpler to use the shorthand syntax for <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"demo-2\" class=\"demo\">\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n<script>\nnew Vue({\n  el: '#demo-2',\n  data: {\n    parentMsg: 'Message from parent'\n  },\n  components: {\n    child: {\n      props: ['myMessage'],\n      template: '<span>{{myMessage}}</span>'\n    }\n  }\n})\n</script>\n\n<h3 id=\"Literal-vs-Dynamic\"><a href=\"#Literal-vs-Dynamic\" class=\"headerlink\" title=\"Literal vs Dynamic\"></a>Literal vs Dynamic</h3><p>A common mistake beginners tend to make is attempting to pass down a number using the literal syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this passes down a plain string \"1\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, since this is a literal prop, its value is passed down as a plain string <code>&quot;1&quot;</code> instead of an actual number. If we want to pass down an actual JavaScript number, we need to use <code>v-bind</code> so that its value is evaluated as a JavaScript expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this passes down an actual number --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-bind:some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"One-Way-Data-Flow\"><a href=\"#One-Way-Data-Flow\" class=\"headerlink\" title=\"One-Way Data Flow\"></a>One-Way Data Flow</h3><p>All props form a <strong>one-way-down</strong> binding between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent’s state, which can make your app’s data flow harder to reason about.</p>\n<p>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should <strong>not</strong> attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console.</p>\n<p>There are usually two cases where it’s tempting to mutate a prop:</p>\n<ol>\n<li><p>The prop is used to only pass in an initial value, the child component simply wants to use it as a local data property afterwards;</p>\n</li>\n<li><p>The prop is passed in as a raw value that needs to be transformed.</p>\n</li>\n</ol>\n<p>The proper answer to these use cases are:</p>\n<ol>\n<li><p>Define a local data property that uses the prop’s initial value as its initial value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</div><div class=\"line\"><span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.initialCounter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Define a computed property that is computed from the prop’s value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'size'</span>],</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">normalizedSize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p class=\"tip\">Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child <strong>will</strong> affect parent state.</p>\n\n<h3 id=\"Prop-Validation\"><a href=\"#Prop-Validation\" class=\"headerlink\" title=\"Prop Validation\"></a>Prop Validation</h3><p>It is possible for a component to specify requirements for the props it is receiving. If a requirement is not met, Vue will emit warnings. This is especially useful when you are authoring a component that is intended to be used by others.</p>\n<p>Instead of defining the props as an array of strings, you can use an object with validation requirements:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// basic type check (`null` means accept any type)</span></div><div class=\"line\">    propA: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// multiple possible types</span></div><div class=\"line\">    propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</div><div class=\"line\">    <span class=\"comment\">// a required string</span></div><div class=\"line\">    propC: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// a number with default value</span></div><div class=\"line\">    propD: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">100</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// object/array defaults should be returned from a</span></div><div class=\"line\">    <span class=\"comment\">// factory function</span></div><div class=\"line\">    propE: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// custom validator function</span></div><div class=\"line\">    propF: &#123;</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt; <span class=\"number\">10</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The <code>type</code> can be one of the following native constructors:</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Function</li>\n<li>Object</li>\n<li>Array</li>\n</ul>\n<p>In addition, <code>type</code> can also be a custom constructor function and the assertion will be made with an <code>instanceof</code> check.</p>\n<p>When a prop validation fails, Vue will produce a console warning (if using the development build).</p>\n<h2 id=\"Custom-Events\"><a href=\"#Custom-Events\" class=\"headerlink\" title=\"Custom Events\"></a>Custom Events</h2><p>We have learned that the parent can pass data down to the child using props, but how do we communicate back to the parent when something happens? This is where Vue’s custom event system comes in.</p>\n<h3 id=\"Using-v-on-with-Custom-Events\"><a href=\"#Using-v-on-with-Custom-Events\" class=\"headerlink\" title=\"Using v-on with Custom Events\"></a>Using <code>v-on</code> with Custom Events</h3><p>Every Vue instance implements an <a href=\"../api/#Instance-Methods-Events\">events interface</a>, which means it can:</p>\n<ul>\n<li>Listen to an event using <code>$on(eventName)</code></li>\n<li>Trigger an event using <code>$emit(eventName)</code></li>\n</ul>\n<p class=\"tip\">Note that Vue’s event system is separate from the browser’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\">EventTarget API</a>. Though they work similarly, <code>$on</code> and <code>$emit</code> are <strong>not</strong> aliases for <code>addEventListener</code> and <code>dispatchEvent</code>.</p>\n\n<p>In addition, a parent component can listen to the events emitted from a child component using <code>v-on</code> directly in the template where the child component is used.</p>\n<p>Here’s an example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"counter-event-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;button v-on:click=\"increment\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increment'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#counter-event-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">total</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">incrementTotal</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.total += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"counter-event-example\" class=\"demo\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"increment\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n\n<p>In this example, it’s important to note that the child component is still completely decoupled from what happens outside of it. All it does is report information about its own activity, just in case a parent component might care.</p>\n<h4 id=\"Binding-Native-Events-to-Components\"><a href=\"#Binding-Native-Events-to-Components\" class=\"headerlink\" title=\"Binding Native Events to Components\"></a>Binding Native Events to Components</h4><p>There may be times when you want to listen for a native event on the root element of a component. In these cases, you can use the <code>.native</code> modifier for <code>v-on</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Form-Input-Components-using-Custom-Events\"><a href=\"#Form-Input-Components-using-Custom-Events\" class=\"headerlink\" title=\"Form Input Components using Custom Events\"></a>Form Input Components using Custom Events</h3><p>Custom events can also be used to create custom inputs that work with <code>v-model</code>. Remember:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"something\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>is just syntactic sugar for:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used with a component, this simplifies to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"something\"</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>So for a component to work with <code>v-model</code>, it must:</p>\n<ul>\n<li>accept a <code>value</code> prop</li>\n<li>emit an <code>input</code> event with the new value</li>\n</ul>\n<p>Let’s see it in action with a very simple currency input:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">currency-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"price\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">currency-input</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</div><div class=\"line\">    &lt;span&gt;\\</div><div class=\"line\">      $\\</div><div class=\"line\">      &lt;input\\</div><div class=\"line\">        ref=\"input\"\\</div><div class=\"line\">        v-bind:value=\"value\"\\</div><div class=\"line\">        v-on:input=\"updateValue($event.target.value)\"\\</div><div class=\"line\">      &gt;\\</div><div class=\"line\">    &lt;/span&gt;\\</div><div class=\"line\">  '</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'value'</span>],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// Instead of updating the value directly, this</span></div><div class=\"line\">    <span class=\"comment\">// method is used to format and place constraints</span></div><div class=\"line\">    <span class=\"comment\">// on the input's value</span></div><div class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</div><div class=\"line\">        <span class=\"comment\">// Remove whitespace on either side</span></div><div class=\"line\">        .trim()</div><div class=\"line\">        <span class=\"comment\">// Shorten to 2 decimal places</span></div><div class=\"line\">        .slice(<span class=\"number\">0</span>, value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span>)</div><div class=\"line\">      <span class=\"comment\">// If the value was not already normalized,</span></div><div class=\"line\">      <span class=\"comment\">// manually override it to conform</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// Emit the number value through the input event</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"currency-input-example\" class=\"demo\">\n  <currency-input v-model=\"price\"></currency-input>\n</div>\n<script>\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    updateValue: function (value) {\n      var formattedValue = value\n        .trim()\n        .slice(0, value.indexOf('.') + 3)\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\nnew Vue({ el: '#currency-input-example' })\n</script>\n\n<p>The implementation above is pretty naive though. For example, users are allowed to enter multiple periods and even letters sometimes - yuck! So for those that want to see a non-trivial example, here’s a more robust currency filter:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/result,html,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>The events interface can also be used to create more unusual inputs. For example, imagine these possibilities:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">voice-recognizer</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">voice-recognizer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-gesture-reader</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"gesture\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-gesture-reader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">webcam-retinal-scanner</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"retinalImage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">webcam-retinal-scanner</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Non-Parent-Child-Communication\"><a href=\"#Non-Parent-Child-Communication\" class=\"headerlink\" title=\"Non Parent-Child Communication\"></a>Non Parent-Child Communication</h3><p>Sometimes two components may need to communicate with one-another but they are not parent/child to each other. In simple scenarios, you can use an empty Vue instance as a central event bus:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component A's method</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in component B's created hook</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In more complex cases, you should consider employing a dedicated <a href=\"state-management.html\">state-management pattern</a>.</p>\n<h2 id=\"Content-Distribution-with-Slots\"><a href=\"#Content-Distribution-with-Slots\" class=\"headerlink\" title=\"Content Distribution with Slots\"></a>Content Distribution with Slots</h2><p>When using components, it is often desired to compose them like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>There are two things to note here:</p>\n<ol>\n<li><p>The <code>&lt;app&gt;</code> component does not know what content may be present inside its mount target. It is decided by whatever parent component that is using <code>&lt;app&gt;</code>.</p>\n</li>\n<li><p>The <code>&lt;app&gt;</code> component very likely has its own template.</p>\n</li>\n</ol>\n<p>To make the composition work, we need a way to interweave the parent “content” and the component’s own template. This is a process called <strong>content distribution</strong> (or “transclusion” if you are familiar with Angular). Vue.js implements a content distribution API that is modeled after the current <a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\">Web Components spec draft</a>, using the special <code>&lt;slot&gt;</code> element to serve as distribution outlets for the original content.</p>\n<h3 id=\"Compilation-Scope\"><a href=\"#Compilation-Scope\" class=\"headerlink\" title=\"Compilation Scope\"></a>Compilation Scope</h3><p>Before we dig into the API, let’s first clarify which scope the contents are compiled in. Imagine a template like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Should the <code>message</code> be bound to the parent’s data or the child data? The answer is the parent. A simple rule of thumb for component scope is:</p>\n<blockquote>\n<p>Everything in the parent template is compiled in parent scope; everything in the child template is compiled in child scope.</p>\n</blockquote>\n<p>A common mistake is trying to bind a directive to a child property/method in the parent template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- does NOT work --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"someChildProperty\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Assuming <code>someChildProperty</code> is a property on the child component, the example above would not work. The parent’s template is not aware of the state of a child component.</p>\n<p>If you need to bind child-scope directives on a component root node, you should do so in the child component’s own template:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// this does work, because we are in the right scope</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">someChildProperty</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Similarly, distributed content will be compiled in the parent scope.</p>\n<h3 id=\"Single-Slot\"><a href=\"#Single-Slot\" class=\"headerlink\" title=\"Single Slot\"></a>Single Slot</h3><p>Parent content will be <strong>discarded</strong> unless the child component template contains at least one <code>&lt;slot&gt;</code> outlet. When there is only one slot with no attributes, the entire content fragment will be inserted at its position in the DOM, replacing the slot itself.</p>\n<p>Anything originally inside the <code>&lt;slot&gt;</code> tags is considered <strong>fallback content</strong>. Fallback content is compiled in the child scope and will only be displayed if the hosting element is empty and has no content to be inserted.</p>\n<p>Suppose we have a component called <code>my-component</code> with the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>I'm the child title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    This will only be displayed if there is no content</div><div class=\"line\">    to be distributed.</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And a parent that uses the component:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm the parent title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some more original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered result will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm the parent title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>I'm the child title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is some more original content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Named-Slots\"><a href=\"#Named-Slots\" class=\"headerlink\" title=\"Named Slots\"></a>Named Slots</h3><p><code>&lt;slot&gt;</code> elements have a special attribute, <code>name</code>, which can be used to further customize how content should be distributed. You can have multiple slots with different names. A named slot will match any element that has a corresponding <code>slot</code> attribute in the content fragment.</p>\n<p>There can still be one unnamed slot, which is the <strong>default slot</strong> that serves as a catch-all outlet for any unmatched content. If there is no default slot, unmatched content will be discarded.</p>\n<p>For example, suppose we have an <code>app-layout</code> component with the following template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Parent markup:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-layout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The rendered result will be:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The content distribution API is a very useful mechanism when designing components that are meant to be composed together.</p>\n<h2 id=\"Dynamic-Components\"><a href=\"#Dynamic-Components\" class=\"headerlink\" title=\"Dynamic Components\"></a>Dynamic Components</h2><p>You can use the same mount point and dynamically switch between multiple components using the reserved <code>&lt;component&gt;</code> element and dynamically bind to its <code>is</code> attribute:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentView</span>: <span class=\"string\">'home'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">    <span class=\"attr\">posts</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">    <span class=\"attr\">archive</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- component changes when vm.currentView changes! --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you prefer, you can also bind directly to component objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentView</span>: Home</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a><code>keep-alive</code></h3><p>If you want to keep the switched-out components in memory so that you can preserve their state or avoid re-rendering, you can wrap a dynamic component in a <code>&lt;keep-alive&gt;</code> element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- inactive components will be cached! --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Check out more details on <code>&lt;keep-alive&gt;</code> in the <a href=\"../api/#keep-alive\">API reference</a>.</p>\n<h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><h3 id=\"Authoring-Reusable-Components\"><a href=\"#Authoring-Reusable-Components\" class=\"headerlink\" title=\"Authoring Reusable Components\"></a>Authoring Reusable Components</h3><p>When authoring components, it’s good to keep in mind whether you intend to reuse it somewhere else later. It’s OK for one-off components to be tightly coupled, but reusable components should define a clean public interface and make no assumptions about the context it’s used in.</p>\n<p>The API for a Vue component comes in three parts - props, events, and slots:</p>\n<ul>\n<li><p><strong>Props</strong> allow the external environment to pass data into the component</p>\n</li>\n<li><p><strong>Events</strong> allow the component to trigger side effects in the external environment</p>\n</li>\n<li><p><strong>Slots</strong> allow the external environment to compose the component with extra content.</p>\n</li>\n</ul>\n<p>With the dedicated shorthand syntaxes for <code>v-bind</code> and <code>v-on</code>, the intents can be clearly and succinctly conveyed in the template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></div><div class=\"line\">  <span class=\"attr\">:foo</span>=<span class=\"string\">\"baz\"</span></div><div class=\"line\">  <span class=\"attr\">:bar</span>=<span class=\"string\">\"qux\"</span></div><div class=\"line\">  @<span class=\"attr\">event-a</span>=<span class=\"string\">\"doThis\"</span></div><div class=\"line\">  @<span class=\"attr\">event-b</span>=<span class=\"string\">\"doThat\"</span></div><div class=\"line\">&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Child-Component-Refs\"><a href=\"#Child-Component-Refs\" class=\"headerlink\" title=\"Child Component Refs\"></a>Child Component Refs</h3><p>Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you have to assign a reference ID to the child component using <code>ref</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">user-profile</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"profile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-profile</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Vue(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#parent'</span> &#125;)</div><div class=\"line\"><span class=\"comment\">// access child component instance</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = parent.$refs.profile</div></pre></td></tr></table></figure>\n<p>When <code>ref</code> is used together with <code>v-for</code>, the ref you get will be an array or an object containing the child components mirroring the data source.</p>\n<p class=\"tip\"><code>$refs</code> are only populated after the component has been rendered, and it is not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid using <code>$refs</code> in templates or computed properties.</p>\n\n<h3 id=\"Async-Components\"><a href=\"#Async-Components\" class=\"headerlink\" title=\"Async Components\"></a>Async Components</h3><p>In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it’s actually needed. To make that easier, Vue allows you to define your component as a factory function that asynchronously resolves your component definition. Vue will only trigger the factory function when the component actually needs to be rendered and will cache the result for future re-renders. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    resolve(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The factory function receives a <code>resolve</code> callback, which should be called when you have retrieved your component definition from the server. You can also call <code>reject(reason)</code> to indicate the load has failed. The <code>setTimeout</code> here is simply for demonstration; How to retrieve the component is entirely up to you. One recommended approach is to use async components together with <a href=\"http://webpack.github.io/docs/code-splitting.html\">Webpack’s code-splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// This special require syntax will instruct Webpack to</span></div><div class=\"line\">  <span class=\"comment\">// automatically split your built code into bundles which</span></div><div class=\"line\">  <span class=\"comment\">// are loaded over Ajax requests.</span></div><div class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You can also return a <code>Promise</code> in the resolve function, so with Webpack 2 + ES2015 syntax you can do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(</div><div class=\"line\">  <span class=\"string\">'async-webpack-example'</span>,</div><div class=\"line\">  () =&gt; System.import(<span class=\"string\">'./my-async-component'</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p class=\"tip\">If you’re a <strong>Browserify</strong> user that would like to use async components, it’s unfortunately not possible and probably never will be, as its creator has <a href=\"https://github.com/substack/node-browserify/issues/58#issuecomment-21978224\">made it clear</a> that async loading “is not something that Browserify will ever support.” If this is a feature that’s important to you, we recommend using Webpack instead.</p>\n\n<h3 id=\"Component-Naming-Conventions\"><a href=\"#Component-Naming-Conventions\" class=\"headerlink\" title=\"Component Naming Conventions\"></a>Component Naming Conventions</h3><p>When registering components (or props), you can use kebab-case, camelCase, or TitleCase. Vue doesn’t care.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in a component definition</span></div><div class=\"line\">components: &#123;</div><div class=\"line\">  <span class=\"comment\">// register using camelCase</span></div><div class=\"line\">  <span class=\"string\">'kebab-cased-component'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"string\">'camelCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"string\">'TitleCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Within HTML templates though, you have to use the kebab-case equivalents:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- alway use kebab-case in HTML templates --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kebab-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">kebab-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">camel-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">camel-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title-cased-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When using <em>string</em> templates however, we’re not bound by HTML’s case-insensitive restrictions. That means even in the template, you reference your components and props using camelCase, PascalCase, or kebab-case:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- use whatever you want in string templates! --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myComponent</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If your component isn’t passed content via <code>slot</code> elements, you can even make it self-closing with a <code>/</code> after the name:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>Again, this <em>only</em> works within string templates, as self-closing custom elements are not valid HTML and your browser’s native parser will not understand them.</p>\n<h3 id=\"Recursive-Component\"><a href=\"#Recursive-Component\" class=\"headerlink\" title=\"Recursive Component\"></a>Recursive Component</h3><p>Components can recursively invoke themselves in their own template. However, they can only do so with the <code>name</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">name: <span class=\"string\">'unique-name-of-my-component'</span></div></pre></td></tr></table></figure>\n<p>When you register a component globally using <code>Vue.component</code>, the global ID is automatically set as the component’s <code>name</code> option.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'unique-name-of-my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you’re not careful, recursive components can also lead to infinite loops:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">name: <span class=\"string\">'stack-overflow'</span>,</div><div class=\"line\"><span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</span></div></pre></td></tr></table></figure>\n<p>A component like the above will result in a “max stack size exceeded” error, so make sure recursive invocation is conditional (i.e. uses a <code>v-if</code> that will eventually be <code>false</code>).</p>\n<h3 id=\"Inline-Templates\"><a href=\"#Inline-Templates\" class=\"headerlink\" title=\"Inline Templates\"></a>Inline Templates</h3><p>When the <code>inline-template</code> special attribute is present on a child component, the component will use its inner content as its template, rather than treating it as distributed content. This allows more flexible template-authoring.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">inline-template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>These are compiled as the component's own template.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Not parent's transclusion content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, <code>inline-template</code> makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the <code>template</code> option or in a <code>template</code> element in a <code>.vue</code> file.</p>\n<h3 id=\"X-Templates\"><a href=\"#X-Templates\" class=\"headerlink\" title=\"X-Templates\"></a>X-Templates</h3><p>Another way to define templates is inside of a script element with the type <code>text/x-template</code>, then referencing the template by an id. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello-world-template\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello hello hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'hello-world'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'#hello-world-template'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</p>\n<h3 id=\"Cheap-Static-Components-with-v-once\"><a href=\"#Cheap-Static-Components-with-v-once\" class=\"headerlink\" title=\"Cheap Static Components with v-once\"></a>Cheap Static Components with <code>v-once</code></h3><p>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains <strong>a lot</strong> of static content. In these cases, you can ensure that it’s only evaluated once and then cached by adding the <code>v-once</code> directive to the root element, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'terms-of-service'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</div><div class=\"line\">    &lt;div v-once&gt;\\</div><div class=\"line\">      &lt;h1&gt;Terms of Service&lt;/h1&gt;\\</div><div class=\"line\">      ... a lot of static content ...\\</div><div class=\"line\">    &lt;/div&gt;\\</div><div class=\"line\">  '</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Event Handling","type":"guide","order":9,"_content":"\n## Listening to Events\n\nWe can use the `v-on` directive to listen to DOM events and run some JavaScript when they're triggered.\n\nFor example:\n\n``` html\n<div id=\"example-1\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n```\n``` js\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n</script>\n{% endraw %}\n\n## Method Event Handlers\n\nThe logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the `v-on` attribute simply isn't feasible. That's why `v-on` can also accept the name of a method you'd like to call.\n\nFor example:\n\n``` html\n<div id=\"example-2\">\n  <!-- `greet` is the name of a method defined below -->\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n```\n\n``` js\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  // define methods under the `methods` object\n  methods: {\n    greet: function (event) {\n      // `this` inside methods points to the Vue instance\n      alert('Hello ' + this.name + '!')\n      // `event` is the native DOM event\n      alert(event.target.tagName)\n    }\n  }\n})\n\n// you can invoke methods in JavaScript too\nexample2.greet() // -> 'Hello Vue.js!'\n```\n\nResult:\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  methods: {\n    greet: function (event) {\n      alert('Hello ' + this.name + '!')\n      alert(event.target.tagName)\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Methods in Inline Handlers\n\nInstead of binding directly to a method name, we can also use methods in an inline JavaScript statement:\n\n``` html\n<div id=\"example-3\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n```\n``` js\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n```\n\nResult:\n{% raw %}\n<div id=\"example-3\" class=\"demo\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n{% endraw %}\n\nSometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special `$event` variable:\n\n``` html\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">Submit</button>\n```\n\n``` js\n// ...\nmethods: {\n  warn: function (message, event) {\n    // now we have access to the native event\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}\n```\n\n## Event Modifiers\n\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n\n``` html\n<!-- the click event's propagation will be stopped -->\n<a v-on:click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form v-on:submit.prevent></form>\n\n<!-- use capture mode when adding the event listener -->\n<div v-on:click.capture=\"doThis\">...</div>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n## Key Modifiers\n\nWhen listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for `v-on` when listening for key events:\n\n``` html\n<!-- only call vm.submit() when the keyCode is 13 -->\n<input v-on:keyup.13=\"submit\">\n```\n\nRemembering all the keyCodes is a hassle, so Vue provides aliases for the most commonly used keys:\n\n``` html\n<!-- same as above -->\n<input v-on:keyup.enter=\"submit\">\n\n<!-- also works for shorthand -->\n<input @keyup.enter=\"submit\">\n```\n\nHere's the full list of key modifier aliases:\n\n- enter\n- tab\n- delete (captures both \"Delete\" and \"Backspace\" keys)\n- esc\n- space\n- up\n- down\n- left\n- right\n\nYou can also [define custom key modifier aliases](../api/#keyCodes) via the global `config.keyCodes` object:\n\n``` js\n// enable v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n\n## Why Listeners in HTML?\n\nYou might be concerned that this whole event listening approach violates the good old rules about \"separation of concerns\". Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that's handling the current view, it won't cause any maintenance difficulty. In fact, there are several benefits in using `v-on`:\n\n1. It's easier to locate the handler function implementations within your JS code by simply skimming the HTML template.\n\n2. Since you don't have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.\n\n3. When a ViewModel is destroyed, all event listeners are automatically removed. You don't need to worry about cleaning it up yourself.\n","source":"v2/guide/events.md","raw":"---\ntitle: Event Handling\ntype: guide\norder: 9\n---\n\n## Listening to Events\n\nWe can use the `v-on` directive to listen to DOM events and run some JavaScript when they're triggered.\n\nFor example:\n\n``` html\n<div id=\"example-1\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n```\n``` js\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n</script>\n{% endraw %}\n\n## Method Event Handlers\n\nThe logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the `v-on` attribute simply isn't feasible. That's why `v-on` can also accept the name of a method you'd like to call.\n\nFor example:\n\n``` html\n<div id=\"example-2\">\n  <!-- `greet` is the name of a method defined below -->\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n```\n\n``` js\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  // define methods under the `methods` object\n  methods: {\n    greet: function (event) {\n      // `this` inside methods points to the Vue instance\n      alert('Hello ' + this.name + '!')\n      // `event` is the native DOM event\n      alert(event.target.tagName)\n    }\n  }\n})\n\n// you can invoke methods in JavaScript too\nexample2.greet() // -> 'Hello Vue.js!'\n```\n\nResult:\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  methods: {\n    greet: function (event) {\n      alert('Hello ' + this.name + '!')\n      alert(event.target.tagName)\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Methods in Inline Handlers\n\nInstead of binding directly to a method name, we can also use methods in an inline JavaScript statement:\n\n``` html\n<div id=\"example-3\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n```\n``` js\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n```\n\nResult:\n{% raw %}\n<div id=\"example-3\" class=\"demo\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n{% endraw %}\n\nSometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special `$event` variable:\n\n``` html\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">Submit</button>\n```\n\n``` js\n// ...\nmethods: {\n  warn: function (message, event) {\n    // now we have access to the native event\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}\n```\n\n## Event Modifiers\n\nIt is a very common need to call `event.preventDefault()` or `event.stopPropagation()` inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides **event modifiers** for `v-on`. Recall that modifiers are directive postfixes denoted by a dot.\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n\n``` html\n<!-- the click event's propagation will be stopped -->\n<a v-on:click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form v-on:submit.prevent></form>\n\n<!-- use capture mode when adding the event listener -->\n<div v-on:click.capture=\"doThis\">...</div>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n## Key Modifiers\n\nWhen listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for `v-on` when listening for key events:\n\n``` html\n<!-- only call vm.submit() when the keyCode is 13 -->\n<input v-on:keyup.13=\"submit\">\n```\n\nRemembering all the keyCodes is a hassle, so Vue provides aliases for the most commonly used keys:\n\n``` html\n<!-- same as above -->\n<input v-on:keyup.enter=\"submit\">\n\n<!-- also works for shorthand -->\n<input @keyup.enter=\"submit\">\n```\n\nHere's the full list of key modifier aliases:\n\n- enter\n- tab\n- delete (captures both \"Delete\" and \"Backspace\" keys)\n- esc\n- space\n- up\n- down\n- left\n- right\n\nYou can also [define custom key modifier aliases](../api/#keyCodes) via the global `config.keyCodes` object:\n\n``` js\n// enable v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n\n## Why Listeners in HTML?\n\nYou might be concerned that this whole event listening approach violates the good old rules about \"separation of concerns\". Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that's handling the current view, it won't cause any maintenance difficulty. In fact, there are several benefits in using `v-on`:\n\n1. It's easier to locate the handler function implementations within your JS code by simply skimming the HTML template.\n\n2. Since you don't have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.\n\n3. When a ViewModel is destroyed, all event listeners are automatically removed. You don't need to worry about cleaning it up yourself.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/events.html","comments":1,"layout":"page","_id":"civ8jcjoj000x91m1z6yj4fee","content":"<h2 id=\"Listening-to-Events\"><a href=\"#Listening-to-Events\" class=\"headerlink\" title=\"Listening to Events\"></a>Listening to Events</h2><p>We can use the <code>v-on</code> directive to listen to DOM events and run some JavaScript when they’re triggered.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example-1\" class=\"demo\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n</script>\n\n<h2 id=\"Method-Event-Handlers\"><a href=\"#Method-Event-Handlers\" class=\"headerlink\" title=\"Method Event Handlers\"></a>Method Event Handlers</h2><p>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the <code>v-on</code> attribute simply isn’t feasible. That’s why <code>v-on</code> can also accept the name of a method you’d like to call.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- `greet` is the name of a method defined below --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"greet\"</span>&gt;</span>Greet<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'Vue.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// define methods under the `methods` object</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// `this` inside methods points to the Vue instance</span></div><div class=\"line\">      alert(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>)</div><div class=\"line\">      <span class=\"comment\">// `event` is the native DOM event</span></div><div class=\"line\">      alert(event.target.tagName)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can invoke methods in JavaScript too</span></div><div class=\"line\">example2.greet() <span class=\"comment\">// -&gt; 'Hello Vue.js!'</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example-2\" class=\"demo\">\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  methods: {\n    greet: function (event) {\n      alert('Hello ' + this.name + '!')\n      alert(event.target.tagName)\n    }\n  }\n})\n</script>\n\n<h2 id=\"Methods-in-Inline-Handlers\"><a href=\"#Methods-in-Inline-Handlers\" class=\"headerlink\" title=\"Methods in Inline Handlers\"></a>Methods in Inline Handlers</h2><p>Instead of binding directly to a method name, we can also use methods in an inline JavaScript statement:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('hi')\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('what')\"</span>&gt;</span>Say what<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-3'</span>,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">      alert(message)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:<br>\n<div id=\"example-3\" class=\"demo\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n</p>\n<p>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special <code>$event</code> variable:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">warn</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// now we have access to the native event</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (event) event.preventDefault()</div><div class=\"line\">    alert(message)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Event-Modifiers\"><a href=\"#Event-Modifiers\" class=\"headerlink\" title=\"Event Modifiers\"></a>Event Modifiers</h2><p>It is a very common need to call <code>event.preventDefault()</code> or <code>event.stopPropagation()</code> inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.</p>\n<p>To address this problem, Vue provides <strong>event modifiers</strong> for <code>v-on</code>. Recall that modifiers are directive postfixes denoted by a dot.</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- the click event's propagation will be stopped --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- the submit event will no longer reload the page --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- modifiers can be chained --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- just the modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- use capture mode when adding the event listener --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- i.e. not from a child element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Key-Modifiers\"><a href=\"#Key-Modifiers\" class=\"headerlink\" title=\"Key Modifiers\"></a>Key Modifiers</h2><p>When listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for <code>v-on</code> when listening for key events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- only call vm.submit() when the keyCode is 13 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Remembering all the keyCodes is a hassle, so Vue provides aliases for the most commonly used keys:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- same as above --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- also works for shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here’s the full list of key modifier aliases:</p>\n<ul>\n<li>enter</li>\n<li>tab</li>\n<li>delete (captures both “Delete” and “Backspace” keys)</li>\n<li>esc</li>\n<li>space</li>\n<li>up</li>\n<li>down</li>\n<li>left</li>\n<li>right</li>\n</ul>\n<p>You can also <a href=\"../api/#keyCodes\">define custom key modifier aliases</a> via the global <code>config.keyCodes</code> object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// enable v-on:keyup.f1</span></div><div class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></div></pre></td></tr></table></figure>\n<h2 id=\"Why-Listeners-in-HTML\"><a href=\"#Why-Listeners-in-HTML\" class=\"headerlink\" title=\"Why Listeners in HTML?\"></a>Why Listeners in HTML?</h2><p>You might be concerned that this whole event listening approach violates the good old rules about “separation of concerns”. Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that’s handling the current view, it won’t cause any maintenance difficulty. In fact, there are several benefits in using <code>v-on</code>:</p>\n<ol>\n<li><p>It’s easier to locate the handler function implementations within your JS code by simply skimming the HTML template.</p>\n</li>\n<li><p>Since you don’t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</p>\n</li>\n<li><p>When a ViewModel is destroyed, all event listeners are automatically removed. You don’t need to worry about cleaning it up yourself.</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Listening-to-Events\"><a href=\"#Listening-to-Events\" class=\"headerlink\" title=\"Listening to Events\"></a>Listening to Events</h2><p>We can use the <code>v-on</code> directive to listen to DOM events and run some JavaScript when they’re triggered.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example-1\" class=\"demo\">\n  <button v-on:click=\"counter += 1\">Add 1</button>\n  <p>The button above has been clicked {{ counter }} times.</p>\n</div>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})\n</script>\n\n<h2 id=\"Method-Event-Handlers\"><a href=\"#Method-Event-Handlers\" class=\"headerlink\" title=\"Method Event Handlers\"></a>Method Event Handlers</h2><p>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the <code>v-on</code> attribute simply isn’t feasible. That’s why <code>v-on</code> can also accept the name of a method you’d like to call.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- `greet` is the name of a method defined below --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"greet\"</span>&gt;</span>Greet<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'Vue.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// define methods under the `methods` object</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">greet</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// `this` inside methods points to the Vue instance</span></div><div class=\"line\">      alert(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>)</div><div class=\"line\">      <span class=\"comment\">// `event` is the native DOM event</span></div><div class=\"line\">      alert(event.target.tagName)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can invoke methods in JavaScript too</span></div><div class=\"line\">example2.greet() <span class=\"comment\">// -&gt; 'Hello Vue.js!'</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"example-2\" class=\"demo\">\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  methods: {\n    greet: function (event) {\n      alert('Hello ' + this.name + '!')\n      alert(event.target.tagName)\n    }\n  }\n})\n</script>\n\n<h2 id=\"Methods-in-Inline-Handlers\"><a href=\"#Methods-in-Inline-Handlers\" class=\"headerlink\" title=\"Methods in Inline Handlers\"></a>Methods in Inline Handlers</h2><p>Instead of binding directly to a method name, we can also use methods in an inline JavaScript statement:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('hi')\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('what')\"</span>&gt;</span>Say what<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-3'</span>,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">      alert(message)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:<br>\n<div id=\"example-3\" class=\"demo\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n</p>\n<p>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special <code>$event</code> variable:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">warn</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// now we have access to the native event</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (event) event.preventDefault()</div><div class=\"line\">    alert(message)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Event-Modifiers\"><a href=\"#Event-Modifiers\" class=\"headerlink\" title=\"Event Modifiers\"></a>Event Modifiers</h2><p>It is a very common need to call <code>event.preventDefault()</code> or <code>event.stopPropagation()</code> inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.</p>\n<p>To address this problem, Vue provides <strong>event modifiers</strong> for <code>v-on</code>. Recall that modifiers are directive postfixes denoted by a dot.</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- the click event's propagation will be stopped --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- the submit event will no longer reload the page --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- modifiers can be chained --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- just the modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- use capture mode when adding the event listener --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- i.e. not from a child element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Key-Modifiers\"><a href=\"#Key-Modifiers\" class=\"headerlink\" title=\"Key Modifiers\"></a>Key Modifiers</h2><p>When listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for <code>v-on</code> when listening for key events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- only call vm.submit() when the keyCode is 13 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Remembering all the keyCodes is a hassle, so Vue provides aliases for the most commonly used keys:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- same as above --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- also works for shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here’s the full list of key modifier aliases:</p>\n<ul>\n<li>enter</li>\n<li>tab</li>\n<li>delete (captures both “Delete” and “Backspace” keys)</li>\n<li>esc</li>\n<li>space</li>\n<li>up</li>\n<li>down</li>\n<li>left</li>\n<li>right</li>\n</ul>\n<p>You can also <a href=\"../api/#keyCodes\">define custom key modifier aliases</a> via the global <code>config.keyCodes</code> object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// enable v-on:keyup.f1</span></div><div class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></div></pre></td></tr></table></figure>\n<h2 id=\"Why-Listeners-in-HTML\"><a href=\"#Why-Listeners-in-HTML\" class=\"headerlink\" title=\"Why Listeners in HTML?\"></a>Why Listeners in HTML?</h2><p>You might be concerned that this whole event listening approach violates the good old rules about “separation of concerns”. Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that’s handling the current view, it won’t cause any maintenance difficulty. In fact, there are several benefits in using <code>v-on</code>:</p>\n<ol>\n<li><p>It’s easier to locate the handler function implementations within your JS code by simply skimming the HTML template.</p>\n</li>\n<li><p>Since you don’t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</p>\n</li>\n<li><p>When a ViewModel is destroyed, all event listeners are automatically removed. You don’t need to worry about cleaning it up yourself.</p>\n</li>\n</ol>\n"},{"title":"Form Input Bindings","type":"guide","order":10,"_content":"\n## Basic Usage\n\nYou can use the `v-model` directive to create two-way data bindings on form input and textarea elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, `v-model` is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.\n\n<p class=\"tip\">`v-model` doesn't care about the initial value provided to an input or a textarea. It will always treat the Vue instance data as the source of truth.</p>\n\n### Text\n\n``` html\n<input v-model=\"message\" placeholder=\"edit me\">\n<p>Message is: {{ message }}</p>\n```\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {{ message }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    message: ''\n  }\n})\n</script>\n{% endraw %}\n\n### Multiline text\n\n``` html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre\">{{ message }}</p>\n<br>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\n{% raw %}\n<div id=\"example-textarea\" class=\"demo\">\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre\">{{ message }}</p>\n  <br>\n  <textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n</div>\n<script>\nnew Vue({\n  el: '#example-textarea',\n  data: {\n    message: ''\n  }\n})\n</script>\n{% endraw %}\n\n\n{% raw %}\n<p class=\"tip\">Interpolation on textareas (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) won't work. Use <code>v-model</code> instead.</p>\n{% endraw %}\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n``` html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n<label for=\"checkbox\">{{ checked }}</label>\n```\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{{ checked }}</label>\n</div>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    checked: false\n  }\n})\n</script>\n{% endraw %}\n\nMultiple checkboxes, bound to the same Array:\n\n``` html\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n<br>\n<span>Checked names: {{ checkedNames }}</span>\n```\n\n``` js\nnew Vue({\n  el: '...',\n  data: {\n    checkedNames: []\n  }\n})\n```\n\n{% raw %}\n<div id=\"example-3\" class=\"demo\">\n  <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n  <label for=\"jack\">Jack</label>\n  <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n  <label for=\"john\">John</label>\n  <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n  <label for=\"mike\">Mike</label>\n  <br>\n  <span>Checked names: {{ checkedNames }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    checkedNames: []\n  }\n})\n</script>\n{% endraw %}\n\n### Radio\n\n\n``` html\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n{% raw %}\n<div id=\"example-4\" class=\"demo\">\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {{ picked }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    picked: ''\n  }\n})\n</script>\n{% endraw %}\n\n### Select\n\nSingle select:\n\n``` html\n<select v-model=\"selected\">\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n{% raw %}\n<div id=\"example-5\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    selected: null\n  }\n})\n</script>\n{% endraw %}\n\nMultiple select (bound to Array):\n\n``` html\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ selected }}</span>\n```\n{% raw %}\n<div id=\"example-6\" class=\"demo\">\n  <select v-model=\"selected\" multiple style=\"width: 50px\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-6',\n  data: {\n    selected: []\n  }\n})\n</script>\n{% endraw %}\n\nDynamic options rendered with `v-for`:\n\n``` html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" v-bind:value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n``` js\nnew Vue({\n  el: '...',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"example-7\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option v-for=\"option in options\" v-bind:value=\"option.value\">\n      {{ option.text }}\n    </option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-7',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\n## Value Bindings\n\nFor radio, checkbox and select options, the `v-model` binding values are usually static strings (or booleans for checkbox):\n\n``` html\n<!-- `picked` is a string \"a\" when checked -->\n<input type=\"radio\" v-model=\"picked\" value=\"a\">\n\n<!-- `toggle` is either true or false -->\n<input type=\"checkbox\" v-model=\"toggle\">\n\n<!-- `selected` is a string \"abc\" when selected -->\n<select v-model=\"selected\">\n  <option value=\"abc\">ABC</option>\n</select>\n```\n\nBut sometimes we may want to bind the value to a dynamic property on the Vue instance. We can use `v-bind` to achieve that. In addition, using `v-bind` allows us to bind the input value to non-string values.\n\n### Checkbox\n\n``` html\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\"\n>\n```\n\n``` js\n// when checked:\nvm.toggle === vm.a\n// when unchecked:\nvm.toggle === vm.b\n```\n\n### Radio\n\n``` html\n<input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\">\n```\n\n``` js\n// when checked:\nvm.pick === vm.a\n```\n\n### Select Options\n\n``` html\n<select v-model=\"selected\">\n  <!-- inline object literal -->\n  <option v-bind:value=\"{ number: 123 }\">123</option>\n</select>\n```\n\n``` js\n// when selected:\ntypeof vm.selected // -> 'object'\nvm.selected.number // -> 123\n```\n\n## Modifiers\n\n### `.lazy`\n\nBy default, `v-model` syncs the input with the data after each `input` event. You can add the `lazy` modifier to instead sync after `change` events:\n\n``` html\n<!-- synced after \"change\" instead of \"input\" -->\n<input v-model.lazy=\"msg\" >\n```\n\n### `.number`\n\nIf you want user input to be automatically typecast as a number, you can add the `number` modifier to your `v-model` managed inputs:\n\n``` html\n<input v-model.number=\"age\" type=\"number\">\n```\n\nThis is often useful, because even with `type=\"number\"`, the value of HTML input elements always returns a string.\n\n### `.trim`\n\nIf you want user input to be trimmed automatically, you can add the `trim` modifier to your `v-model` managed inputs:\n\n```html\n<input v-model.trim=\"msg\">\n```\n\n## `v-model` with Components\n\n> If you're not yet familiar with Vue's components, just skip this for now.\n\nHTML's built-in input types won't always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with `v-model`! To learn more, read about [custom inputs](components.html#Form-Input-Components-using-Custom-Events) in the Components guide.\n\n\n\n\n\n\n\n","source":"v2/guide/forms.md","raw":"---\ntitle: Form Input Bindings\ntype: guide\norder: 10\n---\n\n## Basic Usage\n\nYou can use the `v-model` directive to create two-way data bindings on form input and textarea elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, `v-model` is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.\n\n<p class=\"tip\">`v-model` doesn't care about the initial value provided to an input or a textarea. It will always treat the Vue instance data as the source of truth.</p>\n\n### Text\n\n``` html\n<input v-model=\"message\" placeholder=\"edit me\">\n<p>Message is: {{ message }}</p>\n```\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {{ message }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    message: ''\n  }\n})\n</script>\n{% endraw %}\n\n### Multiline text\n\n``` html\n<span>Multiline message is:</span>\n<p style=\"white-space: pre\">{{ message }}</p>\n<br>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n```\n\n{% raw %}\n<div id=\"example-textarea\" class=\"demo\">\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre\">{{ message }}</p>\n  <br>\n  <textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n</div>\n<script>\nnew Vue({\n  el: '#example-textarea',\n  data: {\n    message: ''\n  }\n})\n</script>\n{% endraw %}\n\n\n{% raw %}\n<p class=\"tip\">Interpolation on textareas (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) won't work. Use <code>v-model</code> instead.</p>\n{% endraw %}\n\n### Checkbox\n\nSingle checkbox, boolean value:\n\n``` html\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n<label for=\"checkbox\">{{ checked }}</label>\n```\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{{ checked }}</label>\n</div>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    checked: false\n  }\n})\n</script>\n{% endraw %}\n\nMultiple checkboxes, bound to the same Array:\n\n``` html\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n<br>\n<span>Checked names: {{ checkedNames }}</span>\n```\n\n``` js\nnew Vue({\n  el: '...',\n  data: {\n    checkedNames: []\n  }\n})\n```\n\n{% raw %}\n<div id=\"example-3\" class=\"demo\">\n  <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n  <label for=\"jack\">Jack</label>\n  <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n  <label for=\"john\">John</label>\n  <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n  <label for=\"mike\">Mike</label>\n  <br>\n  <span>Checked names: {{ checkedNames }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    checkedNames: []\n  }\n})\n</script>\n{% endraw %}\n\n### Radio\n\n\n``` html\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n{% raw %}\n<div id=\"example-4\" class=\"demo\">\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {{ picked }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    picked: ''\n  }\n})\n</script>\n{% endraw %}\n\n### Select\n\nSingle select:\n\n``` html\n<select v-model=\"selected\">\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n{% raw %}\n<div id=\"example-5\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    selected: null\n  }\n})\n</script>\n{% endraw %}\n\nMultiple select (bound to Array):\n\n``` html\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ selected }}</span>\n```\n{% raw %}\n<div id=\"example-6\" class=\"demo\">\n  <select v-model=\"selected\" multiple style=\"width: 50px\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-6',\n  data: {\n    selected: []\n  }\n})\n</script>\n{% endraw %}\n\nDynamic options rendered with `v-for`:\n\n``` html\n<select v-model=\"selected\">\n  <option v-for=\"option in options\" v-bind:value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n<span>Selected: {{ selected }}</span>\n```\n``` js\nnew Vue({\n  el: '...',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"example-7\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option v-for=\"option in options\" v-bind:value=\"option.value\">\n      {{ option.text }}\n    </option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-7',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\n## Value Bindings\n\nFor radio, checkbox and select options, the `v-model` binding values are usually static strings (or booleans for checkbox):\n\n``` html\n<!-- `picked` is a string \"a\" when checked -->\n<input type=\"radio\" v-model=\"picked\" value=\"a\">\n\n<!-- `toggle` is either true or false -->\n<input type=\"checkbox\" v-model=\"toggle\">\n\n<!-- `selected` is a string \"abc\" when selected -->\n<select v-model=\"selected\">\n  <option value=\"abc\">ABC</option>\n</select>\n```\n\nBut sometimes we may want to bind the value to a dynamic property on the Vue instance. We can use `v-bind` to achieve that. In addition, using `v-bind` allows us to bind the input value to non-string values.\n\n### Checkbox\n\n``` html\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\"\n>\n```\n\n``` js\n// when checked:\nvm.toggle === vm.a\n// when unchecked:\nvm.toggle === vm.b\n```\n\n### Radio\n\n``` html\n<input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\">\n```\n\n``` js\n// when checked:\nvm.pick === vm.a\n```\n\n### Select Options\n\n``` html\n<select v-model=\"selected\">\n  <!-- inline object literal -->\n  <option v-bind:value=\"{ number: 123 }\">123</option>\n</select>\n```\n\n``` js\n// when selected:\ntypeof vm.selected // -> 'object'\nvm.selected.number // -> 123\n```\n\n## Modifiers\n\n### `.lazy`\n\nBy default, `v-model` syncs the input with the data after each `input` event. You can add the `lazy` modifier to instead sync after `change` events:\n\n``` html\n<!-- synced after \"change\" instead of \"input\" -->\n<input v-model.lazy=\"msg\" >\n```\n\n### `.number`\n\nIf you want user input to be automatically typecast as a number, you can add the `number` modifier to your `v-model` managed inputs:\n\n``` html\n<input v-model.number=\"age\" type=\"number\">\n```\n\nThis is often useful, because even with `type=\"number\"`, the value of HTML input elements always returns a string.\n\n### `.trim`\n\nIf you want user input to be trimmed automatically, you can add the `trim` modifier to your `v-model` managed inputs:\n\n```html\n<input v-model.trim=\"msg\">\n```\n\n## `v-model` with Components\n\n> If you're not yet familiar with Vue's components, just skip this for now.\n\nHTML's built-in input types won't always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with `v-model`! To learn more, read about [custom inputs](components.html#Form-Input-Components-using-Custom-Events) in the Components guide.\n\n\n\n\n\n\n\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/forms.html","comments":1,"layout":"page","_id":"civ8jcjok000y91m1pbxrqc22","content":"<h2 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h2><p>You can use the <code>v-model</code> directive to create two-way data bindings on form input and textarea elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, <code>v-model</code> is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.</p>\n<p class=\"tip\"><code>v-model</code> doesn’t care about the initial value provided to an input or a textarea. It will always treat the Vue instance data as the source of truth.</p>\n\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-1\" class=\"demo\">\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {{ message }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    message: ''\n  }\n})\n</script>\n\n<h3 id=\"Multiline-text\"><a href=\"#Multiline-text\" class=\"headerlink\" title=\"Multiline text\"></a>Multiline text</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Multiline message is:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"white-space: pre\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"add multiple lines\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-textarea\" class=\"demo\">\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre\">{{ message }}</p>\n  <br>\n  <textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n</div>\n<script>\nnew Vue({\n  el: '#example-textarea',\n  data: {\n    message: ''\n  }\n})\n</script>\n\n\n<p class=\"tip\">Interpolation on textareas (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) won't work. Use <code>v-model</code> instead.</p>\n\n<h3 id=\"Checkbox\"><a href=\"#Checkbox\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h3><p>Single checkbox, boolean value:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{{ checked }}</label>\n</div>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    checked: false\n  }\n})\n</script>\n\n<p>Multiple checkboxes, bound to the same Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">checkedNames</span>: []</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-3\" class=\"demo\">\n  <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n  <label for=\"jack\">Jack</label>\n  <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n  <label for=\"john\">John</label>\n  <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n  <label for=\"mike\">Mike</label>\n  <br>\n  <span>Checked names: {{ checkedNames }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    checkedNames: []\n  }\n})\n</script>\n\n<h3 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-4\" class=\"demo\">\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {{ picked }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    picked: ''\n  }\n})\n</script>\n\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><p>Single select:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-5\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    selected: null\n  }\n})\n</script>\n\n<p>Multiple select (bound to Array):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-6\" class=\"demo\">\n  <select v-model=\"selected\" multiple style=\"width: 50px\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-6',\n  data: {\n    selected: []\n  }\n})\n</script>\n\n<p>Dynamic options rendered with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"option in options\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"option.value\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; option.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">selected</span>: <span class=\"string\">'A'</span>,</div><div class=\"line\">    <span class=\"attr\">options</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'One'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'A'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Two'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'B'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Three'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'C'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-7\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option v-for=\"option in options\" v-bind:value=\"option.value\">\n      {{ option.text }}\n    </option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-7',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n</script>\n\n<h2 id=\"Value-Bindings\"><a href=\"#Value-Bindings\" class=\"headerlink\" title=\"Value Bindings\"></a>Value Bindings</h2><p>For radio, checkbox and select options, the <code>v-model</code> binding values are usually static strings (or booleans for checkbox):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- `picked` is a string \"a\" when checked --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- `toggle` is either true or false --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- `selected` is a string \"abc\" when selected --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"abc\"</span>&gt;</span>ABC<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>But sometimes we may want to bind the value to a dynamic property on the Vue instance. We can use <code>v-bind</code> to achieve that. In addition, using <code>v-bind</code> allows us to bind the input value to non-string values.</p>\n<h3 id=\"Checkbox-1\"><a href=\"#Checkbox-1\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></div><div class=\"line\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">\"a\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">\"b\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when checked:</span></div><div class=\"line\">vm.toggle === vm.a</div><div class=\"line\"><span class=\"comment\">// when unchecked:</span></div><div class=\"line\">vm.toggle === vm.b</div></pre></td></tr></table></figure>\n<h3 id=\"Radio-1\"><a href=\"#Radio-1\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"pick\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"a\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when checked:</span></div><div class=\"line\">vm.pick === vm.a</div></pre></td></tr></table></figure>\n<h3 id=\"Select-Options\"><a href=\"#Select-Options\" class=\"headerlink\" title=\"Select Options\"></a>Select Options</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- inline object literal --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"&#123; number: 123 &#125;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when selected:</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> vm.selected <span class=\"comment\">// -&gt; 'object'</span></div><div class=\"line\">vm.selected.number <span class=\"comment\">// -&gt; 123</span></div></pre></td></tr></table></figure>\n<h2 id=\"Modifiers\"><a href=\"#Modifiers\" class=\"headerlink\" title=\"Modifiers\"></a>Modifiers</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a><code>.lazy</code></h3><p>By default, <code>v-model</code> syncs the input with the data after each <code>input</code> event. You can add the <code>lazy</code> modifier to instead sync after <code>change</code> events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- synced after \"change\" instead of \"input\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"msg\"</span> &gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a><code>.number</code></h3><p>If you want user input to be automatically typecast as a number, you can add the <code>number</code> modifier to your <code>v-model</code> managed inputs:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This is often useful, because even with <code>type=&quot;number&quot;</code>, the value of HTML input elements always returns a string.</p>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a><code>.trim</code></h3><p>If you want user input to be trimmed automatically, you can add the <code>trim</code> modifier to your <code>v-model</code> managed inputs:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"msg\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"v-model-with-Components\"><a href=\"#v-model-with-Components\" class=\"headerlink\" title=\"v-model with Components\"></a><code>v-model</code> with Components</h2><blockquote>\n<p>If you’re not yet familiar with Vue’s components, just skip this for now.</p>\n</blockquote>\n<p>HTML’s built-in input types won’t always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with <code>v-model</code>! To learn more, read about <a href=\"components.html#Form-Input-Components-using-Custom-Events\">custom inputs</a> in the Components guide.</p>\n","excerpt":"","more":"<h2 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h2><p>You can use the <code>v-model</code> directive to create two-way data bindings on form input and textarea elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical, <code>v-model</code> is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.</p>\n<p class=\"tip\"><code>v-model</code> doesn’t care about the initial value provided to an input or a textarea. It will always treat the Vue instance data as the source of truth.</p>\n\n<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-1\" class=\"demo\">\n  <input v-model=\"message\" placeholder=\"edit me\">\n  <p>Message is: {{ message }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    message: ''\n  }\n})\n</script>\n\n<h3 id=\"Multiline-text\"><a href=\"#Multiline-text\" class=\"headerlink\" title=\"Multiline text\"></a>Multiline text</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Multiline message is:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"white-space: pre\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"add multiple lines\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-textarea\" class=\"demo\">\n  <span>Multiline message is:</span>\n  <p style=\"white-space: pre\">{{ message }}</p>\n  <br>\n  <textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n</div>\n<script>\nnew Vue({\n  el: '#example-textarea',\n  data: {\n    message: ''\n  }\n})\n</script>\n\n\n<p class=\"tip\">Interpolation on textareas (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) won't work. Use <code>v-model</code> instead.</p>\n\n<h3 id=\"Checkbox\"><a href=\"#Checkbox\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h3><p>Single checkbox, boolean value:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n  <label for=\"checkbox\">{{ checked }}</label>\n</div>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    checked: false\n  }\n})\n</script>\n\n<p>Multiple checkboxes, bound to the same Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">checkedNames</span>: []</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-3\" class=\"demo\">\n  <input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n  <label for=\"jack\">Jack</label>\n  <input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n  <label for=\"john\">John</label>\n  <input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n  <label for=\"mike\">Mike</label>\n  <br>\n  <span>Checked names: {{ checkedNames }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    checkedNames: []\n  }\n})\n</script>\n\n<h3 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-4\" class=\"demo\">\n  <input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n  <label for=\"one\">One</label>\n  <br>\n  <input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n  <label for=\"two\">Two</label>\n  <br>\n  <span>Picked: {{ picked }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    picked: ''\n  }\n})\n</script>\n\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><p>Single select:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-5\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    selected: null\n  }\n})\n</script>\n\n<p>Multiple select (bound to Array):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"example-6\" class=\"demo\">\n  <select v-model=\"selected\" multiple style=\"width: 50px\">\n    <option>A</option>\n    <option>B</option>\n    <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-6',\n  data: {\n    selected: []\n  }\n})\n</script>\n\n<p>Dynamic options rendered with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"option in options\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"option.value\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; option.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">selected</span>: <span class=\"string\">'A'</span>,</div><div class=\"line\">    <span class=\"attr\">options</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'One'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'A'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Two'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'B'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Three'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'C'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-7\" class=\"demo\">\n  <select v-model=\"selected\">\n    <option v-for=\"option in options\" v-bind:value=\"option.value\">\n      {{ option.text }}\n    </option>\n  </select>\n  <span>Selected: {{ selected }}</span>\n</div>\n<script>\nnew Vue({\n  el: '#example-7',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})\n</script>\n\n<h2 id=\"Value-Bindings\"><a href=\"#Value-Bindings\" class=\"headerlink\" title=\"Value Bindings\"></a>Value Bindings</h2><p>For radio, checkbox and select options, the <code>v-model</code> binding values are usually static strings (or booleans for checkbox):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- `picked` is a string \"a\" when checked --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- `toggle` is either true or false --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- `selected` is a string \"abc\" when selected --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"abc\"</span>&gt;</span>ABC<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>But sometimes we may want to bind the value to a dynamic property on the Vue instance. We can use <code>v-bind</code> to achieve that. In addition, using <code>v-bind</code> allows us to bind the input value to non-string values.</p>\n<h3 id=\"Checkbox-1\"><a href=\"#Checkbox-1\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></div><div class=\"line\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></div><div class=\"line\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">\"a\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">\"b\"</span></div><div class=\"line\">&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when checked:</span></div><div class=\"line\">vm.toggle === vm.a</div><div class=\"line\"><span class=\"comment\">// when unchecked:</span></div><div class=\"line\">vm.toggle === vm.b</div></pre></td></tr></table></figure>\n<h3 id=\"Radio-1\"><a href=\"#Radio-1\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"pick\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"a\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when checked:</span></div><div class=\"line\">vm.pick === vm.a</div></pre></td></tr></table></figure>\n<h3 id=\"Select-Options\"><a href=\"#Select-Options\" class=\"headerlink\" title=\"Select Options\"></a>Select Options</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- inline object literal --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"&#123; number: 123 &#125;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// when selected:</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> vm.selected <span class=\"comment\">// -&gt; 'object'</span></div><div class=\"line\">vm.selected.number <span class=\"comment\">// -&gt; 123</span></div></pre></td></tr></table></figure>\n<h2 id=\"Modifiers\"><a href=\"#Modifiers\" class=\"headerlink\" title=\"Modifiers\"></a>Modifiers</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a><code>.lazy</code></h3><p>By default, <code>v-model</code> syncs the input with the data after each <code>input</code> event. You can add the <code>lazy</code> modifier to instead sync after <code>change</code> events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- synced after \"change\" instead of \"input\" --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"msg\"</span> &gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a><code>.number</code></h3><p>If you want user input to be automatically typecast as a number, you can add the <code>number</code> modifier to your <code>v-model</code> managed inputs:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This is often useful, because even with <code>type=&quot;number&quot;</code>, the value of HTML input elements always returns a string.</p>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a><code>.trim</code></h3><p>If you want user input to be trimmed automatically, you can add the <code>trim</code> modifier to your <code>v-model</code> managed inputs:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"msg\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"v-model-with-Components\"><a href=\"#v-model-with-Components\" class=\"headerlink\" title=\"v-model with Components\"></a><code>v-model</code> with Components</h2><blockquote>\n<p>If you’re not yet familiar with Vue’s components, just skip this for now.</p>\n</blockquote>\n<p>HTML’s built-in input types won’t always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with <code>v-model</code>! To learn more, read about <a href=\"components.html#Form-Input-Components-using-Custom-Events\">custom inputs</a> in the Components guide.</p>\n"},{"title":"Installation","type":"guide","order":1,"vue_version":"2.0.5","dev_size":"194.65","min_size":"64.28","gz_size":"23.55","ro_gz_size":"16.39","_content":"\n### Compatibility Note\n\nVue does **not** support IE8 and below, because it uses ECMAScript 5 features that are un-shimmable in IE8. However it supports all [ECMAScript 5 compliant browsers](http://caniuse.com/#feat=es5).\n\n### Release Notes\n\nDetailed release notes for each version are available on [GitHub](https://github.com/vuejs/vue/releases).\n\n## Standalone\n\nSimply download and include with a script tag. `Vue` will be registered as a global variable.\n\n<p class=\"tip\">Don't use the minified version during development. You will miss out all the nice warnings for common mistakes!</p>\n\n<div id=\"downloads\">\n<a class=\"button\" href=\"/js/vue.js\" download>Development Version</a><span class=\"light info\">With full warnings and debug mode</span>\n\n<a class=\"button\" href=\"/js/vue.min.js\" download>Production Version</a><span class=\"light info\">Warnings stripped, {{gz_size}}kb min+gzip</span>\n</div>\n\n### CDN\n\nRecommended: [unpkg](https://unpkg.com/vue/dist/vue.js), which will reflect the latest version as soon as it is published to npm. You can also browse the source of the npm package at [unpkg.com/vue/](https://unpkg.com/vue/).\n\nAlso available on [jsdelivr](//cdn.jsdelivr.net/vue/{{vue_version}}/vue.js) or [cdnjs](//cdnjs.cloudflare.com/ajax/libs/vue/{{vue_version}}/vue.js), but these two services take some time to sync so the latest release may not be available yet.\n\n## NPM\n\nNPM is the recommended installation method when building large scale applications with Vue. It pairs nicely with module bundlers such as [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). Vue also provides accompanying tools for authoring [Single File Components](single-file-components.html).\n\n``` bash\n# latest stable\n$ npm install vue\n```\n\n### Standalone vs. Runtime-only Build\n\nThere are two builds available, the standalone build and the runtime-only build. The difference being that the former includes the **template compiler** and the latter does not.\n\nThe template compiler is responsible for compiling Vue template strings into pure JavaScript render functions. If you want to use the `template` option, then you need the compiler.\n\n- The standalone build includes the compiler and supports the `template` option. **It also relies on the presence of browser APIs so you cannot use it for server-side rendering.**\n\n- The runtime-only build does not include the template compiler, and does not support the `template` option. You can only use the `render` option when using the runtime-only build, but it works with single-file components, because single-file components' templates are pre-compiled into `render` functions during the build step. The runtime-only build is roughly 30% lighter-weight than the standalone build, weighing only {{ro_gz_size}}kb min+gzip.\n\nBy default, the NPM package exports the **runtime-only** build. To use the standalone build, add the following alias to your Webpack config:\n\n``` js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.js'\n  }\n}\n```\n\nFor Browserify, you can use [aliasify](https://github.com/benbria/aliasify) to achieve the same.\n\n<p class=\"tip\">Do NOT do `import Vue from 'vue/dist/vue.js'` - since some tools or 3rd party libraries may import vue as well, this may cause the app to load both the runtime and standalone builds at the same time and lead to errors.</p>\n\n### CSP environments\n\nSome environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of `new Function()` for evaluating expressions. The standalone build depends on this feature to compile templates, so is unusable in these environments.\n\nOn the other hand, the runtime-only build is fully CSP-compliant. When using the runtime-only build with [Webpack + vue-loader](https://github.com/vuejs-templates/webpack-simple) or [Browserify + vueify](https://github.com/vuejs-templates/browserify-simple), your templates will be precompiled into `render` functions which work perfectly in CSP environments.\n\n## CLI\n\nVue.js provides an [official CLI](https://github.com/vuejs/vue-cli) for quickly scaffolding ambitious Single Page Applications. It provides batteries-included build setups for a modern frontend workflow. It takes only a few minutes to get up and running with hot-reload, lint-on-save, and production-ready builds:\n\n``` bash\n# install vue-cli\n$ npm install --global vue-cli\n# create a new project using the \"webpack\" template\n$ vue init webpack my-project\n# install dependencies and go!\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n\n<p class=\"tip\">The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through <a href=\"./\">the guide</a> without any build tools before using the CLI.</p>\n\n## Dev Build\n\n**Important**: the built files in GitHub's `/dist` folder are only checked-in during releases. To use Vue from the latest source code on GitHub, you will have to build it yourself!\n\n``` bash\ngit clone https://github.com/vuejs/vue.git node_modules/vue\ncd node_modules/vue\nnpm install\nnpm run build\n```\n\n## Bower\n\n``` bash\n# latest stable\n$ bower install vue\n```\n\n## AMD Module Loaders\n\nThe standalone downloads or versions installed via Bower are wrapped with UMD so they can be used directly as an AMD module.\n","source":"v2/guide/installation.md","raw":"---\ntitle: Installation\ntype: guide\norder: 1\nvue_version: 2.0.5\ndev_size: \"194.65\"\nmin_size: \"64.28\"\ngz_size: \"23.55\"\nro_gz_size: \"16.39\"\n---\n\n### Compatibility Note\n\nVue does **not** support IE8 and below, because it uses ECMAScript 5 features that are un-shimmable in IE8. However it supports all [ECMAScript 5 compliant browsers](http://caniuse.com/#feat=es5).\n\n### Release Notes\n\nDetailed release notes for each version are available on [GitHub](https://github.com/vuejs/vue/releases).\n\n## Standalone\n\nSimply download and include with a script tag. `Vue` will be registered as a global variable.\n\n<p class=\"tip\">Don't use the minified version during development. You will miss out all the nice warnings for common mistakes!</p>\n\n<div id=\"downloads\">\n<a class=\"button\" href=\"/js/vue.js\" download>Development Version</a><span class=\"light info\">With full warnings and debug mode</span>\n\n<a class=\"button\" href=\"/js/vue.min.js\" download>Production Version</a><span class=\"light info\">Warnings stripped, {{gz_size}}kb min+gzip</span>\n</div>\n\n### CDN\n\nRecommended: [unpkg](https://unpkg.com/vue/dist/vue.js), which will reflect the latest version as soon as it is published to npm. You can also browse the source of the npm package at [unpkg.com/vue/](https://unpkg.com/vue/).\n\nAlso available on [jsdelivr](//cdn.jsdelivr.net/vue/{{vue_version}}/vue.js) or [cdnjs](//cdnjs.cloudflare.com/ajax/libs/vue/{{vue_version}}/vue.js), but these two services take some time to sync so the latest release may not be available yet.\n\n## NPM\n\nNPM is the recommended installation method when building large scale applications with Vue. It pairs nicely with module bundlers such as [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). Vue also provides accompanying tools for authoring [Single File Components](single-file-components.html).\n\n``` bash\n# latest stable\n$ npm install vue\n```\n\n### Standalone vs. Runtime-only Build\n\nThere are two builds available, the standalone build and the runtime-only build. The difference being that the former includes the **template compiler** and the latter does not.\n\nThe template compiler is responsible for compiling Vue template strings into pure JavaScript render functions. If you want to use the `template` option, then you need the compiler.\n\n- The standalone build includes the compiler and supports the `template` option. **It also relies on the presence of browser APIs so you cannot use it for server-side rendering.**\n\n- The runtime-only build does not include the template compiler, and does not support the `template` option. You can only use the `render` option when using the runtime-only build, but it works with single-file components, because single-file components' templates are pre-compiled into `render` functions during the build step. The runtime-only build is roughly 30% lighter-weight than the standalone build, weighing only {{ro_gz_size}}kb min+gzip.\n\nBy default, the NPM package exports the **runtime-only** build. To use the standalone build, add the following alias to your Webpack config:\n\n``` js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.js'\n  }\n}\n```\n\nFor Browserify, you can use [aliasify](https://github.com/benbria/aliasify) to achieve the same.\n\n<p class=\"tip\">Do NOT do `import Vue from 'vue/dist/vue.js'` - since some tools or 3rd party libraries may import vue as well, this may cause the app to load both the runtime and standalone builds at the same time and lead to errors.</p>\n\n### CSP environments\n\nSome environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of `new Function()` for evaluating expressions. The standalone build depends on this feature to compile templates, so is unusable in these environments.\n\nOn the other hand, the runtime-only build is fully CSP-compliant. When using the runtime-only build with [Webpack + vue-loader](https://github.com/vuejs-templates/webpack-simple) or [Browserify + vueify](https://github.com/vuejs-templates/browserify-simple), your templates will be precompiled into `render` functions which work perfectly in CSP environments.\n\n## CLI\n\nVue.js provides an [official CLI](https://github.com/vuejs/vue-cli) for quickly scaffolding ambitious Single Page Applications. It provides batteries-included build setups for a modern frontend workflow. It takes only a few minutes to get up and running with hot-reload, lint-on-save, and production-ready builds:\n\n``` bash\n# install vue-cli\n$ npm install --global vue-cli\n# create a new project using the \"webpack\" template\n$ vue init webpack my-project\n# install dependencies and go!\n$ cd my-project\n$ npm install\n$ npm run dev\n```\n\n<p class=\"tip\">The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through <a href=\"./\">the guide</a> without any build tools before using the CLI.</p>\n\n## Dev Build\n\n**Important**: the built files in GitHub's `/dist` folder are only checked-in during releases. To use Vue from the latest source code on GitHub, you will have to build it yourself!\n\n``` bash\ngit clone https://github.com/vuejs/vue.git node_modules/vue\ncd node_modules/vue\nnpm install\nnpm run build\n```\n\n## Bower\n\n``` bash\n# latest stable\n$ bower install vue\n```\n\n## AMD Module Loaders\n\nThe standalone downloads or versions installed via Bower are wrapped with UMD so they can be used directly as an AMD module.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/installation.html","comments":1,"layout":"page","_id":"civ8jcjol000z91m1j0h5ijkf","content":"<h3 id=\"Compatibility-Note\"><a href=\"#Compatibility-Note\" class=\"headerlink\" title=\"Compatibility Note\"></a>Compatibility Note</h3><p>Vue does <strong>not</strong> support IE8 and below, because it uses ECMAScript 5 features that are un-shimmable in IE8. However it supports all <a href=\"http://caniuse.com/#feat=es5\" target=\"_blank\" rel=\"external\">ECMAScript 5 compliant browsers</a>.</p>\n<h3 id=\"Release-Notes\"><a href=\"#Release-Notes\" class=\"headerlink\" title=\"Release Notes\"></a>Release Notes</h3><p>Detailed release notes for each version are available on <a href=\"https://github.com/vuejs/vue/releases\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h2><p>Simply download and include with a script tag. <code>Vue</code> will be registered as a global variable.</p>\n<p class=\"tip\">Don’t use the minified version during development. You will miss out all the nice warnings for common mistakes!</p>\n\n<div id=\"downloads\"><br><a class=\"button\" href=\"/js/vue.js\" download=\"\">Development Version</a><span class=\"light info\">With full warnings and debug mode</span><br><br><a class=\"button\" href=\"/js/vue.min.js\" download=\"\">Production Version</a><span class=\"light info\">Warnings stripped, 23.55kb min+gzip</span><br></div>\n\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>Recommended: <a href=\"https://unpkg.com/vue/dist/vue.js\" target=\"_blank\" rel=\"external\">unpkg</a>, which will reflect the latest version as soon as it is published to npm. You can also browse the source of the npm package at <a href=\"https://unpkg.com/vue/\" target=\"_blank\" rel=\"external\">unpkg.com/vue/</a>.</p>\n<p>Also available on <a href=\"//cdn.jsdelivr.net/vue/2.0.5/vue.js\">jsdelivr</a> or <a href=\"//cdnjs.cloudflare.com/ajax/libs/vue/2.0.5/vue.js\">cdnjs</a>, but these two services take some time to sync so the latest release may not be available yet.</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>NPM is the recommended installation method when building large scale applications with Vue. It pairs nicely with module bundlers such as <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a> or <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a>. Vue also provides accompanying tools for authoring <a href=\"single-file-components.html\">Single File Components</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># latest stable</span></div><div class=\"line\">$ npm install vue</div></pre></td></tr></table></figure>\n<h3 id=\"Standalone-vs-Runtime-only-Build\"><a href=\"#Standalone-vs-Runtime-only-Build\" class=\"headerlink\" title=\"Standalone vs. Runtime-only Build\"></a>Standalone vs. Runtime-only Build</h3><p>There are two builds available, the standalone build and the runtime-only build. The difference being that the former includes the <strong>template compiler</strong> and the latter does not.</p>\n<p>The template compiler is responsible for compiling Vue template strings into pure JavaScript render functions. If you want to use the <code>template</code> option, then you need the compiler.</p>\n<ul>\n<li><p>The standalone build includes the compiler and supports the <code>template</code> option. <strong>It also relies on the presence of browser APIs so you cannot use it for server-side rendering.</strong></p>\n</li>\n<li><p>The runtime-only build does not include the template compiler, and does not support the <code>template</code> option. You can only use the <code>render</code> option when using the runtime-only build, but it works with single-file components, because single-file components’ templates are pre-compiled into <code>render</code> functions during the build step. The runtime-only build is roughly 30% lighter-weight than the standalone build, weighing only 16.39kb min+gzip.</p>\n</li>\n</ul>\n<p>By default, the NPM package exports the <strong>runtime-only</strong> build. To use the standalone build, add the following alias to your Webpack config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  <span class=\"attr\">alias</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.js'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For Browserify, you can use <a href=\"https://github.com/benbria/aliasify\" target=\"_blank\" rel=\"external\">aliasify</a> to achieve the same.</p>\n<p class=\"tip\">Do NOT do <code>import Vue from &#39;vue/dist/vue.js&#39;</code> - since some tools or 3rd party libraries may import vue as well, this may cause the app to load both the runtime and standalone builds at the same time and lead to errors.</p>\n\n<h3 id=\"CSP-environments\"><a href=\"#CSP-environments\" class=\"headerlink\" title=\"CSP environments\"></a>CSP environments</h3><p>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of <code>new Function()</code> for evaluating expressions. The standalone build depends on this feature to compile templates, so is unusable in these environments.</p>\n<p>On the other hand, the runtime-only build is fully CSP-compliant. When using the runtime-only build with <a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"external\">Webpack + vue-loader</a> or <a href=\"https://github.com/vuejs-templates/browserify-simple\" target=\"_blank\" rel=\"external\">Browserify + vueify</a>, your templates will be precompiled into <code>render</code> functions which work perfectly in CSP environments.</p>\n<h2 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h2><p>Vue.js provides an <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">official CLI</a> for quickly scaffolding ambitious Single Page Applications. It provides batteries-included build setups for a modern frontend workflow. It takes only a few minutes to get up and running with hot-reload, lint-on-save, and production-ready builds:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># install vue-cli</span></div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"><span class=\"comment\"># create a new project using the \"webpack\" template</span></div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"><span class=\"comment\"># install dependencies and go!</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure>\n<p class=\"tip\">The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through <a href=\"./\">the guide</a> without any build tools before using the CLI.</p>\n\n<h2 id=\"Dev-Build\"><a href=\"#Dev-Build\" class=\"headerlink\" title=\"Dev Build\"></a>Dev Build</h2><p><strong>Important</strong>: the built files in GitHub’s <code>/dist</code> folder are only checked-in during releases. To use Vue from the latest source code on GitHub, you will have to build it yourself!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vuejs/vue.git node_modules/vue</div><div class=\"line\"><span class=\"built_in\">cd</span> node_modules/vue</div><div class=\"line\">npm install</div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<h2 id=\"Bower\"><a href=\"#Bower\" class=\"headerlink\" title=\"Bower\"></a>Bower</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># latest stable</span></div><div class=\"line\">$ bower install vue</div></pre></td></tr></table></figure>\n<h2 id=\"AMD-Module-Loaders\"><a href=\"#AMD-Module-Loaders\" class=\"headerlink\" title=\"AMD Module Loaders\"></a>AMD Module Loaders</h2><p>The standalone downloads or versions installed via Bower are wrapped with UMD so they can be used directly as an AMD module.</p>\n","excerpt":"","more":"<h3 id=\"Compatibility-Note\"><a href=\"#Compatibility-Note\" class=\"headerlink\" title=\"Compatibility Note\"></a>Compatibility Note</h3><p>Vue does <strong>not</strong> support IE8 and below, because it uses ECMAScript 5 features that are un-shimmable in IE8. However it supports all <a href=\"http://caniuse.com/#feat=es5\">ECMAScript 5 compliant browsers</a>.</p>\n<h3 id=\"Release-Notes\"><a href=\"#Release-Notes\" class=\"headerlink\" title=\"Release Notes\"></a>Release Notes</h3><p>Detailed release notes for each version are available on <a href=\"https://github.com/vuejs/vue/releases\">GitHub</a>.</p>\n<h2 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h2><p>Simply download and include with a script tag. <code>Vue</code> will be registered as a global variable.</p>\n<p class=\"tip\">Don’t use the minified version during development. You will miss out all the nice warnings for common mistakes!</p>\n\n<div id=\"downloads\"><br><a class=\"button\" href=\"/js/vue.js\" download>Development Version</a><span class=\"light info\">With full warnings and debug mode</span><br><br><a class=\"button\" href=\"/js/vue.min.js\" download>Production Version</a><span class=\"light info\">Warnings stripped, 23.55kb min+gzip</span><br></div>\n\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>Recommended: <a href=\"https://unpkg.com/vue/dist/vue.js\">unpkg</a>, which will reflect the latest version as soon as it is published to npm. You can also browse the source of the npm package at <a href=\"https://unpkg.com/vue/\">unpkg.com/vue/</a>.</p>\n<p>Also available on <a href=\"//cdn.jsdelivr.net/vue/2.0.5/vue.js\">jsdelivr</a> or <a href=\"//cdnjs.cloudflare.com/ajax/libs/vue/2.0.5/vue.js\">cdnjs</a>, but these two services take some time to sync so the latest release may not be available yet.</p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>NPM is the recommended installation method when building large scale applications with Vue. It pairs nicely with module bundlers such as <a href=\"http://webpack.github.io/\">Webpack</a> or <a href=\"http://browserify.org/\">Browserify</a>. Vue also provides accompanying tools for authoring <a href=\"single-file-components.html\">Single File Components</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># latest stable</span></div><div class=\"line\">$ npm install vue</div></pre></td></tr></table></figure>\n<h3 id=\"Standalone-vs-Runtime-only-Build\"><a href=\"#Standalone-vs-Runtime-only-Build\" class=\"headerlink\" title=\"Standalone vs. Runtime-only Build\"></a>Standalone vs. Runtime-only Build</h3><p>There are two builds available, the standalone build and the runtime-only build. The difference being that the former includes the <strong>template compiler</strong> and the latter does not.</p>\n<p>The template compiler is responsible for compiling Vue template strings into pure JavaScript render functions. If you want to use the <code>template</code> option, then you need the compiler.</p>\n<ul>\n<li><p>The standalone build includes the compiler and supports the <code>template</code> option. <strong>It also relies on the presence of browser APIs so you cannot use it for server-side rendering.</strong></p>\n</li>\n<li><p>The runtime-only build does not include the template compiler, and does not support the <code>template</code> option. You can only use the <code>render</code> option when using the runtime-only build, but it works with single-file components, because single-file components’ templates are pre-compiled into <code>render</code> functions during the build step. The runtime-only build is roughly 30% lighter-weight than the standalone build, weighing only 16.39kb min+gzip.</p>\n</li>\n</ul>\n<p>By default, the NPM package exports the <strong>runtime-only</strong> build. To use the standalone build, add the following alias to your Webpack config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  <span class=\"attr\">alias</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.js'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For Browserify, you can use <a href=\"https://github.com/benbria/aliasify\">aliasify</a> to achieve the same.</p>\n<p class=\"tip\">Do NOT do <code>import Vue from &#39;vue/dist/vue.js&#39;</code> - since some tools or 3rd party libraries may import vue as well, this may cause the app to load both the runtime and standalone builds at the same time and lead to errors.</p>\n\n<h3 id=\"CSP-environments\"><a href=\"#CSP-environments\" class=\"headerlink\" title=\"CSP environments\"></a>CSP environments</h3><p>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of <code>new Function()</code> for evaluating expressions. The standalone build depends on this feature to compile templates, so is unusable in these environments.</p>\n<p>On the other hand, the runtime-only build is fully CSP-compliant. When using the runtime-only build with <a href=\"https://github.com/vuejs-templates/webpack-simple\">Webpack + vue-loader</a> or <a href=\"https://github.com/vuejs-templates/browserify-simple\">Browserify + vueify</a>, your templates will be precompiled into <code>render</code> functions which work perfectly in CSP environments.</p>\n<h2 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h2><p>Vue.js provides an <a href=\"https://github.com/vuejs/vue-cli\">official CLI</a> for quickly scaffolding ambitious Single Page Applications. It provides batteries-included build setups for a modern frontend workflow. It takes only a few minutes to get up and running with hot-reload, lint-on-save, and production-ready builds:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># install vue-cli</span></div><div class=\"line\">$ npm install --global vue-cli</div><div class=\"line\"><span class=\"comment\"># create a new project using the \"webpack\" template</span></div><div class=\"line\">$ vue init webpack my-project</div><div class=\"line\"><span class=\"comment\"># install dependencies and go!</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> my-project</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure>\n<p class=\"tip\">The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through <a href=\"./\">the guide</a> without any build tools before using the CLI.</p>\n\n<h2 id=\"Dev-Build\"><a href=\"#Dev-Build\" class=\"headerlink\" title=\"Dev Build\"></a>Dev Build</h2><p><strong>Important</strong>: the built files in GitHub’s <code>/dist</code> folder are only checked-in during releases. To use Vue from the latest source code on GitHub, you will have to build it yourself!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/vuejs/vue.git node_modules/vue</div><div class=\"line\"><span class=\"built_in\">cd</span> node_modules/vue</div><div class=\"line\">npm install</div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<h2 id=\"Bower\"><a href=\"#Bower\" class=\"headerlink\" title=\"Bower\"></a>Bower</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># latest stable</span></div><div class=\"line\">$ bower install vue</div></pre></td></tr></table></figure>\n<h2 id=\"AMD-Module-Loaders\"><a href=\"#AMD-Module-Loaders\" class=\"headerlink\" title=\"AMD Module Loaders\"></a>AMD Module Loaders</h2><p>The standalone downloads or versions installed via Bower are wrapped with UMD so they can be used directly as an AMD module.</p>\n"},{"title":"Introduction","type":"guide","order":2,"_content":"\n## What is Vue.js?\n\nVue (pronounced /vjuː/, like **view**) is a **progressive framework** for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is very easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with [modern tooling](single-file-components.html) and [supporting libraries](https://github.com/vuejs/awesome-vue#libraries--plugins).\n\nIf you are an experienced frontend developer and want to know how Vue compares to other libraries/frameworks, check out the [Comparison with Other Frameworks](comparison.html).\n\n## Getting Started\n\n<p class=\"tip\">The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\n\nThe easiest way to try out Vue.js is using the [JSFiddle Hello World example](https://jsfiddle.net/chrisvfritz/50wL7mdz/). Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can simply create an `.html` file and include Vue with:\n\n``` html\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n```\n\nThe [Installation](installation.html) page provides more options of installing Vue. Note that we **do not** recommend beginners to start with `vue-cli`, especially if you are not yet familiar with Node.js-based build tools.\n\n## Declarative Rendering\n\nAt the core of Vue.js is a system that enables us to declaratively render data to the DOM using straightforward template syntax:\n\n``` html\n<div id=\"app\">\n  {{ message }}\n</div>\n```\n``` js\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n{% raw %}\n<div id=\"app\" class=\"demo\">\n  {{ message }}\n</div>\n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n{% endraw %}\n\nWe have already created our very first Vue app! This looks pretty similar to just rendering a string template, but Vue has done a lot of work under the hood. The data and the DOM are now linked, and everything is now **reactive**. How do we know? Just open up your browser's JavaScript console and set `app.message` to a different value. You should see the rendered example above update accordingly.\n\nIn addition to text interpolation, we can also bind element attributes like this:\n\n``` html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n```\n``` js\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n```\n{% raw %}\n<div id=\"app-2\" class=\"demo\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n<script>\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n</script>\n{% endraw %}\n\nHere we are encountering something new. The `v-bind` attribute you are seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here it is basically saying \"keep this element's `title` attribute up-to-date with the `message` property on the Vue instance.\"\n\nIf you open up your JavaScript console again and enter `app2.message = 'some new message'`, you'll once again see that the bound HTML - in this case the `title` attribute - has been updated.\n\n## Conditionals and Loops\n\nIt's quite simple to toggle the presence of an element, too:\n\n``` html\n<div id=\"app-3\">\n  <p v-if=\"seen\">Now you see me</p>\n</div>\n```\n\n``` js\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n{% raw %}\n<div id=\"app-3\" class=\"demo\">\n  <span v-if=\"seen\">Now you see me</span>\n</div>\n<script>\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n</script>\n{% endraw %}\n\nGo ahead and enter `app3.seen = false` in the console. You should see the message disappear.\n\nThis example demonstrates that we can bind data to not only text and attributes, but also the **structure** of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply [transition effects](transitions.html) when elements are inserted/updated/removed by Vue.\n\nThere are quite a few other directives, each with its own special functionality. For example, the `v-for` directive can be used for displaying a list of items using the data from an Array:\n\n``` html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n```\n``` js\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"app-4\" class=\"demo\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n<script>\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\nIn the console, enter `app4.todos.push({ text: 'New item' })`. You should see a new item appended to the list.\n\n## Handling User Input\n\nTo let users interact with your app, we can use the `v-on` directive to attach event listeners that invoke methods on our Vue instances:\n\n``` html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n```\n``` js\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n{% raw %}\n<div id=\"app-5\" class=\"demo\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n<script>\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nNote in the method we simply update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.\n\nVue also provides the `v-model` directive that makes two-way binding between form input and app state a breeze:\n\n``` html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n``` js\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n{% raw %}\n<div id=\"app-6\" class=\"demo\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n<script>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n{% endraw %}\n\n## Composing with Components\n\nThe component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:\n\n![Component Tree](/images/components.png)\n\nIn Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:\n\n``` js\n// Define a new component called todo-item\nVue.component('todo-item', {\n  template: '<li>This is a todo</li>'\n})\n```\n\nNow you can compose it in another component's template:\n\n``` html\n<ul>\n  <!-- Create an instance of the todo-item component -->\n  <todo-item></todo-item>\n</ul>\n```\n\nBut this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let's modify the component definition to make it accept a [prop](components.html#Props):\n\n``` js\nVue.component('todo-item', {\n  // The todo-item component now accepts a\n  // \"prop\", which is like a custom attribute.\n  // This prop is called todo.\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\n```\n\nNow we can pass the todo into each repeated component using `v-bind`:\n\n``` html\n<div id=\"app-7\">\n  <ol>\n    <!-- Now we provide each todo-item with the todo object    -->\n    <!-- it's representing, so that its content can be dynamic -->\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n```\n``` js\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\n\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"app-7\" class=\"demo\">\n  <ol>\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n<script>\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\nThis is just a contrived example, but we have managed to separate our app into two smaller units, and the child is reasonably well-decoupled from the parent via the props interface. We can now further improve our `<todo-item>` component with more complex template and logic without affecting the parent app.\n\nIn a large application, it is necessary to divide the whole app into components to make development manageable. We will talk a lot more about components [later in the guide](components.html), but here's an (imaginary) example of what an app's template might look like with components:\n\n``` html\n<div id=\"app\">\n  <app-nav></app-nav>\n  <app-view>\n    <app-sidebar></app-sidebar>\n    <app-content></app-content>\n  </app-view>\n</div>\n```\n\n### Relation to Custom Elements\n\nYou may have noticed that Vue components are very similar to **Custom Elements**, which are part of the [Web Components Spec](http://www.w3.org/wiki/WebComponents/). That's because Vue's component syntax is loosely modeled after the spec. For example, Vue components implement the [Slot API](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md) and the `is` special attribute. However, there are a few key differences:\n\n1. The Web Components Spec is still in draft status, and is not natively implemented in every browser. In comparison, Vue components don't require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.\n\n2. Vue components provide important features that are not available in plain custom elements, most notably cross-component data flow, custom event communication and build tool integrations.\n\n## Ready for More?\n\nWe've just briefly introduced the most basic features of Vue.js core - the rest of this guide will cover them and other advanced features with much finer details, so make sure to read through it all!\n","source":"v2/guide/index.md","raw":"---\ntitle: Introduction\ntype: guide\norder: 2\n---\n\n## What is Vue.js?\n\nVue (pronounced /vjuː/, like **view**) is a **progressive framework** for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is very easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with [modern tooling](single-file-components.html) and [supporting libraries](https://github.com/vuejs/awesome-vue#libraries--plugins).\n\nIf you are an experienced frontend developer and want to know how Vue compares to other libraries/frameworks, check out the [Comparison with Other Frameworks](comparison.html).\n\n## Getting Started\n\n<p class=\"tip\">The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\n\nThe easiest way to try out Vue.js is using the [JSFiddle Hello World example](https://jsfiddle.net/chrisvfritz/50wL7mdz/). Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can simply create an `.html` file and include Vue with:\n\n``` html\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n```\n\nThe [Installation](installation.html) page provides more options of installing Vue. Note that we **do not** recommend beginners to start with `vue-cli`, especially if you are not yet familiar with Node.js-based build tools.\n\n## Declarative Rendering\n\nAt the core of Vue.js is a system that enables us to declaratively render data to the DOM using straightforward template syntax:\n\n``` html\n<div id=\"app\">\n  {{ message }}\n</div>\n```\n``` js\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n{% raw %}\n<div id=\"app\" class=\"demo\">\n  {{ message }}\n</div>\n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n{% endraw %}\n\nWe have already created our very first Vue app! This looks pretty similar to just rendering a string template, but Vue has done a lot of work under the hood. The data and the DOM are now linked, and everything is now **reactive**. How do we know? Just open up your browser's JavaScript console and set `app.message` to a different value. You should see the rendered example above update accordingly.\n\nIn addition to text interpolation, we can also bind element attributes like this:\n\n``` html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n```\n``` js\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n```\n{% raw %}\n<div id=\"app-2\" class=\"demo\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n<script>\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n</script>\n{% endraw %}\n\nHere we are encountering something new. The `v-bind` attribute you are seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here it is basically saying \"keep this element's `title` attribute up-to-date with the `message` property on the Vue instance.\"\n\nIf you open up your JavaScript console again and enter `app2.message = 'some new message'`, you'll once again see that the bound HTML - in this case the `title` attribute - has been updated.\n\n## Conditionals and Loops\n\nIt's quite simple to toggle the presence of an element, too:\n\n``` html\n<div id=\"app-3\">\n  <p v-if=\"seen\">Now you see me</p>\n</div>\n```\n\n``` js\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n{% raw %}\n<div id=\"app-3\" class=\"demo\">\n  <span v-if=\"seen\">Now you see me</span>\n</div>\n<script>\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n</script>\n{% endraw %}\n\nGo ahead and enter `app3.seen = false` in the console. You should see the message disappear.\n\nThis example demonstrates that we can bind data to not only text and attributes, but also the **structure** of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply [transition effects](transitions.html) when elements are inserted/updated/removed by Vue.\n\nThere are quite a few other directives, each with its own special functionality. For example, the `v-for` directive can be used for displaying a list of items using the data from an Array:\n\n``` html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n```\n``` js\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"app-4\" class=\"demo\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n<script>\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\nIn the console, enter `app4.todos.push({ text: 'New item' })`. You should see a new item appended to the list.\n\n## Handling User Input\n\nTo let users interact with your app, we can use the `v-on` directive to attach event listeners that invoke methods on our Vue instances:\n\n``` html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n```\n``` js\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n{% raw %}\n<div id=\"app-5\" class=\"demo\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n<script>\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nNote in the method we simply update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.\n\nVue also provides the `v-model` directive that makes two-way binding between form input and app state a breeze:\n\n``` html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n``` js\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n```\n{% raw %}\n<div id=\"app-6\" class=\"demo\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n<script>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n{% endraw %}\n\n## Composing with Components\n\nThe component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:\n\n![Component Tree](/images/components.png)\n\nIn Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:\n\n``` js\n// Define a new component called todo-item\nVue.component('todo-item', {\n  template: '<li>This is a todo</li>'\n})\n```\n\nNow you can compose it in another component's template:\n\n``` html\n<ul>\n  <!-- Create an instance of the todo-item component -->\n  <todo-item></todo-item>\n</ul>\n```\n\nBut this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let's modify the component definition to make it accept a [prop](components.html#Props):\n\n``` js\nVue.component('todo-item', {\n  // The todo-item component now accepts a\n  // \"prop\", which is like a custom attribute.\n  // This prop is called todo.\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\n```\n\nNow we can pass the todo into each repeated component using `v-bind`:\n\n``` html\n<div id=\"app-7\">\n  <ol>\n    <!-- Now we provide each todo-item with the todo object    -->\n    <!-- it's representing, so that its content can be dynamic -->\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n```\n``` js\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\n\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n```\n{% raw %}\n<div id=\"app-7\" class=\"demo\">\n  <ol>\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n<script>\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n</script>\n{% endraw %}\n\nThis is just a contrived example, but we have managed to separate our app into two smaller units, and the child is reasonably well-decoupled from the parent via the props interface. We can now further improve our `<todo-item>` component with more complex template and logic without affecting the parent app.\n\nIn a large application, it is necessary to divide the whole app into components to make development manageable. We will talk a lot more about components [later in the guide](components.html), but here's an (imaginary) example of what an app's template might look like with components:\n\n``` html\n<div id=\"app\">\n  <app-nav></app-nav>\n  <app-view>\n    <app-sidebar></app-sidebar>\n    <app-content></app-content>\n  </app-view>\n</div>\n```\n\n### Relation to Custom Elements\n\nYou may have noticed that Vue components are very similar to **Custom Elements**, which are part of the [Web Components Spec](http://www.w3.org/wiki/WebComponents/). That's because Vue's component syntax is loosely modeled after the spec. For example, Vue components implement the [Slot API](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md) and the `is` special attribute. However, there are a few key differences:\n\n1. The Web Components Spec is still in draft status, and is not natively implemented in every browser. In comparison, Vue components don't require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.\n\n2. Vue components provide important features that are not available in plain custom elements, most notably cross-component data flow, custom event communication and build tool integrations.\n\n## Ready for More?\n\nWe've just briefly introduced the most basic features of Vue.js core - the rest of this guide will cover them and other advanced features with much finer details, so make sure to read through it all!\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/index.html","comments":1,"layout":"page","_id":"civ8jcjom001091m18gjwxe65","content":"<h2 id=\"What-is-Vue-js\"><a href=\"#What-is-Vue-js\" class=\"headerlink\" title=\"What is Vue.js?\"></a>What is Vue.js?</h2><p>Vue (pronounced /vjuː/, like <strong>view</strong>) is a <strong>progressive framework</strong> for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is very easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with <a href=\"single-file-components.html\">modern tooling</a> and <a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\" target=\"_blank\" rel=\"external\">supporting libraries</a>.</p>\n<p>If you are an experienced frontend developer and want to know how Vue compares to other libraries/frameworks, check out the <a href=\"comparison.html\">Comparison with Other Frameworks</a>.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p class=\"tip\">The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\n\n<p>The easiest way to try out Vue.js is using the <a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\" target=\"_blank\" rel=\"external\">JSFiddle Hello World example</a>. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can simply create an <code>.html</code> file and include Vue with:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <a href=\"installation.html\">Installation</a> page provides more options of installing Vue. Note that we <strong>do not</strong> recommend beginners to start with <code>vue-cli</code>, especially if you are not yet familiar with Node.js-based build tools.</p>\n<h2 id=\"Declarative-Rendering\"><a href=\"#Declarative-Rendering\" class=\"headerlink\" title=\"Declarative Rendering\"></a>Declarative Rendering</h2><p>At the core of Vue.js is a system that enables us to declaratively render data to the DOM using straightforward template syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app\" class=\"demo\">\n  {{ message }}\n</div>\n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n\n<p>We have already created our very first Vue app! This looks pretty similar to just rendering a string template, but Vue has done a lot of work under the hood. The data and the DOM are now linked, and everything is now <strong>reactive</strong>. How do we know? Just open up your browser’s JavaScript console and set <code>app.message</code> to a different value. You should see the rendered example above update accordingly.</p>\n<p>In addition to text interpolation, we can also bind element attributes like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">    Hover your mouse over me for a few seconds to see my dynamically bound title!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'You loaded this page on '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-2\" class=\"demo\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n<script>\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n</script>\n\n<p>Here we are encountering something new. The <code>v-bind</code> attribute you are seeing is called a <strong>directive</strong>. Directives are prefixed with <code>v-</code> to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here it is basically saying “keep this element’s <code>title</code> attribute up-to-date with the <code>message</code> property on the Vue instance.”</p>\n<p>If you open up your JavaScript console again and enter <code>app2.message = &#39;some new message&#39;</code>, you’ll once again see that the bound HTML - in this case the <code>title</code> attribute - has been updated.</p>\n<h2 id=\"Conditionals-and-Loops\"><a href=\"#Conditionals-and-Loops\" class=\"headerlink\" title=\"Conditionals and Loops\"></a>Conditionals and Loops</h2><p>It’s quite simple to toggle the presence of an element, too:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-3\" class=\"demo\">\n  <span v-if=\"seen\">Now you see me</span>\n</div>\n<script>\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n</script>\n\n<p>Go ahead and enter <code>app3.seen = false</code> in the console. You should see the message disappear.</p>\n<p>This example demonstrates that we can bind data to not only text and attributes, but also the <strong>structure</strong> of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply <a href=\"transitions.html\">transition effects</a> when elements are inserted/updated/removed by Vue.</p>\n<p>There are quite a few other directives, each with its own special functionality. For example, the <code>v-for</code> directive can be used for displaying a list of items using the data from an Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; todo.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Learn JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Learn Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Build something awesome'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-4\" class=\"demo\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n<script>\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n</script>\n\n<p>In the console, enter <code>app4.todos.push({ text: &#39;New item&#39; })</code>. You should see a new item appended to the list.</p>\n<h2 id=\"Handling-User-Input\"><a href=\"#Handling-User-Input\" class=\"headerlink\" title=\"Handling User Input\"></a>Handling User Input</h2><p>To let users interact with your app, we can use the <code>v-on</code> directive to attach event listeners that invoke methods on our Vue instances:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"reverseMessage\"</span>&gt;</span>Reverse Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue.js!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reverseMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-5\" class=\"demo\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n<script>\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n\n<p>Note in the method we simply update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.</p>\n<p>Vue also provides the <code>v-model</code> directive that makes two-way binding between form input and app state a breeze:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-6\" class=\"demo\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n<script>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n\n<h2 id=\"Composing-with-Components\"><a href=\"#Composing-with-Components\" class=\"headerlink\" title=\"Composing with Components\"></a>Composing with Components</h2><p>The component system is another important concept in Vue, because it’s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</p>\n<p><img src=\"/images/components.png\" alt=\"Component Tree\"></p>\n<p>In Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Define a new component called todo-item</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;This is a todo&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now you can compose it in another component’s template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- Create an instance of the todo-item component --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">todo-item</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>But this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let’s modify the component definition to make it accept a <a href=\"components.html#Props\">prop</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// The todo-item component now accepts a</span></div><div class=\"line\">  <span class=\"comment\">// \"prop\", which is like a custom attribute.</span></div><div class=\"line\">  <span class=\"comment\">// This prop is called todo.</span></div><div class=\"line\">  props: [<span class=\"string\">'todo'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now we can pass the todo into each repeated component using <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Now we provide each todo-item with the todo object    --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- it's representing, so that its content can be dynamic --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in groceryList\"</span> <span class=\"attr\">v-bind:todo</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'todo'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">groceryList</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Vegetables'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Cheese'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Whatever else humans are supposed to eat'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-7\" class=\"demo\">\n  <ol>\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n<script>\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n</script>\n\n<p>This is just a contrived example, but we have managed to separate our app into two smaller units, and the child is reasonably well-decoupled from the parent via the props interface. We can now further improve our <code>&lt;todo-item&gt;</code> component with more complex template and logic without affecting the parent app.</p>\n<p>In a large application, it is necessary to divide the whole app into components to make development manageable. We will talk a lot more about components <a href=\"components.html\">later in the guide</a>, but here’s an (imaginary) example of what an app’s template might look like with components:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">app-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Relation-to-Custom-Elements\"><a href=\"#Relation-to-Custom-Elements\" class=\"headerlink\" title=\"Relation to Custom Elements\"></a>Relation to Custom Elements</h3><p>You may have noticed that Vue components are very similar to <strong>Custom Elements</strong>, which are part of the <a href=\"http://www.w3.org/wiki/WebComponents/\" target=\"_blank\" rel=\"external\">Web Components Spec</a>. That’s because Vue’s component syntax is loosely modeled after the spec. For example, Vue components implement the <a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" target=\"_blank\" rel=\"external\">Slot API</a> and the <code>is</code> special attribute. However, there are a few key differences:</p>\n<ol>\n<li><p>The Web Components Spec is still in draft status, and is not natively implemented in every browser. In comparison, Vue components don’t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</p>\n</li>\n<li><p>Vue components provide important features that are not available in plain custom elements, most notably cross-component data flow, custom event communication and build tool integrations.</p>\n</li>\n</ol>\n<h2 id=\"Ready-for-More\"><a href=\"#Ready-for-More\" class=\"headerlink\" title=\"Ready for More?\"></a>Ready for More?</h2><p>We’ve just briefly introduced the most basic features of Vue.js core - the rest of this guide will cover them and other advanced features with much finer details, so make sure to read through it all!</p>\n","excerpt":"","more":"<h2 id=\"What-is-Vue-js\"><a href=\"#What-is-Vue-js\" class=\"headerlink\" title=\"What is Vue.js?\"></a>What is Vue.js?</h2><p>Vue (pronounced /vjuː/, like <strong>view</strong>) is a <strong>progressive framework</strong> for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is very easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with <a href=\"single-file-components.html\">modern tooling</a> and <a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\">supporting libraries</a>.</p>\n<p>If you are an experienced frontend developer and want to know how Vue compares to other libraries/frameworks, check out the <a href=\"comparison.html\">Comparison with Other Frameworks</a>.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p class=\"tip\">The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\n\n<p>The easiest way to try out Vue.js is using the <a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\">JSFiddle Hello World example</a>. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can simply create an <code>.html</code> file and include Vue with:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <a href=\"installation.html\">Installation</a> page provides more options of installing Vue. Note that we <strong>do not</strong> recommend beginners to start with <code>vue-cli</code>, especially if you are not yet familiar with Node.js-based build tools.</p>\n<h2 id=\"Declarative-Rendering\"><a href=\"#Declarative-Rendering\" class=\"headerlink\" title=\"Declarative Rendering\"></a>Declarative Rendering</h2><p>At the core of Vue.js is a system that enables us to declaratively render data to the DOM using straightforward template syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app\" class=\"demo\">\n  {{ message }}\n</div>\n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n\n<p>We have already created our very first Vue app! This looks pretty similar to just rendering a string template, but Vue has done a lot of work under the hood. The data and the DOM are now linked, and everything is now <strong>reactive</strong>. How do we know? Just open up your browser’s JavaScript console and set <code>app.message</code> to a different value. You should see the rendered example above update accordingly.</p>\n<p>In addition to text interpolation, we can also bind element attributes like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">    Hover your mouse over me for a few seconds to see my dynamically bound title!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'You loaded this page on '</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-2\" class=\"demo\">\n  <span v-bind:title=\"message\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span>\n</div>\n<script>\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})\n</script>\n\n<p>Here we are encountering something new. The <code>v-bind</code> attribute you are seeing is called a <strong>directive</strong>. Directives are prefixed with <code>v-</code> to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here it is basically saying “keep this element’s <code>title</code> attribute up-to-date with the <code>message</code> property on the Vue instance.”</p>\n<p>If you open up your JavaScript console again and enter <code>app2.message = &#39;some new message&#39;</code>, you’ll once again see that the bound HTML - in this case the <code>title</code> attribute - has been updated.</p>\n<h2 id=\"Conditionals-and-Loops\"><a href=\"#Conditionals-and-Loops\" class=\"headerlink\" title=\"Conditionals and Loops\"></a>Conditionals and Loops</h2><p>It’s quite simple to toggle the presence of an element, too:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-3\" class=\"demo\">\n  <span v-if=\"seen\">Now you see me</span>\n</div>\n<script>\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n</script>\n\n<p>Go ahead and enter <code>app3.seen = false</code> in the console. You should see the message disappear.</p>\n<p>This example demonstrates that we can bind data to not only text and attributes, but also the <strong>structure</strong> of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply <a href=\"transitions.html\">transition effects</a> when elements are inserted/updated/removed by Vue.</p>\n<p>There are quite a few other directives, each with its own special functionality. For example, the <code>v-for</code> directive can be used for displaying a list of items using the data from an Array:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; todo.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Learn JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Learn Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Build something awesome'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-4\" class=\"demo\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\n<script>\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})\n</script>\n\n<p>In the console, enter <code>app4.todos.push({ text: &#39;New item&#39; })</code>. You should see a new item appended to the list.</p>\n<h2 id=\"Handling-User-Input\"><a href=\"#Handling-User-Input\" class=\"headerlink\" title=\"Handling User Input\"></a>Handling User Input</h2><p>To let users interact with your app, we can use the <code>v-on</code> directive to attach event listeners that invoke methods on our Vue instances:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"reverseMessage\"</span>&gt;</span>Reverse Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue.js!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reverseMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-5\" class=\"demo\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">Reverse Message</button>\n</div>\n<script>\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n\n<p>Note in the method we simply update the state of our app without touching the DOM - all DOM manipulations are handled by Vue, and the code you write is focused on the underlying logic.</p>\n<p>Vue also provides the <code>v-model</code> directive that makes two-way binding between form input and app state a breeze:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello Vue!'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-6\" class=\"demo\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n<script>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n</script>\n\n<h2 id=\"Composing-with-Components\"><a href=\"#Composing-with-Components\" class=\"headerlink\" title=\"Composing with Components\"></a>Composing with Components</h2><p>The component system is another important concept in Vue, because it’s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</p>\n<p><img src=\"/images/components.png\" alt=\"Component Tree\"></p>\n<p>In Vue, a component is essentially a Vue instance with pre-defined options. Registering a component in Vue is straightforward:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Define a new component called todo-item</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;This is a todo&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now you can compose it in another component’s template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- Create an instance of the todo-item component --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">todo-item</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>But this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let’s modify the component definition to make it accept a <a href=\"components.html#Props\">prop</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// The todo-item component now accepts a</span></div><div class=\"line\">  <span class=\"comment\">// \"prop\", which is like a custom attribute.</span></div><div class=\"line\">  <span class=\"comment\">// This prop is called todo.</span></div><div class=\"line\">  props: [<span class=\"string\">'todo'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now we can pass the todo into each repeated component using <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Now we provide each todo-item with the todo object    --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- it's representing, so that its content can be dynamic --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in groceryList\"</span> <span class=\"attr\">v-bind:todo</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'todo'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">groceryList</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Vegetables'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Cheese'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'Whatever else humans are supposed to eat'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"app-7\" class=\"demo\">\n  <ol>\n    <todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"></todo-item>\n  </ol>\n</div>\n<script>\nVue.component('todo-item', {\n  props: ['todo'],\n  template: '<li>{{ todo.text }}</li>'\n})\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})\n</script>\n\n<p>This is just a contrived example, but we have managed to separate our app into two smaller units, and the child is reasonably well-decoupled from the parent via the props interface. We can now further improve our <code>&lt;todo-item&gt;</code> component with more complex template and logic without affecting the parent app.</p>\n<p>In a large application, it is necessary to divide the whole app into components to make development manageable. We will talk a lot more about components <a href=\"components.html\">later in the guide</a>, but here’s an (imaginary) example of what an app’s template might look like with components:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">app-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Relation-to-Custom-Elements\"><a href=\"#Relation-to-Custom-Elements\" class=\"headerlink\" title=\"Relation to Custom Elements\"></a>Relation to Custom Elements</h3><p>You may have noticed that Vue components are very similar to <strong>Custom Elements</strong>, which are part of the <a href=\"http://www.w3.org/wiki/WebComponents/\">Web Components Spec</a>. That’s because Vue’s component syntax is loosely modeled after the spec. For example, Vue components implement the <a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\">Slot API</a> and the <code>is</code> special attribute. However, there are a few key differences:</p>\n<ol>\n<li><p>The Web Components Spec is still in draft status, and is not natively implemented in every browser. In comparison, Vue components don’t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</p>\n</li>\n<li><p>Vue components provide important features that are not available in plain custom elements, most notably cross-component data flow, custom event communication and build tool integrations.</p>\n</li>\n</ol>\n<h2 id=\"Ready-for-More\"><a href=\"#Ready-for-More\" class=\"headerlink\" title=\"Ready for More?\"></a>Ready for More?</h2><p>We’ve just briefly introduced the most basic features of Vue.js core - the rest of this guide will cover them and other advanced features with much finer details, so make sure to read through it all!</p>\n"},{"title":"Join the Vue.js Community!","type":"guide","order":29,"_content":"\nVue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!\n\nNow we'll answer both what the community can do for and what you can do for the community.\n\n## Resources You'll Enjoy\n\n### Get Support\n\n- [Forum](http://forum.vuejs.org/): THE best place to ask questions and get answers about Vue and its ecosystem.\n- [Gitter Channel](https://gitter.im/vuejs/vue): A place for devs to meet and chat. You can ask questions here too, but the forum is the better platform, since the discussions are threaded.\n- [Github](https://github.com/vuejs): If you have a bug to report or feature to request, that's what the GitHub issues are for. We also welcome pull requests!\n\n### Explore the Ecosystem\n\n- [The Awesome Vue Page](https://github.com/vuejs/awesome-vue): See what other awesome resources have been published by other awesome people.\n- [The \"Show and Tell\" Subforum](http://forum.vuejs.org/c/show-and-tell): Another great place to check out what others have built with and for the growing Vue ecosystem.\n\n## What You Can Do\n\n### Contribute Code\n\nAs with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read [the contributing guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md).\n\nAfter that, you'll be ready to contribute to Vue's core repositories:\n\n- [vue](https://github.com/vuejs/vue): the core library\n- [vuex](https://github.com/vuejs/vuex): Flux-inspired state management\n- [vue-router](https://github.com/vuejs/vue-router): a routing system for SPAs\n\n...as well as many smaller official [companion libraries](https://github.com/vuejs).\n\n### Share (and Build) Your Experience\n\nApart from answering questions and sharing resources in the forum and Gitter channel, there are a few other less obvious ways to share and expand what you know:\n\n- **Develop learning materials.** It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even just publishing a gist that you share on social media.\n- **Watch a repo you care about.** This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.\n\n### Translate Docs\n\nVue has already spread across the globe, with even the core team in at least half a dozen timezones. [The forum](http://forum.vuejs.org/) includes 7 languages and counting and many of our docs have [actively-maintained translations](https://github.com/vuejs?utf8=%E2%9C%93&query=vuejs.org). We're very proud of Vue's international reach, but we can do even better.\n\nI hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?\n\nIf so, please feel free to fork the repo for [these docs](https://github.com/vuejs/vuejs.org/) or for any other officially maintained documentation, then start translating. Once you've made some progress, open an issue or pull request in the main repo and we'll put out a call for more contributors to help you out.\n","source":"v2/guide/join.md","raw":"---\ntitle: Join the Vue.js Community!\ntype: guide\norder: 29\n---\n\nVue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!\n\nNow we'll answer both what the community can do for and what you can do for the community.\n\n## Resources You'll Enjoy\n\n### Get Support\n\n- [Forum](http://forum.vuejs.org/): THE best place to ask questions and get answers about Vue and its ecosystem.\n- [Gitter Channel](https://gitter.im/vuejs/vue): A place for devs to meet and chat. You can ask questions here too, but the forum is the better platform, since the discussions are threaded.\n- [Github](https://github.com/vuejs): If you have a bug to report or feature to request, that's what the GitHub issues are for. We also welcome pull requests!\n\n### Explore the Ecosystem\n\n- [The Awesome Vue Page](https://github.com/vuejs/awesome-vue): See what other awesome resources have been published by other awesome people.\n- [The \"Show and Tell\" Subforum](http://forum.vuejs.org/c/show-and-tell): Another great place to check out what others have built with and for the growing Vue ecosystem.\n\n## What You Can Do\n\n### Contribute Code\n\nAs with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read [the contributing guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md).\n\nAfter that, you'll be ready to contribute to Vue's core repositories:\n\n- [vue](https://github.com/vuejs/vue): the core library\n- [vuex](https://github.com/vuejs/vuex): Flux-inspired state management\n- [vue-router](https://github.com/vuejs/vue-router): a routing system for SPAs\n\n...as well as many smaller official [companion libraries](https://github.com/vuejs).\n\n### Share (and Build) Your Experience\n\nApart from answering questions and sharing resources in the forum and Gitter channel, there are a few other less obvious ways to share and expand what you know:\n\n- **Develop learning materials.** It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even just publishing a gist that you share on social media.\n- **Watch a repo you care about.** This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests.\n\n### Translate Docs\n\nVue has already spread across the globe, with even the core team in at least half a dozen timezones. [The forum](http://forum.vuejs.org/) includes 7 languages and counting and many of our docs have [actively-maintained translations](https://github.com/vuejs?utf8=%E2%9C%93&query=vuejs.org). We're very proud of Vue's international reach, but we can do even better.\n\nI hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?\n\nIf so, please feel free to fork the repo for [these docs](https://github.com/vuejs/vuejs.org/) or for any other officially maintained documentation, then start translating. Once you've made some progress, open an issue or pull request in the main repo and we'll put out a call for more contributors to help you out.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/join.html","comments":1,"layout":"page","_id":"civ8jcjom001191m1n0mx5x3s","content":"<p>Vue’s community is growing incredibly fast and if you’re reading this, there’s a good chance you’re ready to join it. So… welcome!</p>\n<p>Now we’ll answer both what the community can do for and what you can do for the community.</p>\n<h2 id=\"Resources-You’ll-Enjoy\"><a href=\"#Resources-You’ll-Enjoy\" class=\"headerlink\" title=\"Resources You’ll Enjoy\"></a>Resources You’ll Enjoy</h2><h3 id=\"Get-Support\"><a href=\"#Get-Support\" class=\"headerlink\" title=\"Get Support\"></a>Get Support</h3><ul>\n<li><a href=\"http://forum.vuejs.org/\" target=\"_blank\" rel=\"external\">Forum</a>: THE best place to ask questions and get answers about Vue and its ecosystem.</li>\n<li><a href=\"https://gitter.im/vuejs/vue\" target=\"_blank\" rel=\"external\">Gitter Channel</a>: A place for devs to meet and chat. You can ask questions here too, but the forum is the better platform, since the discussions are threaded.</li>\n<li><a href=\"https://github.com/vuejs\" target=\"_blank\" rel=\"external\">Github</a>: If you have a bug to report or feature to request, that’s what the GitHub issues are for. We also welcome pull requests!</li>\n</ul>\n<h3 id=\"Explore-the-Ecosystem\"><a href=\"#Explore-the-Ecosystem\" class=\"headerlink\" title=\"Explore the Ecosystem\"></a>Explore the Ecosystem</h3><ul>\n<li><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"external\">The Awesome Vue Page</a>: See what other awesome resources have been published by other awesome people.</li>\n<li><a href=\"http://forum.vuejs.org/c/show-and-tell\" target=\"_blank\" rel=\"external\">The “Show and Tell” Subforum</a>: Another great place to check out what others have built with and for the growing Vue ecosystem.</li>\n</ul>\n<h2 id=\"What-You-Can-Do\"><a href=\"#What-You-Can-Do\" class=\"headerlink\" title=\"What You Can Do\"></a>What You Can Do</h2><h3 id=\"Contribute-Code\"><a href=\"#Contribute-Code\" class=\"headerlink\" title=\"Contribute Code\"></a>Contribute Code</h3><p>As with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read <a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md\" target=\"_blank\" rel=\"external\">the contributing guide</a>.</p>\n<p>After that, you’ll be ready to contribute to Vue’s core repositories:</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"external\">vue</a>: the core library</li>\n<li><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a>: Flux-inspired state management</li>\n<li><a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router</a>: a routing system for SPAs</li>\n</ul>\n<p>…as well as many smaller official <a href=\"https://github.com/vuejs\" target=\"_blank\" rel=\"external\">companion libraries</a>.</p>\n<h3 id=\"Share-and-Build-Your-Experience\"><a href=\"#Share-and-Build-Your-Experience\" class=\"headerlink\" title=\"Share (and Build) Your Experience\"></a>Share (and Build) Your Experience</h3><p>Apart from answering questions and sharing resources in the forum and Gitter channel, there are a few other less obvious ways to share and expand what you know:</p>\n<ul>\n<li><strong>Develop learning materials.</strong> It’s often said that the best way to learn is to teach. If there’s something interesting you’re doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even just publishing a gist that you share on social media.</li>\n<li><strong>Watch a repo you care about.</strong> This will send you notifications whenever there’s activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It’s a fantastic way to build expertise so that you’re eventually able to help address issues and pull requests.</li>\n</ul>\n<h3 id=\"Translate-Docs\"><a href=\"#Translate-Docs\" class=\"headerlink\" title=\"Translate Docs\"></a>Translate Docs</h3><p>Vue has already spread across the globe, with even the core team in at least half a dozen timezones. <a href=\"http://forum.vuejs.org/\" target=\"_blank\" rel=\"external\">The forum</a> includes 7 languages and counting and many of our docs have <a href=\"https://github.com/vuejs?utf8=%E2%9C%93&amp;query=vuejs.org\" target=\"_blank\" rel=\"external\">actively-maintained translations</a>. We’re very proud of Vue’s international reach, but we can do even better.</p>\n<p>I hope that right now, you’re reading this sentence in your preferred language. If not, would you like to help us get there?</p>\n<p>If so, please feel free to fork the repo for <a href=\"https://github.com/vuejs/vuejs.org/\" target=\"_blank\" rel=\"external\">these docs</a> or for any other officially maintained documentation, then start translating. Once you’ve made some progress, open an issue or pull request in the main repo and we’ll put out a call for more contributors to help you out.</p>\n","excerpt":"","more":"<p>Vue’s community is growing incredibly fast and if you’re reading this, there’s a good chance you’re ready to join it. So… welcome!</p>\n<p>Now we’ll answer both what the community can do for and what you can do for the community.</p>\n<h2 id=\"Resources-You’ll-Enjoy\"><a href=\"#Resources-You’ll-Enjoy\" class=\"headerlink\" title=\"Resources You’ll Enjoy\"></a>Resources You’ll Enjoy</h2><h3 id=\"Get-Support\"><a href=\"#Get-Support\" class=\"headerlink\" title=\"Get Support\"></a>Get Support</h3><ul>\n<li><a href=\"http://forum.vuejs.org/\">Forum</a>: THE best place to ask questions and get answers about Vue and its ecosystem.</li>\n<li><a href=\"https://gitter.im/vuejs/vue\">Gitter Channel</a>: A place for devs to meet and chat. You can ask questions here too, but the forum is the better platform, since the discussions are threaded.</li>\n<li><a href=\"https://github.com/vuejs\">Github</a>: If you have a bug to report or feature to request, that’s what the GitHub issues are for. We also welcome pull requests!</li>\n</ul>\n<h3 id=\"Explore-the-Ecosystem\"><a href=\"#Explore-the-Ecosystem\" class=\"headerlink\" title=\"Explore the Ecosystem\"></a>Explore the Ecosystem</h3><ul>\n<li><a href=\"https://github.com/vuejs/awesome-vue\">The Awesome Vue Page</a>: See what other awesome resources have been published by other awesome people.</li>\n<li><a href=\"http://forum.vuejs.org/c/show-and-tell\">The “Show and Tell” Subforum</a>: Another great place to check out what others have built with and for the growing Vue ecosystem.</li>\n</ul>\n<h2 id=\"What-You-Can-Do\"><a href=\"#What-You-Can-Do\" class=\"headerlink\" title=\"What You Can Do\"></a>What You Can Do</h2><h3 id=\"Contribute-Code\"><a href=\"#Contribute-Code\" class=\"headerlink\" title=\"Contribute Code\"></a>Contribute Code</h3><p>As with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read <a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md\">the contributing guide</a>.</p>\n<p>After that, you’ll be ready to contribute to Vue’s core repositories:</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vue\">vue</a>: the core library</li>\n<li><a href=\"https://github.com/vuejs/vuex\">vuex</a>: Flux-inspired state management</li>\n<li><a href=\"https://github.com/vuejs/vue-router\">vue-router</a>: a routing system for SPAs</li>\n</ul>\n<p>…as well as many smaller official <a href=\"https://github.com/vuejs\">companion libraries</a>.</p>\n<h3 id=\"Share-and-Build-Your-Experience\"><a href=\"#Share-and-Build-Your-Experience\" class=\"headerlink\" title=\"Share (and Build) Your Experience\"></a>Share (and Build) Your Experience</h3><p>Apart from answering questions and sharing resources in the forum and Gitter channel, there are a few other less obvious ways to share and expand what you know:</p>\n<ul>\n<li><strong>Develop learning materials.</strong> It’s often said that the best way to learn is to teach. If there’s something interesting you’re doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even just publishing a gist that you share on social media.</li>\n<li><strong>Watch a repo you care about.</strong> This will send you notifications whenever there’s activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It’s a fantastic way to build expertise so that you’re eventually able to help address issues and pull requests.</li>\n</ul>\n<h3 id=\"Translate-Docs\"><a href=\"#Translate-Docs\" class=\"headerlink\" title=\"Translate Docs\"></a>Translate Docs</h3><p>Vue has already spread across the globe, with even the core team in at least half a dozen timezones. <a href=\"http://forum.vuejs.org/\">The forum</a> includes 7 languages and counting and many of our docs have <a href=\"https://github.com/vuejs?utf8=%E2%9C%93&amp;query=vuejs.org\">actively-maintained translations</a>. We’re very proud of Vue’s international reach, but we can do even better.</p>\n<p>I hope that right now, you’re reading this sentence in your preferred language. If not, would you like to help us get there?</p>\n<p>If so, please feel free to fork the repo for <a href=\"https://github.com/vuejs/vuejs.org/\">these docs</a> or for any other officially maintained documentation, then start translating. Once you’ve made some progress, open an issue or pull request in the main repo and we’ll put out a call for more contributors to help you out.</p>\n"},{"title":"The Vue Instance","type":"guide","order":3,"_content":"\n## Constructor\n\nEvery Vue vm is bootstrapped by creating a **root Vue instance** with the `Vue` constructor function:\n\n``` js\nvar vm = new Vue({\n  // options\n})\n```\n\nAlthough not strictly associated with the [MVVM pattern](https://en.wikipedia.org/wiki/Model_View_ViewModel), Vue's design was no doubt inspired by it. As a convention, we often use the variable `vm` (short for ViewModel) to refer to our Vue instances.\n\nWhen you instantiate a Vue instance, you need to pass in an **options object** which can contain options for data, template, element to mount on, methods, lifecycle callbacks and more. The full list of options can be found in the [API reference](../api).\n\nThe `Vue` constructor can be extended to create reusable **component constructors** with pre-defined options:\n\n``` js\nvar MyComponent = Vue.extend({\n  // extension options\n})\n\n// all instances of `MyComponent` are created with\n// the pre-defined extension options\nvar myComponentInstance = new MyComponent()\n```\n\nAlthough it is possible to create extended instances imperatively, most of the time it is recommended to compose them declaratively in templates as custom elements. We will talk about [the component system](components.html) in detail later. For now, you just need to know that all Vue components are essentially extended Vue instances.\n\n## Properties and Methods\n\nEach Vue instance **proxies** all the properties found in its `data` object:\n\n``` js\nvar data = { a: 1 }\nvar vm = new Vue({\n  data: data\n})\n\nvm.a === data.a // -> true\n\n// setting the property also affects original data\nvm.a = 2\ndata.a // -> 2\n\n// ... and vice-versa\ndata.a = 3\nvm.a // -> 3\n```\n\nIt should be noted that only these proxied properties are **reactive**. If you attach a new property to the instance after it has been created, it will not trigger any view updates. We will discuss the reactivity system in detail later.\n\nIn addition to data properties, Vue instances expose a number of useful instance properties and methods. These properties and methods are prefixed with `$` to differentiate them from proxied data properties. For example:\n\n``` js\nvar data = { a: 1 }\nvar vm = new Vue({\n  el: '#example',\n  data: data\n})\n\nvm.$data === data // -> true\nvm.$el === document.getElementById('example') // -> true\n\n// $watch is an instance method\nvm.$watch('a', function (newVal, oldVal) {\n  // this callback will be called when `vm.a` changes\n})\n```\n\n<p class=\"tip\">Don't use [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) on an instance property or callback (e.g. `vm.$watch('a', newVal => this.myMethod())`). As arrow functions are bound to the parent context, `this` will not be the Vue instance as you'd expect and `this.myMethod` will be undefined.</p>\n\nConsult the [API reference](../api) for the full list of instance properties and methods.\n\n## Instance Lifecycle Hooks\n\nEach Vue instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it will also invoke some **lifecycle hooks**, which give us the opportunity to execute custom logic. For example, the `created` hook is called after the instance is created:\n\n``` js\nvar vm = new Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` points to the vm instance\n    console.log('a is: ' + this.a)\n  }\n})\n// -> \"a is: 1\"\n```\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, for example `mounted`, `updated`, and `destroyed`. All lifecycle hooks are called with their `this` context pointing to the Vue instance invoking it. You may have been wondering where the concept of \"controllers\" lives in the Vue world and the answer is: there are no controllers. Your custom logic for a component would be split among these lifecycle hooks.\n\n## Lifecycle Diagram\n\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but this diagram will be helpful in the future.\n\n![Lifecycle](/images/lifecycle.png)\n","source":"v2/guide/instance.md","raw":"---\ntitle: The Vue Instance\ntype: guide\norder: 3\n---\n\n## Constructor\n\nEvery Vue vm is bootstrapped by creating a **root Vue instance** with the `Vue` constructor function:\n\n``` js\nvar vm = new Vue({\n  // options\n})\n```\n\nAlthough not strictly associated with the [MVVM pattern](https://en.wikipedia.org/wiki/Model_View_ViewModel), Vue's design was no doubt inspired by it. As a convention, we often use the variable `vm` (short for ViewModel) to refer to our Vue instances.\n\nWhen you instantiate a Vue instance, you need to pass in an **options object** which can contain options for data, template, element to mount on, methods, lifecycle callbacks and more. The full list of options can be found in the [API reference](../api).\n\nThe `Vue` constructor can be extended to create reusable **component constructors** with pre-defined options:\n\n``` js\nvar MyComponent = Vue.extend({\n  // extension options\n})\n\n// all instances of `MyComponent` are created with\n// the pre-defined extension options\nvar myComponentInstance = new MyComponent()\n```\n\nAlthough it is possible to create extended instances imperatively, most of the time it is recommended to compose them declaratively in templates as custom elements. We will talk about [the component system](components.html) in detail later. For now, you just need to know that all Vue components are essentially extended Vue instances.\n\n## Properties and Methods\n\nEach Vue instance **proxies** all the properties found in its `data` object:\n\n``` js\nvar data = { a: 1 }\nvar vm = new Vue({\n  data: data\n})\n\nvm.a === data.a // -> true\n\n// setting the property also affects original data\nvm.a = 2\ndata.a // -> 2\n\n// ... and vice-versa\ndata.a = 3\nvm.a // -> 3\n```\n\nIt should be noted that only these proxied properties are **reactive**. If you attach a new property to the instance after it has been created, it will not trigger any view updates. We will discuss the reactivity system in detail later.\n\nIn addition to data properties, Vue instances expose a number of useful instance properties and methods. These properties and methods are prefixed with `$` to differentiate them from proxied data properties. For example:\n\n``` js\nvar data = { a: 1 }\nvar vm = new Vue({\n  el: '#example',\n  data: data\n})\n\nvm.$data === data // -> true\nvm.$el === document.getElementById('example') // -> true\n\n// $watch is an instance method\nvm.$watch('a', function (newVal, oldVal) {\n  // this callback will be called when `vm.a` changes\n})\n```\n\n<p class=\"tip\">Don't use [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) on an instance property or callback (e.g. `vm.$watch('a', newVal => this.myMethod())`). As arrow functions are bound to the parent context, `this` will not be the Vue instance as you'd expect and `this.myMethod` will be undefined.</p>\n\nConsult the [API reference](../api) for the full list of instance properties and methods.\n\n## Instance Lifecycle Hooks\n\nEach Vue instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it will also invoke some **lifecycle hooks**, which give us the opportunity to execute custom logic. For example, the `created` hook is called after the instance is created:\n\n``` js\nvar vm = new Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` points to the vm instance\n    console.log('a is: ' + this.a)\n  }\n})\n// -> \"a is: 1\"\n```\n\nThere are also other hooks which will be called at different stages of the instance's lifecycle, for example `mounted`, `updated`, and `destroyed`. All lifecycle hooks are called with their `this` context pointing to the Vue instance invoking it. You may have been wondering where the concept of \"controllers\" lives in the Vue world and the answer is: there are no controllers. Your custom logic for a component would be split among these lifecycle hooks.\n\n## Lifecycle Diagram\n\nBelow is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but this diagram will be helpful in the future.\n\n![Lifecycle](/images/lifecycle.png)\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/instance.html","comments":1,"layout":"page","_id":"civ8jcjon001291m1tpxwx3o0","content":"<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>Every Vue vm is bootstrapped by creating a <strong>root Vue instance</strong> with the <code>Vue</code> constructor function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Although not strictly associated with the <a href=\"https://en.wikipedia.org/wiki/Model_View_ViewModel\" target=\"_blank\" rel=\"external\">MVVM pattern</a>, Vue’s design was no doubt inspired by it. As a convention, we often use the variable <code>vm</code> (short for ViewModel) to refer to our Vue instances.</p>\n<p>When you instantiate a Vue instance, you need to pass in an <strong>options object</strong> which can contain options for data, template, element to mount on, methods, lifecycle callbacks and more. The full list of options can be found in the <a href=\"../api\">API reference</a>.</p>\n<p>The <code>Vue</code> constructor can be extended to create reusable <strong>component constructors</strong> with pre-defined options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">// extension options</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// all instances of `MyComponent` are created with</span></div><div class=\"line\"><span class=\"comment\">// the pre-defined extension options</span></div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = <span class=\"keyword\">new</span> MyComponent()</div></pre></td></tr></table></figure>\n<p>Although it is possible to create extended instances imperatively, most of the time it is recommended to compose them declaratively in templates as custom elements. We will talk about <a href=\"components.html\">the component system</a> in detail later. For now, you just need to know that all Vue components are essentially extended Vue instances.</p>\n<h2 id=\"Properties-and-Methods\"><a href=\"#Properties-and-Methods\" class=\"headerlink\" title=\"Properties and Methods\"></a>Properties and Methods</h2><p>Each Vue instance <strong>proxies</strong> all the properties found in its <code>data</code> object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.a === data.a <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setting the property also affects original data</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ... and vice-versa</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure>\n<p>It should be noted that only these proxied properties are <strong>reactive</strong>. If you attach a new property to the instance after it has been created, it will not trigger any view updates. We will discuss the reactivity system in detail later.</p>\n<p>In addition to data properties, Vue instances expose a number of useful instance properties and methods. These properties and methods are prefixed with <code>$</code> to differentiate them from proxied data properties. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// $watch is an instance method</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this callback will be called when `vm.a` changes</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Don’t use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">arrow functions</a> on an instance property or callback (e.g. <code>vm.$watch(&#39;a&#39;, newVal =&gt; this.myMethod())</code>). As arrow functions are bound to the parent context, <code>this</code> will not be the Vue instance as you’d expect and <code>this.myMethod</code> will be undefined.</p>\n\n<p>Consult the <a href=\"../api\">API reference</a> for the full list of instance properties and methods.</p>\n<h2 id=\"Instance-Lifecycle-Hooks\"><a href=\"#Instance-Lifecycle-Hooks\" class=\"headerlink\" title=\"Instance Lifecycle Hooks\"></a>Instance Lifecycle Hooks</h2><p>Each Vue instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it will also invoke some <strong>lifecycle hooks</strong>, which give us the opportunity to execute custom logic. For example, the <code>created</code> hook is called after the instance is created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` points to the vm instance</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure>\n<p>There are also other hooks which will be called at different stages of the instance’s lifecycle, for example <code>mounted</code>, <code>updated</code>, and <code>destroyed</code>. All lifecycle hooks are called with their <code>this</code> context pointing to the Vue instance invoking it. You may have been wondering where the concept of “controllers” lives in the Vue world and the answer is: there are no controllers. Your custom logic for a component would be split among these lifecycle hooks.</p>\n<h2 id=\"Lifecycle-Diagram\"><a href=\"#Lifecycle-Diagram\" class=\"headerlink\" title=\"Lifecycle Diagram\"></a>Lifecycle Diagram</h2><p>Below is a diagram for the instance lifecycle. You don’t need to fully understand everything going on right now, but this diagram will be helpful in the future.</p>\n<p><img src=\"/images/lifecycle.png\" alt=\"Lifecycle\"></p>\n","excerpt":"","more":"<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>Every Vue vm is bootstrapped by creating a <strong>root Vue instance</strong> with the <code>Vue</code> constructor function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Although not strictly associated with the <a href=\"https://en.wikipedia.org/wiki/Model_View_ViewModel\">MVVM pattern</a>, Vue’s design was no doubt inspired by it. As a convention, we often use the variable <code>vm</code> (short for ViewModel) to refer to our Vue instances.</p>\n<p>When you instantiate a Vue instance, you need to pass in an <strong>options object</strong> which can contain options for data, template, element to mount on, methods, lifecycle callbacks and more. The full list of options can be found in the <a href=\"../api\">API reference</a>.</p>\n<p>The <code>Vue</code> constructor can be extended to create reusable <strong>component constructors</strong> with pre-defined options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">// extension options</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// all instances of `MyComponent` are created with</span></div><div class=\"line\"><span class=\"comment\">// the pre-defined extension options</span></div><div class=\"line\"><span class=\"keyword\">var</span> myComponentInstance = <span class=\"keyword\">new</span> MyComponent()</div></pre></td></tr></table></figure>\n<p>Although it is possible to create extended instances imperatively, most of the time it is recommended to compose them declaratively in templates as custom elements. We will talk about <a href=\"components.html\">the component system</a> in detail later. For now, you just need to know that all Vue components are essentially extended Vue instances.</p>\n<h2 id=\"Properties-and-Methods\"><a href=\"#Properties-and-Methods\" class=\"headerlink\" title=\"Properties and Methods\"></a>Properties and Methods</h2><p>Each Vue instance <strong>proxies</strong> all the properties found in its <code>data</code> object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.a === data.a <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// setting the property also affects original data</span></div><div class=\"line\">vm.a = <span class=\"number\">2</span></div><div class=\"line\">data.a <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ... and vice-versa</span></div><div class=\"line\">data.a = <span class=\"number\">3</span></div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 3</span></div></pre></td></tr></table></figure>\n<p>It should be noted that only these proxied properties are <strong>reactive</strong>. If you attach a new property to the instance after it has been created, it will not trigger any view updates. We will discuss the reactivity system in detail later.</p>\n<p>In addition to data properties, Vue instances expose a number of useful instance properties and methods. These properties and methods are prefixed with <code>$</code> to differentiate them from proxied data properties. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// $watch is an instance method</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this callback will be called when `vm.a` changes</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Don’t use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> on an instance property or callback (e.g. <code>vm.$watch(&#39;a&#39;, newVal =&gt; this.myMethod())</code>). As arrow functions are bound to the parent context, <code>this</code> will not be the Vue instance as you’d expect and <code>this.myMethod</code> will be undefined.</p>\n\n<p>Consult the <a href=\"../api\">API reference</a> for the full list of instance properties and methods.</p>\n<h2 id=\"Instance-Lifecycle-Hooks\"><a href=\"#Instance-Lifecycle-Hooks\" class=\"headerlink\" title=\"Instance Lifecycle Hooks\"></a>Instance Lifecycle Hooks</h2><p>Each Vue instance goes through a series of initialization steps when it is created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it will also invoke some <strong>lifecycle hooks</strong>, which give us the opportunity to execute custom logic. For example, the <code>created</code> hook is called after the instance is created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// `this` points to the vm instance</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"a is: 1\"</span></div></pre></td></tr></table></figure>\n<p>There are also other hooks which will be called at different stages of the instance’s lifecycle, for example <code>mounted</code>, <code>updated</code>, and <code>destroyed</code>. All lifecycle hooks are called with their <code>this</code> context pointing to the Vue instance invoking it. You may have been wondering where the concept of “controllers” lives in the Vue world and the answer is: there are no controllers. Your custom logic for a component would be split among these lifecycle hooks.</p>\n<h2 id=\"Lifecycle-Diagram\"><a href=\"#Lifecycle-Diagram\" class=\"headerlink\" title=\"Lifecycle Diagram\"></a>Lifecycle Diagram</h2><p>Below is a diagram for the instance lifecycle. You don’t need to fully understand everything going on right now, but this diagram will be helpful in the future.</p>\n<p><img src=\"/images/lifecycle.png\" alt=\"Lifecycle\"></p>\n"},{"title":"List Rendering","type":"guide","order":8,"_content":"\n## `v-for`\n\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n### Basic Usage\n\n``` html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n``` js\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<ul id=\"example-1\" class=\"demo\">\n  <li v-for=\"item in items\">\n    {{item.message}}\n  </li>\n</ul>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-1')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nInside `v-for` blocks we have full access to parent scope properties. `v-for` also supports an optional second argument for the index of the current item.\n\n``` html\n<ul id=\"example-2\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n```\n\n``` js\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})\n```\n\nResult:\n\n{% raw%}\n<ul id=\"example-2\" class=\"demo\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-2')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n``` html\n<div v-for=\"item of items\"></div>\n```\n\n### Template v-for\n\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n``` html\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\"></li>\n  </template>\n</ul>\n```\n\n### Object v-for\n\nYou can also use `v-for` to iterate through the properties of an object.\n\n``` html\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n```\n\n``` js\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n<script>\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n</script>\n{% endraw %}\n\nYou can also provide a second argument for the key:\n\n``` html\n<div v-for=\"(value, key) in object\">\n  {{ key }} : {{ value }}\n</div>\n```\n\nAnd another for the index:\n\n``` html\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }} : {{ value }}\n</div>\n```\n\n<p class=\"tip\">When iterating over an object, the order is based on the key enumeration order of `Object.keys()`, which is **not** guaranteed to be consistent across JavaScript engine implementations.</p>\n\n### Range v-for\n\n`v-for` can also take an integer. In this case it will repeat the template that many times.\n\n``` html\n<div>\n  <span v-for=\"n in 10\">{{ n }}</span>\n</div>\n```\n\nResult:\n\n{% raw %}\n<div id=\"range\" class=\"demo\">\n  <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n<script>\nnew Vue({ el: '#range' })\n</script>\n{% endraw %}\n\n### Components and v-for\n\n> This section assumes knowledge of [Components](components.html). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a custom component, like any normal element:\n\n``` html\n<my-component v-for=\"item in items\"></my-component>\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n``` html\n<my-component\n  v-for=\"(item, index) in items\"\n  v-bind:item=\"item\"\n  v-bind:index=\"index\">\n</my-component>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations.\n\nHere's a complete example of a simple todo list:\n\n``` html\n<div id=\"todo-list-example\">\n  <input\n    v-model=\"newTodoText\"\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  >\n  <ul>\n    <li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    ></li>\n  </ul>\n</div>\n```\n\n``` js\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\n\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"todo-list-example\" class=\"demo\">\n  <input\n    v-model=\"newTodoText\" v\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  >\n  <ul>\n    <li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    ></li>\n  </ul>\n</div>\n<script>\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## key\n\nWhen Vue.js is updating a list of elements rendered with `v-for`, it by default uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will simply patch each element in-place and make sure it reflects what should be rendered at that particular index. This is similar to the behavior of `track-by=\"$index\"` in Vue 1.x.\n\nThis default mode is efficient, but only suitable **when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item. An ideal value for `key` would be the unique id of each item. This special attribute is a rough equivalent to `track-by` in 1.x, but it works like an attribute, so you need to use `v-bind` to bind it to dynamic values (using shorthand here):\n\n``` html\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nIt is recommended to provide a `key` with `v-for` whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.\n\nSince it's a generic mechanism for Vue to identify nodes, the `key` also has other uses that are not specifically tied to `v-for`, as we will see later in the guide.\n\n## Array Change Detection\n\n### Mutation Methods\n\nVue wraps an observed array's mutation methods so they will also trigger view updates. The wrapped methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\nYou can open the console and play with the previous examples' `items` array by calling their mutation methods. For example: `example1.items.push({ message: 'Baz' })`.\n\n### Replacing an Array\n\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original Array but **always return a new array**. When working with non-mutating methods, you can just replace the old array with the new one:\n\n``` js\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/)\n})\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.\n\n### Caveats\n\nDue to limitations in JavaScript, Vue **cannot** detect the following changes to an array:\n\n1. When you directly set an item with the index, e.g. `vm.items[indexOfItem] = newValue`\n2. When you modify the length of the array, e.g. `vm.items.length = newLength`\n\nTo overcome caveat 1, both of the following will accomplish the same as `vm.items[indexOfItem] = newValue`, but will also trigger state updates in the reactivity system:\n\n``` js\n// Vue.set\nVue.set(example1.items, indexOfItem, newValue)\n```\n``` js\n// Array.prototype.splice`\nexample1.items.splice(indexOfItem, 1, newValue)\n```\n\nTo deal with caveat 2, you can also use `splice`:\n\n``` js\nexample1.items.splice(newLength)\n```\n\n## Displaying Filtered/Sorted Results\n\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n``` html\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\n``` js\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\ncomputed: {\n  evenNumbers: function () {\n    return this.numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n\nAlternatively, you can also just use a method where computed properties are not feasible (e.g. inside nested `v-for` loops):\n\n``` html\n<li v-for=\"n in even(numbers)\">{{ n }}</li>\n```\n\n``` js\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\nmethods: {\n  even: function (numbers) {\n    return numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n","source":"v2/guide/list.md","raw":"---\ntitle: List Rendering\ntype: guide\norder: 8\n---\n\n## `v-for`\n\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an **alias** for the array element being iterated on:\n\n### Basic Usage\n\n``` html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n``` js\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<ul id=\"example-1\" class=\"demo\">\n  <li v-for=\"item in items\">\n    {{item.message}}\n  </li>\n</ul>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-1')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nInside `v-for` blocks we have full access to parent scope properties. `v-for` also supports an optional second argument for the index of the current item.\n\n``` html\n<ul id=\"example-2\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n```\n\n``` js\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})\n```\n\nResult:\n\n{% raw%}\n<ul id=\"example-2\" class=\"demo\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-2')\n    }\n  }\n})\n</script>\n{% endraw %}\n\nYou can also use `of` as the delimiter instead of `in`, so that it is closer to JavaScript's syntax for iterators:\n\n``` html\n<div v-for=\"item of items\"></div>\n```\n\n### Template v-for\n\nSimilar to template `v-if`, you can also use a `<template>` tag with `v-for` to render a block of multiple elements. For example:\n\n``` html\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\"></li>\n  </template>\n</ul>\n```\n\n### Object v-for\n\nYou can also use `v-for` to iterate through the properties of an object.\n\n``` html\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n```\n\n``` js\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n```\n\nResult:\n\n{% raw %}\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n<script>\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n</script>\n{% endraw %}\n\nYou can also provide a second argument for the key:\n\n``` html\n<div v-for=\"(value, key) in object\">\n  {{ key }} : {{ value }}\n</div>\n```\n\nAnd another for the index:\n\n``` html\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }} : {{ value }}\n</div>\n```\n\n<p class=\"tip\">When iterating over an object, the order is based on the key enumeration order of `Object.keys()`, which is **not** guaranteed to be consistent across JavaScript engine implementations.</p>\n\n### Range v-for\n\n`v-for` can also take an integer. In this case it will repeat the template that many times.\n\n``` html\n<div>\n  <span v-for=\"n in 10\">{{ n }}</span>\n</div>\n```\n\nResult:\n\n{% raw %}\n<div id=\"range\" class=\"demo\">\n  <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n<script>\nnew Vue({ el: '#range' })\n</script>\n{% endraw %}\n\n### Components and v-for\n\n> This section assumes knowledge of [Components](components.html). Feel free to skip it and come back later.\n\nYou can directly use `v-for` on a custom component, like any normal element:\n\n``` html\n<my-component v-for=\"item in items\"></my-component>\n```\n\nHowever, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:\n\n``` html\n<my-component\n  v-for=\"(item, index) in items\"\n  v-bind:item=\"item\"\n  v-bind:index=\"index\">\n</my-component>\n```\n\nThe reason for not automatically injecting `item` into the component is because that makes the component tightly coupled to how `v-for` works. Being explicit about where its data comes from makes the component reusable in other situations.\n\nHere's a complete example of a simple todo list:\n\n``` html\n<div id=\"todo-list-example\">\n  <input\n    v-model=\"newTodoText\"\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  >\n  <ul>\n    <li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    ></li>\n  </ul>\n</div>\n```\n\n``` js\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\n\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"todo-list-example\" class=\"demo\">\n  <input\n    v-model=\"newTodoText\" v\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  >\n  <ul>\n    <li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    ></li>\n  </ul>\n</div>\n<script>\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## key\n\nWhen Vue.js is updating a list of elements rendered with `v-for`, it by default uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will simply patch each element in-place and make sure it reflects what should be rendered at that particular index. This is similar to the behavior of `track-by=\"$index\"` in Vue 1.x.\n\nThis default mode is efficient, but only suitable **when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)**.\n\nTo give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a unique `key` attribute for each item. An ideal value for `key` would be the unique id of each item. This special attribute is a rough equivalent to `track-by` in 1.x, but it works like an attribute, so you need to use `v-bind` to bind it to dynamic values (using shorthand here):\n\n``` html\n<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>\n```\n\nIt is recommended to provide a `key` with `v-for` whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.\n\nSince it's a generic mechanism for Vue to identify nodes, the `key` also has other uses that are not specifically tied to `v-for`, as we will see later in the guide.\n\n## Array Change Detection\n\n### Mutation Methods\n\nVue wraps an observed array's mutation methods so they will also trigger view updates. The wrapped methods are:\n\n- `push()`\n- `pop()`\n- `shift()`\n- `unshift()`\n- `splice()`\n- `sort()`\n- `reverse()`\n\nYou can open the console and play with the previous examples' `items` array by calling their mutation methods. For example: `example1.items.push({ message: 'Baz' })`.\n\n### Replacing an Array\n\nMutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. `filter()`, `concat()` and `slice()`, which do not mutate the original Array but **always return a new array**. When working with non-mutating methods, you can just replace the old array with the new one:\n\n``` js\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/)\n})\n```\n\nYou might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.\n\n### Caveats\n\nDue to limitations in JavaScript, Vue **cannot** detect the following changes to an array:\n\n1. When you directly set an item with the index, e.g. `vm.items[indexOfItem] = newValue`\n2. When you modify the length of the array, e.g. `vm.items.length = newLength`\n\nTo overcome caveat 1, both of the following will accomplish the same as `vm.items[indexOfItem] = newValue`, but will also trigger state updates in the reactivity system:\n\n``` js\n// Vue.set\nVue.set(example1.items, indexOfItem, newValue)\n```\n``` js\n// Array.prototype.splice`\nexample1.items.splice(indexOfItem, 1, newValue)\n```\n\nTo deal with caveat 2, you can also use `splice`:\n\n``` js\nexample1.items.splice(newLength)\n```\n\n## Displaying Filtered/Sorted Results\n\nSometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.\n\nFor example:\n\n``` html\n<li v-for=\"n in evenNumbers\">{{ n }}</li>\n```\n\n``` js\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\ncomputed: {\n  evenNumbers: function () {\n    return this.numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n\nAlternatively, you can also just use a method where computed properties are not feasible (e.g. inside nested `v-for` loops):\n\n``` html\n<li v-for=\"n in even(numbers)\">{{ n }}</li>\n```\n\n``` js\ndata: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\nmethods: {\n  even: function (numbers) {\n    return numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}\n```\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/list.html","comments":1,"layout":"page","_id":"civ8jcjon001391m1pr04l7do","content":"<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a><code>v-for</code></h2><p>We can use the <code>v-for</code> directive to render a list of items based on an array. The <code>v-for</code> directive requires a special syntax in the form of <code>item in items</code>, where <code>items</code> is the source data array and <code>item</code> is an <strong>alias</strong> for the array element being iterated on:</p>\n<h3 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"example-1\" class=\"demo\">\n  <li v-for=\"item in items\">\n    {{item.message}}\n  </li>\n</ul>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-1')\n    }\n  }\n})\n</script>\n\n<p>Inside <code>v-for</code> blocks we have full access to parent scope properties. <code>v-for</code> also supports an optional second argument for the index of the current item.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">parentMessage</span>: <span class=\"string\">'Parent'</span>,</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"example-2\" class=\"demo\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-2')\n    }\n  }\n})\n</script>\n\n<p>You can also use <code>of</code> as the delimiter instead of <code>in</code>, so that it is closer to JavaScript’s syntax for iterators:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item of items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-v-for\"><a href=\"#Template-v-for\" class=\"headerlink\" title=\"Template v-for\"></a>Template v-for</h3><p>Similar to template <code>v-if</code>, you can also use a <code>&lt;template&gt;</code> tag with <code>v-for</code> to render a block of multiple elements. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Object-v-for\"><a href=\"#Object-v-for\" class=\"headerlink\" title=\"Object v-for\"></a>Object v-for</h3><p>You can also use <code>v-for</code> to iterate through the properties of an object.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"repeat-object\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; value &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#repeat-object'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">object</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">FirstName</span>: <span class=\"string\">'John'</span>,</div><div class=\"line\">      <span class=\"attr\">LastName</span>: <span class=\"string\">'Doe'</span>,</div><div class=\"line\">      <span class=\"attr\">Age</span>: <span class=\"number\">30</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n<script>\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n</script>\n\n<p>You can also provide a second argument for the key:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key) in object\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And another for the index:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key, index) in object\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When iterating over an object, the order is based on the key enumeration order of <code>Object.keys()</code>, which is <strong>not</strong> guaranteed to be consistent across JavaScript engine implementations.</p>\n\n<h3 id=\"Range-v-for\"><a href=\"#Range-v-for\" class=\"headerlink\" title=\"Range v-for\"></a>Range v-for</h3><p><code>v-for</code> can also take an integer. In this case it will repeat the template that many times.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"range\" class=\"demo\">\n  <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n<script>\nnew Vue({ el: '#range' })\n</script>\n\n<h3 id=\"Components-and-v-for\"><a href=\"#Components-and-v-for\" class=\"headerlink\" title=\"Components and v-for\"></a>Components and v-for</h3><blockquote>\n<p>This section assumes knowledge of <a href=\"components.html\">Components</a>. Feel free to skip it and come back later.</p>\n</blockquote>\n<p>You can directly use <code>v-for</code> on a custom component, like any normal element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, this won’t automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></div><div class=\"line\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:item</span>=<span class=\"string\">\"item\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:index</span>=<span class=\"string\">\"index\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The reason for not automatically injecting <code>item</code> into the component is because that makes the component tightly coupled to how <code>v-for</code> works. Being explicit about where its data comes from makes the component reusable in other situations.</p>\n<p>Here’s a complete example of a simple todo list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"addNewTodo\"</span></div><div class=\"line\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Add a todo\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></span></div><div class=\"line\">      <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo, index) in todos\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo\"</span></div><div class=\"line\">      <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index, 1)\"</span></div><div class=\"line\">    &gt;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;li&gt;\\</div><div class=\"line\">      &#123;&#123; title &#125;&#125;\\</div><div class=\"line\">      &lt;button v-on:click=\"$emit(\\'remove\\')\"&gt;X&lt;/button&gt;\\</div><div class=\"line\">    &lt;/li&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'title'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#todo-list-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">newTodoText</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      <span class=\"string\">'Do the dishes'</span>,</div><div class=\"line\">      <span class=\"string\">'Take out the trash'</span>,</div><div class=\"line\">      <span class=\"string\">'Mow the lawn'</span></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">addNewTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.todos.push(<span class=\"keyword\">this</span>.newTodoText)</div><div class=\"line\">      <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"todo-list-example\" class=\"demo\">\n  <input v-model=\"newTodoText\" v=\"\" v-on:keyup.enter=\"addNewTodo\" placeholder=\"Add a todo\">\n  <ul>\n    <li is=\"todo-item\" v-for=\"(todo, index) in todos\" v-bind:title=\"todo\" v-on:remove=\"todos.splice(index, 1)\"></li>\n  </ul>\n</div>\n<script>\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n</script>\n\n<h2 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h2><p>When Vue.js is updating a list of elements rendered with <code>v-for</code>, it by default uses an “in-place patch” strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will simply patch each element in-place and make sure it reflects what should be rendered at that particular index. This is similar to the behavior of <code>track-by=&quot;$index&quot;</code> in Vue 1.x.</p>\n<p>This default mode is efficient, but only suitable <strong>when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)</strong>.</p>\n<p>To give Vue a hint so that it can track each node’s identity, and thus reuse and reorder existing elements, you need to provide a unique <code>key</code> attribute for each item. An ideal value for <code>key</code> would be the unique id of each item. This special attribute is a rough equivalent to <code>track-by</code> in 1.x, but it works like an attribute, so you need to use <code>v-bind</code> to bind it to dynamic values (using shorthand here):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- content --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is recommended to provide a <code>key</code> with <code>v-for</code> whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.</p>\n<p>Since it’s a generic mechanism for Vue to identify nodes, the <code>key</code> also has other uses that are not specifically tied to <code>v-for</code>, as we will see later in the guide.</p>\n<h2 id=\"Array-Change-Detection\"><a href=\"#Array-Change-Detection\" class=\"headerlink\" title=\"Array Change Detection\"></a>Array Change Detection</h2><h3 id=\"Mutation-Methods\"><a href=\"#Mutation-Methods\" class=\"headerlink\" title=\"Mutation Methods\"></a>Mutation Methods</h3><p>Vue wraps an observed array’s mutation methods so they will also trigger view updates. The wrapped methods are:</p>\n<ul>\n<li><code>push()</code></li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code></li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>You can open the console and play with the previous examples’ <code>items</code> array by calling their mutation methods. For example: <code>example1.items.push({ message: &#39;Baz&#39; })</code>.</p>\n<h3 id=\"Replacing-an-Array\"><a href=\"#Replacing-an-Array\" class=\"headerlink\" title=\"Replacing an Array\"></a>Replacing an Array</h3><p>Mutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. <code>filter()</code>, <code>concat()</code> and <code>slice()</code>, which do not mutate the original Array but <strong>always return a new array</strong>. When working with non-mutating methods, you can just replace the old array with the new one:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.</p>\n<h3 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h3><p>Due to limitations in JavaScript, Vue <strong>cannot</strong> detect the following changes to an array:</p>\n<ol>\n<li>When you directly set an item with the index, e.g. <code>vm.items[indexOfItem] = newValue</code></li>\n<li>When you modify the length of the array, e.g. <code>vm.items.length = newLength</code></li>\n</ol>\n<p>To overcome caveat 1, both of the following will accomplish the same as <code>vm.items[indexOfItem] = newValue</code>, but will also trigger state updates in the reactivity system:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Vue.set</span></div><div class=\"line\">Vue.set(example1.items, indexOfItem, newValue)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array.prototype.splice`</span></div><div class=\"line\">example1.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</div></pre></td></tr></table></figure>\n<p>To deal with caveat 2, you can also use <code>splice</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">example1.items.splice(newLength)</div></pre></td></tr></table></figure>\n<h2 id=\"Displaying-Filtered-Sorted-Results\"><a href=\"#Displaying-Filtered-Sorted-Results\" class=\"headerlink\" title=\"Displaying Filtered/Sorted Results\"></a>Displaying Filtered/Sorted Results</h2><p>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in evenNumbers\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">numbers</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">evenNumbers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Alternatively, you can also just use a method where computed properties are not feasible (e.g. inside nested <code>v-for</code> loops):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(numbers)\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">numbers</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">even</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">numbers</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a><code>v-for</code></h2><p>We can use the <code>v-for</code> directive to render a list of items based on an array. The <code>v-for</code> directive requires a special syntax in the form of <code>item in items</code>, where <code>items</code> is the source data array and <code>item</code> is an <strong>alias</strong> for the array element being iterated on:</p>\n<h3 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"example-1\" class=\"demo\">\n  <li v-for=\"item in items\">\n    {{item.message}}\n  </li>\n</ul>\n<script>\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-1')\n    }\n  }\n})\n</script>\n\n<p>Inside <code>v-for</code> blocks we have full access to parent scope properties. <code>v-for</code> also supports an optional second argument for the index of the current item.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">parentMessage</span>: <span class=\"string\">'Parent'</span>,</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"example-2\" class=\"demo\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n<script>\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  },\n  watch: {\n    items: function () {\n      smoothScroll.animateScroll(null, '#example-2')\n    }\n  }\n})\n</script>\n\n<p>You can also use <code>of</code> as the delimiter instead of <code>in</code>, so that it is closer to JavaScript’s syntax for iterators:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item of items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Template-v-for\"><a href=\"#Template-v-for\" class=\"headerlink\" title=\"Template v-for\"></a>Template v-for</h3><p>Similar to template <code>v-if</code>, you can also use a <code>&lt;template&gt;</code> tag with <code>v-for</code> to render a block of multiple elements. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Object-v-for\"><a href=\"#Object-v-for\" class=\"headerlink\" title=\"Object v-for\"></a>Object v-for</h3><p>You can also use <code>v-for</code> to iterate through the properties of an object.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"repeat-object\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; value &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#repeat-object'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">object</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">FirstName</span>: <span class=\"string\">'John'</span>,</div><div class=\"line\">      <span class=\"attr\">LastName</span>: <span class=\"string\">'Doe'</span>,</div><div class=\"line\">      <span class=\"attr\">Age</span>: <span class=\"number\">30</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n<script>\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})\n</script>\n\n<p>You can also provide a second argument for the key:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key) in object\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>And another for the index:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key, index) in object\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When iterating over an object, the order is based on the key enumeration order of <code>Object.keys()</code>, which is <strong>not</strong> guaranteed to be consistent across JavaScript engine implementations.</p>\n\n<h3 id=\"Range-v-for\"><a href=\"#Range-v-for\" class=\"headerlink\" title=\"Range v-for\"></a>Range v-for</h3><p><code>v-for</code> can also take an integer. In this case it will repeat the template that many times.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Result:</p>\n\n<div id=\"range\" class=\"demo\">\n  <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n<script>\nnew Vue({ el: '#range' })\n</script>\n\n<h3 id=\"Components-and-v-for\"><a href=\"#Components-and-v-for\" class=\"headerlink\" title=\"Components and v-for\"></a>Components and v-for</h3><blockquote>\n<p>This section assumes knowledge of <a href=\"components.html\">Components</a>. Feel free to skip it and come back later.</p>\n</blockquote>\n<p>You can directly use <code>v-for</code> on a custom component, like any normal element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>However, this won’t automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></div><div class=\"line\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:item</span>=<span class=\"string\">\"item\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:index</span>=<span class=\"string\">\"index\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The reason for not automatically injecting <code>item</code> into the component is because that makes the component tightly coupled to how <code>v-for</code> works. Being explicit about where its data comes from makes the component reusable in other situations.</p>\n<p>Here’s a complete example of a simple todo list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"addNewTodo\"</span></div><div class=\"line\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Add a todo\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></div><div class=\"line\">      <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo, index) in todos\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo\"</span></div><div class=\"line\">      <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index, 1)\"</span></div><div class=\"line\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</div><div class=\"line\">    &lt;li&gt;\\</div><div class=\"line\">      &#123;&#123; title &#125;&#125;\\</div><div class=\"line\">      &lt;button v-on:click=\"$emit(\\'remove\\')\"&gt;X&lt;/button&gt;\\</div><div class=\"line\">    &lt;/li&gt;\\</div><div class=\"line\">  '</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'title'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#todo-list-example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">newTodoText</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      <span class=\"string\">'Do the dishes'</span>,</div><div class=\"line\">      <span class=\"string\">'Take out the trash'</span>,</div><div class=\"line\">      <span class=\"string\">'Mow the lawn'</span></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">addNewTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.todos.push(<span class=\"keyword\">this</span>.newTodoText)</div><div class=\"line\">      <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"todo-list-example\" class=\"demo\">\n  <input\n    v-model=\"newTodoText\" v\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  >\n  <ul>\n    <li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    ></li>\n  </ul>\n</div>\n<script>\nVue.component('todo-item', {\n  template: '\\\n    <li>\\\n      {{ title }}\\\n      <button v-on:click=\"$emit(\\'remove\\')\">X</button>\\\n    </li>\\\n  ',\n  props: ['title']\n})\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})\n</script>\n\n<h2 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h2><p>When Vue.js is updating a list of elements rendered with <code>v-for</code>, it by default uses an “in-place patch” strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will simply patch each element in-place and make sure it reflects what should be rendered at that particular index. This is similar to the behavior of <code>track-by=&quot;$index&quot;</code> in Vue 1.x.</p>\n<p>This default mode is efficient, but only suitable <strong>when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)</strong>.</p>\n<p>To give Vue a hint so that it can track each node’s identity, and thus reuse and reorder existing elements, you need to provide a unique <code>key</code> attribute for each item. An ideal value for <code>key</code> would be the unique id of each item. This special attribute is a rough equivalent to <code>track-by</code> in 1.x, but it works like an attribute, so you need to use <code>v-bind</code> to bind it to dynamic values (using shorthand here):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- content --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is recommended to provide a <code>key</code> with <code>v-for</code> whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.</p>\n<p>Since it’s a generic mechanism for Vue to identify nodes, the <code>key</code> also has other uses that are not specifically tied to <code>v-for</code>, as we will see later in the guide.</p>\n<h2 id=\"Array-Change-Detection\"><a href=\"#Array-Change-Detection\" class=\"headerlink\" title=\"Array Change Detection\"></a>Array Change Detection</h2><h3 id=\"Mutation-Methods\"><a href=\"#Mutation-Methods\" class=\"headerlink\" title=\"Mutation Methods\"></a>Mutation Methods</h3><p>Vue wraps an observed array’s mutation methods so they will also trigger view updates. The wrapped methods are:</p>\n<ul>\n<li><code>push()</code></li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code></li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>You can open the console and play with the previous examples’ <code>items</code> array by calling their mutation methods. For example: <code>example1.items.push({ message: &#39;Baz&#39; })</code>.</p>\n<h3 id=\"Replacing-an-Array\"><a href=\"#Replacing-an-Array\" class=\"headerlink\" title=\"Replacing an Array\"></a>Replacing an Array</h3><p>Mutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g. <code>filter()</code>, <code>concat()</code> and <code>slice()</code>, which do not mutate the original Array but <strong>always return a new array</strong>. When working with non-mutating methods, you can just replace the old array with the new one:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation.</p>\n<h3 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h3><p>Due to limitations in JavaScript, Vue <strong>cannot</strong> detect the following changes to an array:</p>\n<ol>\n<li>When you directly set an item with the index, e.g. <code>vm.items[indexOfItem] = newValue</code></li>\n<li>When you modify the length of the array, e.g. <code>vm.items.length = newLength</code></li>\n</ol>\n<p>To overcome caveat 1, both of the following will accomplish the same as <code>vm.items[indexOfItem] = newValue</code>, but will also trigger state updates in the reactivity system:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Vue.set</span></div><div class=\"line\">Vue.set(example1.items, indexOfItem, newValue)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Array.prototype.splice`</span></div><div class=\"line\">example1.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</div></pre></td></tr></table></figure>\n<p>To deal with caveat 2, you can also use <code>splice</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">example1.items.splice(newLength)</div></pre></td></tr></table></figure>\n<h2 id=\"Displaying-Filtered-Sorted-Results\"><a href=\"#Displaying-Filtered-Sorted-Results\" class=\"headerlink\" title=\"Displaying Filtered/Sorted Results\"></a>Displaying Filtered/Sorted Results</h2><p>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in evenNumbers\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">numbers</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">evenNumbers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Alternatively, you can also just use a method where computed properties are not feasible (e.g. inside nested <code>v-for</code> loops):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in even(numbers)\"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">numbers</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">even</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">numbers</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> numbers.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> number % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Migration from Vue Router 0.7.x","type":"guide","order":26,"_content":"\n> Only Vue Router 2 is compatible with Vue 2, so if you're updating Vue, you'll have to update Vue Router as well. That's why we've included details on the migration path here in the main docs. For a complete guide on using the new Vue Router, see the [Vue Router docs](http://router.vuejs.org/en/).\n\n## Router Initialization\n\n### `router.start` <sup>replaced</sup>\n\nThere is no longer a special API to initialize an app with Vue Router. That means instead of:\n\n``` js\nrouter.start({\n  template: '<router-view></router-view>'\n}, '#app')\n```\n\nYou'll just pass a router property to a Vue instance:\n\n``` js\nnew Vue({\n  el: '#app',\n  router: router,\n  template: '<router-view></router-view>'\n})\n```\n\nOr, if you're using the runtime-only build of Vue:\n\n``` js\nnew Vue({\n  el: '#app',\n  router: router,\n  render: h => h('router-view')\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.start</code> being called.</p>\n</div>\n{% endraw %}\n\n## Route Definitions\n\n### `router.map` <sup>replaced</sup>\n\nRoutes are now defined as an array on a [`routes` option](http://router.vuejs.org/en/essentials/getting-started.html#javascript) at router instantiation. So these routes for example:\n\n``` js\nrouter.map({\n  '/foo': {\n    component: Foo\n  },\n  '/bar': {\n    component: Bar\n  }\n})\n```\n\nWill instead be defined with:\n\n``` js\nvar router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo },\n    { path: '/bar', component: Bar }\n  ]\n})\n```\n\nThe array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same key order across browsers.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.map</code> being called.</p>\n</div>\n{% endraw %}\n\n### `router.on` <sup>removed</sup>\n\nIf you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:\n\n``` js\n// Normal base routes\nvar routes = [\n  // ...\n]\n\n// Dynamically generated routes\nmarketingPages.forEach(function (page) {\n  routes.push({\n    path: '/marketing/' + page.slug\n    component: {\n      extends: MarketingComponent\n      data: function () {\n        return { page: page }\n      }\n    }\n  })\n})\n\nvar router = new Router({\n  routes: routes\n})\n```\n\nIf you need to add new routes after the router has been instantiated, you can replace the router's matcher with a new one that includes the route you'd like to add:\n\n``` js\nrouter.match = createMatcher(\n  [{\n    path: '/my/new/path',\n    component: MyComponent\n  }].concat(router.options.routes)\n)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.on</code> being called.</p>\n</div>\n{% endraw %}\n\n### `subRoutes` <sup>renamed</sup>\n\n[Renamed to `children`](http://router.vuejs.org/en/essentials/nested-routes.html) for consistency within Vue and with other routing libraries.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>subRoutes</code> option.</p>\n</div>\n{% endraw %}\n\n### `router.redirect` <sup>replaced</sup>\n\nThis is now an [option on route definitions](http://router.vuejs.org/en/essentials/redirect-and-alias.html). So for example, you will update:\n\n``` js\nrouter.redirect({\n  '/tos': '/terms-of-service'\n})\n```\n\nto a definition like below in your `routes` configuration:\n\n``` js\n{\n  path: '/tos',\n  redirect: '/terms-of-service'\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.redirect</code> being called.</p>\n</div>\n{% endraw %}\n\n### `router.alias` <sup>replaced</sup>\n\nThis is now an [option on the definition for the route](http://router.vuejs.org/en/essentials/redirect-and-alias.html) you'd like to alias to. So for example, you will update:\n\n``` js\nrouter.alias({\n  '/manage': '/admin'\n})\n```\n\nto a definition like below in your `routes` configuration:\n\n``` js\n{\n  path: '/admin',\n  component: AdminPanel,\n  alias: '/manage'\n}\n```\n\nIf you need multiple aliases, you can also use an array syntax:\n\n``` js\nalias: ['/manage', '/administer', '/administrate']\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.alias</code> being called.</p>\n</div>\n{% endraw %}\n\n### Arbitrary Route Properties <sup>replaced</sup>\n\nArbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:\n\n``` js\n'/admin': {\n  component: AdminPanel,\n  requiresAuth: true\n}\n```\n\nThen you would now update it to:\n\n``` js\n{\n  path: '/admin',\n  component: AdminPanel,\n  meta: {\n    requiresAuth: true\n  }\n}\n```\n\nThen when later accessing this property on a route, you will still go through meta. For example:\n\n``` js\nif (route.meta.requiresAuth) {\n  // ...\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of arbitrary route properties not scoped under meta.</p>\n</div>\n{% endraw %}\n\n## Route Matching\n\nRoute matching now uses [path-to-regexp](https://github.com/pillarjs/path-to-regexp) under the hood, making it much more flexible than previously.\n\n### One or More Named Parameters <sup>changed</sup>\n\nThe syntax has changed slightly, so `/category/*tags` for example, should be updated to `/category/:tags+`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete route syntax.</p>\n</div>\n{% endraw %}\n\n## Links\n\n### `v-link` <sup>replaced</sup>\n\nThe `v-link` directive has been replaced with a new [`<router-link>` component](http://router.vuejs.org/en/api/router-link.html), as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:\n\n``` html\n<a v-link=\"'/about'\">About</a>\n```\n\nYou'll need to update it like this:\n\n``` html\n<router-link to=\"/about\">About</router-link>\n```\n\nNote that `target=\"_blank\"` is not supported on `<router-link>`, so if you need to open a link in a new tab, you have to use `<a>` instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link</code> directive.</p>\n</div>\n{% endraw %}\n\n### `v-link-active` <sup>replaced</sup>\n\nThe `v-link-active` directive has also been replaced by the `tag` attribute on [the `<router-link>` component](http://router.vuejs.org/en/api/router-link.html). So for example, you'll update this:\n\n``` html\n<li v-link-active>\n  <a v-link=\"'/about'\">About</a>\n</li>\n```\n\nto this:\n\n``` html\n<router-link tag=\"li\" to=\"/about\">\n  <a>About</a>\n</router-link>\n```\n\nThe `<a>` will be the actual link (and will get the correct href), but the active class will be applied to the outer `<li>`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link-active</code> directive.</p>\n</div>\n{% endraw %}\n\n## Programmatic Navigation\n\n### `router.go` <sup>changed</sup>\n\nFor consistency with the [HTML5 History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API), `router.go` is now only used for [back/forward navigation](https://router.vuejs.org/en/essentials/navigation.html#routergon), while [`router.push`](http://router.vuejs.org/en/essentials/navigation.html#routerpushlocation) is used to navigate to a specific page.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.go</code> being used where <code>router.push</code> should be used instead.</p>\n</div>\n{% endraw %}\n\n## Router Options: Modes\n\n### `hashbang: false` <sup>removed</sup>\n\nHashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>hashbang: false</code> option.</p>\n</div>\n{% endraw %}\n\n### `history: true` <sup>replaced</sup>\n\nAll routing mode options have been condensed into a single [`mode` option](http://router.vuejs.org/en/api/options.html#mode). Update:\n\n``` js\nvar router = new VueRouter({\n  history: 'true'\n})\n```\n\nto:\n\n``` js\nvar router = new VueRouter({\n  mode: 'history'\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>history: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `abstract: true` <sup>replaced</sup>\n\nAll routing mode options have been condensed into a single [`mode` option](http://router.vuejs.org/en/api/options.html#mode). Update:\n\n``` js\nvar router = new VueRouter({\n  abstract: 'true'\n})\n```\n\nto:\n\n``` js\nvar router = new VueRouter({\n  mode: 'abstract'\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>abstract: true</code> option.</p>\n</div>\n{% endraw %}\n\n## Route Options: Misc\n\n### `saveScrollPosition` <sup>replaced</sup>\n\nThis has been replaced with a [`scrollBehavior` option](http://router.vuejs.org/en/advanced/scroll-behavior.html) that accepts a function, so that the scroll behavior is completely customizable - even per route. This opens many new possibilities, but to simply replicate the old behavior of:\n\n``` js\nsaveScrollPosition: true\n```\n\nYou can replace it with:\n\n``` js\nscrollBehavior: function (to, from, savedPosition) {\n  return savedPosition || { x: 0, y: 0 }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>saveScrollPosition: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `root` <sup>renamed</sup>\n\nRenamed to `base` for consistency with [the HTML `<base>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>root</code> option.</p>\n</div>\n{% endraw %}\n\n### `transitionOnLoad` <sup>removed</sup>\n\nThis option is no longer necessary now that Vue's transition system has explicit [`appear` transition control](transitions.html#Transitions-on-Initial-Render).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transitionOnLoad: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `suppressTransitionError` <sup>removed</sup>\n\nRemoved due to hooks simplification. If you really must suppress transition errors, you can use [`try`...`catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>suppressTransitionError: true</code> option.</p>\n</div>\n{% endraw %}\n\n## Route Hooks\n\n### `activate` <sup>replaced</sup>\n\nUse [`beforeRouteEnter`](http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards) in the component instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>beforeRouteEnter</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canActivate` <sup>replaced</sup>\n\nUse [`beforeEnter`](http://router.vuejs.org/en/advanced/navigation-guards.html#perroute-guard) in the route instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canActivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `deactivate` <sup>removed</sup>\n\nUse the component's [`beforeDestroy`](../api/#beforeDestroy) or [`destroyed`](../api/#destroyed) hooks instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>deactivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canDeactivate` <sup>replaced</sup>\n\nUse [`beforeRouteLeave`](http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards) in the component instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canDeactivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canReuse: false` <sup>removed</sup>\n\nThere's no longer a use case for this in the new Vue Router.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canReuse: false</code> option.</p>\n</div>\n{% endraw %}\n\n### `data` <sup>replaced</sup>\n\nThe `$route` property is now reactive, so you can just use a watcher to react to route changes, like this:\n\n``` js\nwatch: {\n  '$route': 'fetchData'\n},\nmethods: {\n  fetchData: function () {\n    // ...\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>data</code> hook.</p>\n</div>\n{% endraw %}\n\n### `$loadingRouteData` <sup>removed</sup>\n\nDefine your own property (e.g. `isLoading`), then update the loading state in a watcher on the route. For example, if fetching data with [axios](https://github.com/mzabriskie/axios):\n\n``` js\ndata: function () {\n  return {\n    posts: [],\n    isLoading: false,\n    fetchError: null\n  }\n},\nwatch: {\n  '$route': function () {\n    var self = this\n    self.isLoading = true\n    self.fetchData().then(function () {\n      self.isLoading = false\n    })\n  }\n},\nmethods: {\n  fetchData: function () {\n    var self = this\n    return axios.get('/api/posts')\n      .then(function (response) {\n        self.posts = response.data.posts\n      })\n      .catch(function (error) {\n        self.fetchError = error\n      })\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>$loadingRouteData</code> meta property.</p>\n</div>\n{% endraw %}\n","source":"v2/guide/migration-vue-router.md","raw":"---\ntitle: Migration from Vue Router 0.7.x\ntype: guide\norder: 26\n---\n\n> Only Vue Router 2 is compatible with Vue 2, so if you're updating Vue, you'll have to update Vue Router as well. That's why we've included details on the migration path here in the main docs. For a complete guide on using the new Vue Router, see the [Vue Router docs](http://router.vuejs.org/en/).\n\n## Router Initialization\n\n### `router.start` <sup>replaced</sup>\n\nThere is no longer a special API to initialize an app with Vue Router. That means instead of:\n\n``` js\nrouter.start({\n  template: '<router-view></router-view>'\n}, '#app')\n```\n\nYou'll just pass a router property to a Vue instance:\n\n``` js\nnew Vue({\n  el: '#app',\n  router: router,\n  template: '<router-view></router-view>'\n})\n```\n\nOr, if you're using the runtime-only build of Vue:\n\n``` js\nnew Vue({\n  el: '#app',\n  router: router,\n  render: h => h('router-view')\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.start</code> being called.</p>\n</div>\n{% endraw %}\n\n## Route Definitions\n\n### `router.map` <sup>replaced</sup>\n\nRoutes are now defined as an array on a [`routes` option](http://router.vuejs.org/en/essentials/getting-started.html#javascript) at router instantiation. So these routes for example:\n\n``` js\nrouter.map({\n  '/foo': {\n    component: Foo\n  },\n  '/bar': {\n    component: Bar\n  }\n})\n```\n\nWill instead be defined with:\n\n``` js\nvar router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo },\n    { path: '/bar', component: Bar }\n  ]\n})\n```\n\nThe array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same key order across browsers.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.map</code> being called.</p>\n</div>\n{% endraw %}\n\n### `router.on` <sup>removed</sup>\n\nIf you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:\n\n``` js\n// Normal base routes\nvar routes = [\n  // ...\n]\n\n// Dynamically generated routes\nmarketingPages.forEach(function (page) {\n  routes.push({\n    path: '/marketing/' + page.slug\n    component: {\n      extends: MarketingComponent\n      data: function () {\n        return { page: page }\n      }\n    }\n  })\n})\n\nvar router = new Router({\n  routes: routes\n})\n```\n\nIf you need to add new routes after the router has been instantiated, you can replace the router's matcher with a new one that includes the route you'd like to add:\n\n``` js\nrouter.match = createMatcher(\n  [{\n    path: '/my/new/path',\n    component: MyComponent\n  }].concat(router.options.routes)\n)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.on</code> being called.</p>\n</div>\n{% endraw %}\n\n### `subRoutes` <sup>renamed</sup>\n\n[Renamed to `children`](http://router.vuejs.org/en/essentials/nested-routes.html) for consistency within Vue and with other routing libraries.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>subRoutes</code> option.</p>\n</div>\n{% endraw %}\n\n### `router.redirect` <sup>replaced</sup>\n\nThis is now an [option on route definitions](http://router.vuejs.org/en/essentials/redirect-and-alias.html). So for example, you will update:\n\n``` js\nrouter.redirect({\n  '/tos': '/terms-of-service'\n})\n```\n\nto a definition like below in your `routes` configuration:\n\n``` js\n{\n  path: '/tos',\n  redirect: '/terms-of-service'\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.redirect</code> being called.</p>\n</div>\n{% endraw %}\n\n### `router.alias` <sup>replaced</sup>\n\nThis is now an [option on the definition for the route](http://router.vuejs.org/en/essentials/redirect-and-alias.html) you'd like to alias to. So for example, you will update:\n\n``` js\nrouter.alias({\n  '/manage': '/admin'\n})\n```\n\nto a definition like below in your `routes` configuration:\n\n``` js\n{\n  path: '/admin',\n  component: AdminPanel,\n  alias: '/manage'\n}\n```\n\nIf you need multiple aliases, you can also use an array syntax:\n\n``` js\nalias: ['/manage', '/administer', '/administrate']\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.alias</code> being called.</p>\n</div>\n{% endraw %}\n\n### Arbitrary Route Properties <sup>replaced</sup>\n\nArbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:\n\n``` js\n'/admin': {\n  component: AdminPanel,\n  requiresAuth: true\n}\n```\n\nThen you would now update it to:\n\n``` js\n{\n  path: '/admin',\n  component: AdminPanel,\n  meta: {\n    requiresAuth: true\n  }\n}\n```\n\nThen when later accessing this property on a route, you will still go through meta. For example:\n\n``` js\nif (route.meta.requiresAuth) {\n  // ...\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of arbitrary route properties not scoped under meta.</p>\n</div>\n{% endraw %}\n\n## Route Matching\n\nRoute matching now uses [path-to-regexp](https://github.com/pillarjs/path-to-regexp) under the hood, making it much more flexible than previously.\n\n### One or More Named Parameters <sup>changed</sup>\n\nThe syntax has changed slightly, so `/category/*tags` for example, should be updated to `/category/:tags+`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete route syntax.</p>\n</div>\n{% endraw %}\n\n## Links\n\n### `v-link` <sup>replaced</sup>\n\nThe `v-link` directive has been replaced with a new [`<router-link>` component](http://router.vuejs.org/en/api/router-link.html), as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:\n\n``` html\n<a v-link=\"'/about'\">About</a>\n```\n\nYou'll need to update it like this:\n\n``` html\n<router-link to=\"/about\">About</router-link>\n```\n\nNote that `target=\"_blank\"` is not supported on `<router-link>`, so if you need to open a link in a new tab, you have to use `<a>` instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link</code> directive.</p>\n</div>\n{% endraw %}\n\n### `v-link-active` <sup>replaced</sup>\n\nThe `v-link-active` directive has also been replaced by the `tag` attribute on [the `<router-link>` component](http://router.vuejs.org/en/api/router-link.html). So for example, you'll update this:\n\n``` html\n<li v-link-active>\n  <a v-link=\"'/about'\">About</a>\n</li>\n```\n\nto this:\n\n``` html\n<router-link tag=\"li\" to=\"/about\">\n  <a>About</a>\n</router-link>\n```\n\nThe `<a>` will be the actual link (and will get the correct href), but the active class will be applied to the outer `<li>`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link-active</code> directive.</p>\n</div>\n{% endraw %}\n\n## Programmatic Navigation\n\n### `router.go` <sup>changed</sup>\n\nFor consistency with the [HTML5 History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API), `router.go` is now only used for [back/forward navigation](https://router.vuejs.org/en/essentials/navigation.html#routergon), while [`router.push`](http://router.vuejs.org/en/essentials/navigation.html#routerpushlocation) is used to navigate to a specific page.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.go</code> being used where <code>router.push</code> should be used instead.</p>\n</div>\n{% endraw %}\n\n## Router Options: Modes\n\n### `hashbang: false` <sup>removed</sup>\n\nHashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>hashbang: false</code> option.</p>\n</div>\n{% endraw %}\n\n### `history: true` <sup>replaced</sup>\n\nAll routing mode options have been condensed into a single [`mode` option](http://router.vuejs.org/en/api/options.html#mode). Update:\n\n``` js\nvar router = new VueRouter({\n  history: 'true'\n})\n```\n\nto:\n\n``` js\nvar router = new VueRouter({\n  mode: 'history'\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>history: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `abstract: true` <sup>replaced</sup>\n\nAll routing mode options have been condensed into a single [`mode` option](http://router.vuejs.org/en/api/options.html#mode). Update:\n\n``` js\nvar router = new VueRouter({\n  abstract: 'true'\n})\n```\n\nto:\n\n``` js\nvar router = new VueRouter({\n  mode: 'abstract'\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>abstract: true</code> option.</p>\n</div>\n{% endraw %}\n\n## Route Options: Misc\n\n### `saveScrollPosition` <sup>replaced</sup>\n\nThis has been replaced with a [`scrollBehavior` option](http://router.vuejs.org/en/advanced/scroll-behavior.html) that accepts a function, so that the scroll behavior is completely customizable - even per route. This opens many new possibilities, but to simply replicate the old behavior of:\n\n``` js\nsaveScrollPosition: true\n```\n\nYou can replace it with:\n\n``` js\nscrollBehavior: function (to, from, savedPosition) {\n  return savedPosition || { x: 0, y: 0 }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>saveScrollPosition: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `root` <sup>renamed</sup>\n\nRenamed to `base` for consistency with [the HTML `<base>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>root</code> option.</p>\n</div>\n{% endraw %}\n\n### `transitionOnLoad` <sup>removed</sup>\n\nThis option is no longer necessary now that Vue's transition system has explicit [`appear` transition control](transitions.html#Transitions-on-Initial-Render).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transitionOnLoad: true</code> option.</p>\n</div>\n{% endraw %}\n\n### `suppressTransitionError` <sup>removed</sup>\n\nRemoved due to hooks simplification. If you really must suppress transition errors, you can use [`try`...`catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>suppressTransitionError: true</code> option.</p>\n</div>\n{% endraw %}\n\n## Route Hooks\n\n### `activate` <sup>replaced</sup>\n\nUse [`beforeRouteEnter`](http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards) in the component instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>beforeRouteEnter</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canActivate` <sup>replaced</sup>\n\nUse [`beforeEnter`](http://router.vuejs.org/en/advanced/navigation-guards.html#perroute-guard) in the route instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canActivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `deactivate` <sup>removed</sup>\n\nUse the component's [`beforeDestroy`](../api/#beforeDestroy) or [`destroyed`](../api/#destroyed) hooks instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>deactivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canDeactivate` <sup>replaced</sup>\n\nUse [`beforeRouteLeave`](http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards) in the component instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canDeactivate</code> hook.</p>\n</div>\n{% endraw %}\n\n### `canReuse: false` <sup>removed</sup>\n\nThere's no longer a use case for this in the new Vue Router.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canReuse: false</code> option.</p>\n</div>\n{% endraw %}\n\n### `data` <sup>replaced</sup>\n\nThe `$route` property is now reactive, so you can just use a watcher to react to route changes, like this:\n\n``` js\nwatch: {\n  '$route': 'fetchData'\n},\nmethods: {\n  fetchData: function () {\n    // ...\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>data</code> hook.</p>\n</div>\n{% endraw %}\n\n### `$loadingRouteData` <sup>removed</sup>\n\nDefine your own property (e.g. `isLoading`), then update the loading state in a watcher on the route. For example, if fetching data with [axios](https://github.com/mzabriskie/axios):\n\n``` js\ndata: function () {\n  return {\n    posts: [],\n    isLoading: false,\n    fetchError: null\n  }\n},\nwatch: {\n  '$route': function () {\n    var self = this\n    self.isLoading = true\n    self.fetchData().then(function () {\n      self.isLoading = false\n    })\n  }\n},\nmethods: {\n  fetchData: function () {\n    var self = this\n    return axios.get('/api/posts')\n      .then(function (response) {\n        self.posts = response.data.posts\n      })\n      .catch(function (error) {\n        self.fetchError = error\n      })\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>$loadingRouteData</code> meta property.</p>\n</div>\n{% endraw %}\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/migration-vue-router.html","comments":1,"layout":"page","_id":"civ8jcjoo001491m181furc3v","content":"<blockquote>\n<p>Only Vue Router 2 is compatible with Vue 2, so if you’re updating Vue, you’ll have to update Vue Router as well. That’s why we’ve included details on the migration path here in the main docs. For a complete guide on using the new Vue Router, see the <a href=\"http://router.vuejs.org/en/\" target=\"_blank\" rel=\"external\">Vue Router docs</a>.</p>\n</blockquote>\n<h2 id=\"Router-Initialization\"><a href=\"#Router-Initialization\" class=\"headerlink\" title=\"Router Initialization\"></a>Router Initialization</h2><h3 id=\"router-start-replaced\"><a href=\"#router-start-replaced\" class=\"headerlink\" title=\"router.start replaced\"></a><code>router.start</code> <sup>replaced</sup></h3><p>There is no longer a special API to initialize an app with Vue Router. That means instead of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.start(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></div><div class=\"line\">&#125;, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<p>You’ll just pass a router property to a Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">router</span>: router,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or, if you’re using the runtime-only build of Vue:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">router</span>: router,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">'router-view'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.start</code> being called.</p>\n</div>\n\n<h2 id=\"Route-Definitions\"><a href=\"#Route-Definitions\" class=\"headerlink\" title=\"Route Definitions\"></a>Route Definitions</h2><h3 id=\"router-map-replaced\"><a href=\"#router-map-replaced\" class=\"headerlink\" title=\"router.map replaced\"></a><code>router.map</code> <sup>replaced</sup></h3><p>Routes are now defined as an array on a <a href=\"http://router.vuejs.org/en/essentials/getting-started.html#javascript\" target=\"_blank\" rel=\"external\"><code>routes</code> option</a> at router instantiation. So these routes for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.map(&#123;</div><div class=\"line\">  <span class=\"string\">'/foo'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">component</span>: Foo</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'/bar'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">component</span>: Bar</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Will instead be defined with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/foo'</span>, <span class=\"attr\">component</span>: Foo &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/bar'</span>, <span class=\"attr\">component</span>: Bar &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same key order across browsers.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.map</code> being called.</p>\n</div>\n\n<h3 id=\"router-on-removed\"><a href=\"#router-on-removed\" class=\"headerlink\" title=\"router.on removed\"></a><code>router.on</code> <sup>removed</sup></h3><p>If you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Normal base routes</span></div><div class=\"line\"><span class=\"keyword\">var</span> routes = [</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Dynamically generated routes</span></div><div class=\"line\">marketingPages.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  routes.push(&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/marketing/'</span> + page.slug</div><div class=\"line\">    component: &#123;</div><div class=\"line\">      <span class=\"attr\">extends</span>: MarketingComponent</div><div class=\"line\">      data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">page</span>: page &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: routes</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you need to add new routes after the router has been instantiated, you can replace the router’s matcher with a new one that includes the route you’d like to add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.match = createMatcher(</div><div class=\"line\">  [&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/my/new/path'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: MyComponent</div><div class=\"line\">  &#125;].concat(router.options.routes)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.on</code> being called.</p>\n</div>\n\n<h3 id=\"subRoutes-renamed\"><a href=\"#subRoutes-renamed\" class=\"headerlink\" title=\"subRoutes renamed\"></a><code>subRoutes</code> <sup>renamed</sup></h3><p><a href=\"http://router.vuejs.org/en/essentials/nested-routes.html\" target=\"_blank\" rel=\"external\">Renamed to <code>children</code></a> for consistency within Vue and with other routing libraries.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>subRoutes</code> option.</p>\n</div>\n\n<h3 id=\"router-redirect-replaced\"><a href=\"#router-redirect-replaced\" class=\"headerlink\" title=\"router.redirect replaced\"></a><code>router.redirect</code> <sup>replaced</sup></h3><p>This is now an <a href=\"http://router.vuejs.org/en/essentials/redirect-and-alias.html\" target=\"_blank\" rel=\"external\">option on route definitions</a>. So for example, you will update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.redirect(&#123;</div><div class=\"line\">  <span class=\"string\">'/tos'</span>: <span class=\"string\">'/terms-of-service'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to a definition like below in your <code>routes</code> configuration:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/tos'</span>,</div><div class=\"line\">  <span class=\"attr\">redirect</span>: <span class=\"string\">'/terms-of-service'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.redirect</code> being called.</p>\n</div>\n\n<h3 id=\"router-alias-replaced\"><a href=\"#router-alias-replaced\" class=\"headerlink\" title=\"router.alias replaced\"></a><code>router.alias</code> <sup>replaced</sup></h3><p>This is now an <a href=\"http://router.vuejs.org/en/essentials/redirect-and-alias.html\" target=\"_blank\" rel=\"external\">option on the definition for the route</a> you’d like to alias to. So for example, you will update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.alias(&#123;</div><div class=\"line\">  <span class=\"string\">'/manage'</span>: <span class=\"string\">'/admin'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to a definition like below in your <code>routes</code> configuration:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/admin'</span>,</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">alias</span>: <span class=\"string\">'/manage'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you need multiple aliases, you can also use an array syntax:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">alias: [<span class=\"string\">'/manage'</span>, <span class=\"string\">'/administer'</span>, <span class=\"string\">'/administrate'</span>]</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.alias</code> being called.</p>\n</div>\n\n<h3 id=\"Arbitrary-Route-Properties-replaced\"><a href=\"#Arbitrary-Route-Properties-replaced\" class=\"headerlink\" title=\"Arbitrary Route Properties replaced\"></a>Arbitrary Route Properties <sup>replaced</sup></h3><p>Arbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'/admin'</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then you would now update it to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/admin'</span>,</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then when later accessing this property on a route, you will still go through meta. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (route.meta.requiresAuth) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of arbitrary route properties not scoped under meta.</p>\n</div>\n\n<h2 id=\"Route-Matching\"><a href=\"#Route-Matching\" class=\"headerlink\" title=\"Route Matching\"></a>Route Matching</h2><p>Route matching now uses <a href=\"https://github.com/pillarjs/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a> under the hood, making it much more flexible than previously.</p>\n<h3 id=\"One-or-More-Named-Parameters-changed\"><a href=\"#One-or-More-Named-Parameters-changed\" class=\"headerlink\" title=\"One or More Named Parameters changed\"></a>One or More Named Parameters <sup>changed</sup></h3><p>The syntax has changed slightly, so <code>/category/*tags</code> for example, should be updated to <code>/category/:tags+</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete route syntax.</p>\n</div>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><h3 id=\"v-link-replaced\"><a href=\"#v-link-replaced\" class=\"headerlink\" title=\"v-link replaced\"></a><code>v-link</code> <sup>replaced</sup></h3><p>The <code>v-link</code> directive has been replaced with a new <a href=\"http://router.vuejs.org/en/api/router-link.html\" target=\"_blank\" rel=\"external\"><code>&lt;router-link&gt;</code> component</a>, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You’ll need to update it like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Note that <code>target=&quot;_blank&quot;</code> is not supported on <code>&lt;router-link&gt;</code>, so if you need to open a link in a new tab, you have to use <code>&lt;a&gt;</code> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>v-link</code> directive.</p>\n</div>\n\n<h3 id=\"v-link-active-replaced\"><a href=\"#v-link-active-replaced\" class=\"headerlink\" title=\"v-link-active replaced\"></a><code>v-link-active</code> <sup>replaced</sup></h3><p>The <code>v-link-active</code> directive has also been replaced by the <code>tag</code> attribute on <a href=\"http://router.vuejs.org/en/api/router-link.html\" target=\"_blank\" rel=\"external\">the <code>&lt;router-link&gt;</code> component</a>. So for example, you’ll update this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-link-active</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>to this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;a&gt;</code> will be the actual link (and will get the correct href), but the active class will be applied to the outer <code>&lt;li&gt;</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>v-link-active</code> directive.</p>\n</div>\n\n<h2 id=\"Programmatic-Navigation\"><a href=\"#Programmatic-Navigation\" class=\"headerlink\" title=\"Programmatic Navigation\"></a>Programmatic Navigation</h2><h3 id=\"router-go-changed\"><a href=\"#router-go-changed\" class=\"headerlink\" title=\"router.go changed\"></a><code>router.go</code> <sup>changed</sup></h3><p>For consistency with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" target=\"_blank\" rel=\"external\">HTML5 History API</a>, <code>router.go</code> is now only used for <a href=\"https://router.vuejs.org/en/essentials/navigation.html#routergon\" target=\"_blank\" rel=\"external\">back/forward navigation</a>, while <a href=\"http://router.vuejs.org/en/essentials/navigation.html#routerpushlocation\" target=\"_blank\" rel=\"external\"><code>router.push</code></a> is used to navigate to a specific page.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>router.go</code> being used where <code>router.push</code> should be used instead.</p>\n</div>\n\n<h2 id=\"Router-Options-Modes\"><a href=\"#Router-Options-Modes\" class=\"headerlink\" title=\"Router Options: Modes\"></a>Router Options: Modes</h2><h3 id=\"hashbang-false-removed\"><a href=\"#hashbang-false-removed\" class=\"headerlink\" title=\"hashbang: false removed\"></a><code>hashbang: false</code> <sup>removed</sup></h3><p>Hashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>hashbang: false</code> option.</p>\n</div>\n\n<h3 id=\"history-true-replaced\"><a href=\"#history-true-replaced\" class=\"headerlink\" title=\"history: true replaced\"></a><code>history: true</code> <sup>replaced</sup></h3><p>All routing mode options have been condensed into a single <a href=\"http://router.vuejs.org/en/api/options.html#mode\" target=\"_blank\" rel=\"external\"><code>mode</code> option</a>. Update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">history</span>: <span class=\"string\">'true'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">'history'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>history: true</code> option.</p>\n</div>\n\n<h3 id=\"abstract-true-replaced\"><a href=\"#abstract-true-replaced\" class=\"headerlink\" title=\"abstract: true replaced\"></a><code>abstract: true</code> <sup>replaced</sup></h3><p>All routing mode options have been condensed into a single <a href=\"http://router.vuejs.org/en/api/options.html#mode\" target=\"_blank\" rel=\"external\"><code>mode</code> option</a>. Update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">abstract</span>: <span class=\"string\">'true'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">'abstract'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>abstract: true</code> option.</p>\n</div>\n\n<h2 id=\"Route-Options-Misc\"><a href=\"#Route-Options-Misc\" class=\"headerlink\" title=\"Route Options: Misc\"></a>Route Options: Misc</h2><h3 id=\"saveScrollPosition-replaced\"><a href=\"#saveScrollPosition-replaced\" class=\"headerlink\" title=\"saveScrollPosition replaced\"></a><code>saveScrollPosition</code> <sup>replaced</sup></h3><p>This has been replaced with a <a href=\"http://router.vuejs.org/en/advanced/scroll-behavior.html\" target=\"_blank\" rel=\"external\"><code>scrollBehavior</code> option</a> that accepts a function, so that the scroll behavior is completely customizable - even per route. This opens many new possibilities, but to simply replicate the old behavior of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">saveScrollPosition: <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>You can replace it with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">scrollBehavior: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">to, from, savedPosition</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> savedPosition || &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>saveScrollPosition: true</code> option.</p>\n</div>\n\n<h3 id=\"root-renamed\"><a href=\"#root-renamed\" class=\"headerlink\" title=\"root renamed\"></a><code>root</code> <sup>renamed</sup></h3><p>Renamed to <code>base</code> for consistency with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" target=\"_blank\" rel=\"external\">the HTML <code>&lt;base&gt;</code> element</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>root</code> option.</p>\n</div>\n\n<h3 id=\"transitionOnLoad-removed\"><a href=\"#transitionOnLoad-removed\" class=\"headerlink\" title=\"transitionOnLoad removed\"></a><code>transitionOnLoad</code> <sup>removed</sup></h3><p>This option is no longer necessary now that Vue’s transition system has explicit <a href=\"transitions.html#Transitions-on-Initial-Render\"><code>appear</code> transition control</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>transitionOnLoad: true</code> option.</p>\n</div>\n\n<h3 id=\"suppressTransitionError-removed\"><a href=\"#suppressTransitionError-removed\" class=\"headerlink\" title=\"suppressTransitionError removed\"></a><code>suppressTransitionError</code> <sup>removed</sup></h3><p>Removed due to hooks simplification. If you really must suppress transition errors, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\" target=\"_blank\" rel=\"external\"><code>try</code>…<code>catch</code></a> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>suppressTransitionError: true</code> option.</p>\n</div>\n\n<h2 id=\"Route-Hooks\"><a href=\"#Route-Hooks\" class=\"headerlink\" title=\"Route Hooks\"></a>Route Hooks</h2><h3 id=\"activate-replaced\"><a href=\"#activate-replaced\" class=\"headerlink\" title=\"activate replaced\"></a><code>activate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards\" target=\"_blank\" rel=\"external\"><code>beforeRouteEnter</code></a> in the component instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>beforeRouteEnter</code> hook.</p>\n</div>\n\n<h3 id=\"canActivate-replaced\"><a href=\"#canActivate-replaced\" class=\"headerlink\" title=\"canActivate replaced\"></a><code>canActivate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#perroute-guard\" target=\"_blank\" rel=\"external\"><code>beforeEnter</code></a> in the route instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>canActivate</code> hook.</p>\n</div>\n\n<h3 id=\"deactivate-removed\"><a href=\"#deactivate-removed\" class=\"headerlink\" title=\"deactivate removed\"></a><code>deactivate</code> <sup>removed</sup></h3><p>Use the component’s <a href=\"../api/#beforeDestroy\"><code>beforeDestroy</code></a> or <a href=\"../api/#destroyed\"><code>destroyed</code></a> hooks instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>deactivate</code> hook.</p>\n</div>\n\n<h3 id=\"canDeactivate-replaced\"><a href=\"#canDeactivate-replaced\" class=\"headerlink\" title=\"canDeactivate replaced\"></a><code>canDeactivate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards\" target=\"_blank\" rel=\"external\"><code>beforeRouteLeave</code></a> in the component instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>canDeactivate</code> hook.</p>\n</div>\n\n<h3 id=\"canReuse-false-removed\"><a href=\"#canReuse-false-removed\" class=\"headerlink\" title=\"canReuse: false removed\"></a><code>canReuse: false</code> <sup>removed</sup></h3><p>There’s no longer a use case for this in the new Vue Router.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>canReuse: false</code> option.</p>\n</div>\n\n<h3 id=\"data-replaced\"><a href=\"#data-replaced\" class=\"headerlink\" title=\"data replaced\"></a><code>data</code> <sup>replaced</sup></h3><p>The <code>$route</code> property is now reactive, so you can just use a watcher to react to route changes, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">watch: &#123;</div><div class=\"line\">  <span class=\"string\">'$route'</span>: <span class=\"string\">'fetchData'</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">fetchData</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>data</code> hook.</p>\n</div>\n\n<h3 id=\"loadingRouteData-removed\"><a href=\"#loadingRouteData-removed\" class=\"headerlink\" title=\"$loadingRouteData removed\"></a><code>$loadingRouteData</code> <sup>removed</sup></h3><p>Define your own property (e.g. <code>isLoading</code>), then update the loading state in a watcher on the route. For example, if fetching data with <a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">posts</span>: [],</div><div class=\"line\">    <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">fetchError</span>: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">  <span class=\"string\">'$route'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    self.isLoading = <span class=\"literal\">true</span></div><div class=\"line\">    self.fetchData().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      self.isLoading = <span class=\"literal\">false</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">fetchData</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/api/posts'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        self.posts = response.data.posts</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        self.fetchError = error</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>$loadingRouteData</code> meta property.</p>\n</div>\n\n","excerpt":"","more":"<blockquote>\n<p>Only Vue Router 2 is compatible with Vue 2, so if you’re updating Vue, you’ll have to update Vue Router as well. That’s why we’ve included details on the migration path here in the main docs. For a complete guide on using the new Vue Router, see the <a href=\"http://router.vuejs.org/en/\">Vue Router docs</a>.</p>\n</blockquote>\n<h2 id=\"Router-Initialization\"><a href=\"#Router-Initialization\" class=\"headerlink\" title=\"Router Initialization\"></a>Router Initialization</h2><h3 id=\"router-start-replaced\"><a href=\"#router-start-replaced\" class=\"headerlink\" title=\"router.start replaced\"></a><code>router.start</code> <sup>replaced</sup></h3><p>There is no longer a special API to initialize an app with Vue Router. That means instead of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.start(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></div><div class=\"line\">&#125;, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<p>You’ll just pass a router property to a Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">router</span>: router,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or, if you’re using the runtime-only build of Vue:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">router</span>: router,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">'router-view'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.start</code> being called.</p>\n</div>\n\n<h2 id=\"Route-Definitions\"><a href=\"#Route-Definitions\" class=\"headerlink\" title=\"Route Definitions\"></a>Route Definitions</h2><h3 id=\"router-map-replaced\"><a href=\"#router-map-replaced\" class=\"headerlink\" title=\"router.map replaced\"></a><code>router.map</code> <sup>replaced</sup></h3><p>Routes are now defined as an array on a <a href=\"http://router.vuejs.org/en/essentials/getting-started.html#javascript\"><code>routes</code> option</a> at router instantiation. So these routes for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.map(&#123;</div><div class=\"line\">  <span class=\"string\">'/foo'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">component</span>: Foo</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'/bar'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">component</span>: Bar</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Will instead be defined with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/foo'</span>, <span class=\"attr\">component</span>: Foo &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/bar'</span>, <span class=\"attr\">component</span>: Bar &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same key order across browsers.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.map</code> being called.</p>\n</div>\n\n<h3 id=\"router-on-removed\"><a href=\"#router-on-removed\" class=\"headerlink\" title=\"router.on removed\"></a><code>router.on</code> <sup>removed</sup></h3><p>If you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Normal base routes</span></div><div class=\"line\"><span class=\"keyword\">var</span> routes = [</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Dynamically generated routes</span></div><div class=\"line\">marketingPages.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>&#123;</div><div class=\"line\">  routes.push(&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/marketing/'</span> + page.slug</div><div class=\"line\">    component: &#123;</div><div class=\"line\">      <span class=\"attr\">extends</span>: MarketingComponent</div><div class=\"line\">      data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">page</span>: page &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">  <span class=\"attr\">routes</span>: routes</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you need to add new routes after the router has been instantiated, you can replace the router’s matcher with a new one that includes the route you’d like to add:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.match = createMatcher(</div><div class=\"line\">  [&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/my/new/path'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: MyComponent</div><div class=\"line\">  &#125;].concat(router.options.routes)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.on</code> being called.</p>\n</div>\n\n<h3 id=\"subRoutes-renamed\"><a href=\"#subRoutes-renamed\" class=\"headerlink\" title=\"subRoutes renamed\"></a><code>subRoutes</code> <sup>renamed</sup></h3><p><a href=\"http://router.vuejs.org/en/essentials/nested-routes.html\">Renamed to <code>children</code></a> for consistency within Vue and with other routing libraries.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>subRoutes</code> option.</p>\n</div>\n\n<h3 id=\"router-redirect-replaced\"><a href=\"#router-redirect-replaced\" class=\"headerlink\" title=\"router.redirect replaced\"></a><code>router.redirect</code> <sup>replaced</sup></h3><p>This is now an <a href=\"http://router.vuejs.org/en/essentials/redirect-and-alias.html\">option on route definitions</a>. So for example, you will update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.redirect(&#123;</div><div class=\"line\">  <span class=\"string\">'/tos'</span>: <span class=\"string\">'/terms-of-service'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to a definition like below in your <code>routes</code> configuration:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/tos'</span>,</div><div class=\"line\">  <span class=\"attr\">redirect</span>: <span class=\"string\">'/terms-of-service'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.redirect</code> being called.</p>\n</div>\n\n<h3 id=\"router-alias-replaced\"><a href=\"#router-alias-replaced\" class=\"headerlink\" title=\"router.alias replaced\"></a><code>router.alias</code> <sup>replaced</sup></h3><p>This is now an <a href=\"http://router.vuejs.org/en/essentials/redirect-and-alias.html\">option on the definition for the route</a> you’d like to alias to. So for example, you will update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">router.alias(&#123;</div><div class=\"line\">  <span class=\"string\">'/manage'</span>: <span class=\"string\">'/admin'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to a definition like below in your <code>routes</code> configuration:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/admin'</span>,</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">alias</span>: <span class=\"string\">'/manage'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you need multiple aliases, you can also use an array syntax:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">alias: [<span class=\"string\">'/manage'</span>, <span class=\"string\">'/administer'</span>, <span class=\"string\">'/administrate'</span>]</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.alias</code> being called.</p>\n</div>\n\n<h3 id=\"Arbitrary-Route-Properties-replaced\"><a href=\"#Arbitrary-Route-Properties-replaced\" class=\"headerlink\" title=\"Arbitrary Route Properties replaced\"></a>Arbitrary Route Properties <sup>replaced</sup></h3><p>Arbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'/admin'</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then you would now update it to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">'/admin'</span>,</div><div class=\"line\">  <span class=\"attr\">component</span>: AdminPanel,</div><div class=\"line\">  <span class=\"attr\">meta</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then when later accessing this property on a route, you will still go through meta. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (route.meta.requiresAuth) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of arbitrary route properties not scoped under meta.</p>\n</div>\n\n<h2 id=\"Route-Matching\"><a href=\"#Route-Matching\" class=\"headerlink\" title=\"Route Matching\"></a>Route Matching</h2><p>Route matching now uses <a href=\"https://github.com/pillarjs/path-to-regexp\">path-to-regexp</a> under the hood, making it much more flexible than previously.</p>\n<h3 id=\"One-or-More-Named-Parameters-changed\"><a href=\"#One-or-More-Named-Parameters-changed\" class=\"headerlink\" title=\"One or More Named Parameters changed\"></a>One or More Named Parameters <sup>changed</sup></h3><p>The syntax has changed slightly, so <code>/category/*tags</code> for example, should be updated to <code>/category/:tags+</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete route syntax.</p>\n</div>\n\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><h3 id=\"v-link-replaced\"><a href=\"#v-link-replaced\" class=\"headerlink\" title=\"v-link replaced\"></a><code>v-link</code> <sup>replaced</sup></h3><p>The <code>v-link</code> directive has been replaced with a new <a href=\"http://router.vuejs.org/en/api/router-link.html\"><code>&lt;router-link&gt;</code> component</a>, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You’ll need to update it like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Note that <code>target=&quot;_blank&quot;</code> is not supported on <code>&lt;router-link&gt;</code>, so if you need to open a link in a new tab, you have to use <code>&lt;a&gt;</code> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link</code> directive.</p>\n</div>\n\n<h3 id=\"v-link-active-replaced\"><a href=\"#v-link-active-replaced\" class=\"headerlink\" title=\"v-link-active replaced\"></a><code>v-link-active</code> <sup>replaced</sup></h3><p>The <code>v-link-active</code> directive has also been replaced by the <code>tag</code> attribute on <a href=\"http://router.vuejs.org/en/api/router-link.html\">the <code>&lt;router-link&gt;</code> component</a>. So for example, you’ll update this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-link-active</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>to this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;a&gt;</code> will be the actual link (and will get the correct href), but the active class will be applied to the outer <code>&lt;li&gt;</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-link-active</code> directive.</p>\n</div>\n\n<h2 id=\"Programmatic-Navigation\"><a href=\"#Programmatic-Navigation\" class=\"headerlink\" title=\"Programmatic Navigation\"></a>Programmatic Navigation</h2><h3 id=\"router-go-changed\"><a href=\"#router-go-changed\" class=\"headerlink\" title=\"router.go changed\"></a><code>router.go</code> <sup>changed</sup></h3><p>For consistency with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\">HTML5 History API</a>, <code>router.go</code> is now only used for <a href=\"https://router.vuejs.org/en/essentials/navigation.html#routergon\">back/forward navigation</a>, while <a href=\"http://router.vuejs.org/en/essentials/navigation.html#routerpushlocation\"><code>router.push</code></a> is used to navigate to a specific page.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>router.go</code> being used where <code>router.push</code> should be used instead.</p>\n</div>\n\n<h2 id=\"Router-Options-Modes\"><a href=\"#Router-Options-Modes\" class=\"headerlink\" title=\"Router Options: Modes\"></a>Router Options: Modes</h2><h3 id=\"hashbang-false-removed\"><a href=\"#hashbang-false-removed\" class=\"headerlink\" title=\"hashbang: false removed\"></a><code>hashbang: false</code> <sup>removed</sup></h3><p>Hashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>hashbang: false</code> option.</p>\n</div>\n\n<h3 id=\"history-true-replaced\"><a href=\"#history-true-replaced\" class=\"headerlink\" title=\"history: true replaced\"></a><code>history: true</code> <sup>replaced</sup></h3><p>All routing mode options have been condensed into a single <a href=\"http://router.vuejs.org/en/api/options.html#mode\"><code>mode</code> option</a>. Update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">history</span>: <span class=\"string\">'true'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">'history'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>history: true</code> option.</p>\n</div>\n\n<h3 id=\"abstract-true-replaced\"><a href=\"#abstract-true-replaced\" class=\"headerlink\" title=\"abstract: true replaced\"></a><code>abstract: true</code> <sup>replaced</sup></h3><p>All routing mode options have been condensed into a single <a href=\"http://router.vuejs.org/en/api/options.html#mode\"><code>mode</code> option</a>. Update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">abstract</span>: <span class=\"string\">'true'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">'abstract'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>abstract: true</code> option.</p>\n</div>\n\n<h2 id=\"Route-Options-Misc\"><a href=\"#Route-Options-Misc\" class=\"headerlink\" title=\"Route Options: Misc\"></a>Route Options: Misc</h2><h3 id=\"saveScrollPosition-replaced\"><a href=\"#saveScrollPosition-replaced\" class=\"headerlink\" title=\"saveScrollPosition replaced\"></a><code>saveScrollPosition</code> <sup>replaced</sup></h3><p>This has been replaced with a <a href=\"http://router.vuejs.org/en/advanced/scroll-behavior.html\"><code>scrollBehavior</code> option</a> that accepts a function, so that the scroll behavior is completely customizable - even per route. This opens many new possibilities, but to simply replicate the old behavior of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">saveScrollPosition: <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>You can replace it with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">scrollBehavior: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">to, from, savedPosition</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> savedPosition || &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>saveScrollPosition: true</code> option.</p>\n</div>\n\n<h3 id=\"root-renamed\"><a href=\"#root-renamed\" class=\"headerlink\" title=\"root renamed\"></a><code>root</code> <sup>renamed</sup></h3><p>Renamed to <code>base</code> for consistency with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">the HTML <code>&lt;base&gt;</code> element</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>root</code> option.</p>\n</div>\n\n<h3 id=\"transitionOnLoad-removed\"><a href=\"#transitionOnLoad-removed\" class=\"headerlink\" title=\"transitionOnLoad removed\"></a><code>transitionOnLoad</code> <sup>removed</sup></h3><p>This option is no longer necessary now that Vue’s transition system has explicit <a href=\"transitions.html#Transitions-on-Initial-Render\"><code>appear</code> transition control</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transitionOnLoad: true</code> option.</p>\n</div>\n\n<h3 id=\"suppressTransitionError-removed\"><a href=\"#suppressTransitionError-removed\" class=\"headerlink\" title=\"suppressTransitionError removed\"></a><code>suppressTransitionError</code> <sup>removed</sup></h3><p>Removed due to hooks simplification. If you really must suppress transition errors, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try</code>…<code>catch</code></a> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>suppressTransitionError: true</code> option.</p>\n</div>\n\n<h2 id=\"Route-Hooks\"><a href=\"#Route-Hooks\" class=\"headerlink\" title=\"Route Hooks\"></a>Route Hooks</h2><h3 id=\"activate-replaced\"><a href=\"#activate-replaced\" class=\"headerlink\" title=\"activate replaced\"></a><code>activate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards\"><code>beforeRouteEnter</code></a> in the component instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>beforeRouteEnter</code> hook.</p>\n</div>\n\n<h3 id=\"canActivate-replaced\"><a href=\"#canActivate-replaced\" class=\"headerlink\" title=\"canActivate replaced\"></a><code>canActivate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#perroute-guard\"><code>beforeEnter</code></a> in the route instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canActivate</code> hook.</p>\n</div>\n\n<h3 id=\"deactivate-removed\"><a href=\"#deactivate-removed\" class=\"headerlink\" title=\"deactivate removed\"></a><code>deactivate</code> <sup>removed</sup></h3><p>Use the component’s <a href=\"../api/#beforeDestroy\"><code>beforeDestroy</code></a> or <a href=\"../api/#destroyed\"><code>destroyed</code></a> hooks instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>deactivate</code> hook.</p>\n</div>\n\n<h3 id=\"canDeactivate-replaced\"><a href=\"#canDeactivate-replaced\" class=\"headerlink\" title=\"canDeactivate replaced\"></a><code>canDeactivate</code> <sup>replaced</sup></h3><p>Use <a href=\"http://router.vuejs.org/en/advanced/navigation-guards.html#incomponent-guards\"><code>beforeRouteLeave</code></a> in the component instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canDeactivate</code> hook.</p>\n</div>\n\n<h3 id=\"canReuse-false-removed\"><a href=\"#canReuse-false-removed\" class=\"headerlink\" title=\"canReuse: false removed\"></a><code>canReuse: false</code> <sup>removed</sup></h3><p>There’s no longer a use case for this in the new Vue Router.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>canReuse: false</code> option.</p>\n</div>\n\n<h3 id=\"data-replaced\"><a href=\"#data-replaced\" class=\"headerlink\" title=\"data replaced\"></a><code>data</code> <sup>replaced</sup></h3><p>The <code>$route</code> property is now reactive, so you can just use a watcher to react to route changes, like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">watch: &#123;</div><div class=\"line\">  <span class=\"string\">'$route'</span>: <span class=\"string\">'fetchData'</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">fetchData</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>data</code> hook.</p>\n</div>\n\n<h3 id=\"loadingRouteData-removed\"><a href=\"#loadingRouteData-removed\" class=\"headerlink\" title=\"$loadingRouteData removed\"></a><code>$loadingRouteData</code> <sup>removed</sup></h3><p>Define your own property (e.g. <code>isLoading</code>), then update the loading state in a watcher on the route. For example, if fetching data with <a href=\"https://github.com/mzabriskie/axios\">axios</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">posts</span>: [],</div><div class=\"line\">    <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">fetchError</span>: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">  <span class=\"string\">'$route'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    self.isLoading = <span class=\"literal\">true</span></div><div class=\"line\">    self.fetchData().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      self.isLoading = <span class=\"literal\">false</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">fetchData</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/api/posts'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        self.posts = response.data.posts</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        self.fetchError = error</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>$loadingRouteData</code> meta property.</p>\n</div>\n\n"},{"title":"Migration from Vuex 0.6.x to 1.0","type":"guide","order":27,"_content":"\n> Vuex 2.0 is released, but this guide only covers the migration to 1.0? Is that a typo? Also, it looks like Vuex 1.0 and 2.0 were released simultaneously. What's going on? Which one should I use and what's compatible with Vue 2.0?\n\nBoth Vuex 1.0 and 2.0:\n\n- fully support both Vue 1.0 and 2.0\n- will be maintained for the forseeable future\n\nThey have slightly different target users however.\n\n__Vuex 2.0__ is a radical redesign and simplification of the API, for those who are starting new projects or want to be on the cutting edge of client-side state management. __It is not covered by this migration guide__, so you should check out [the Vuex 2.0 docs](https://vuex.vuejs.org/en/index.html) if you'd like to learn more about it.\n\n__Vuex 1.0__ is mostly backwards-compatible, so requires very few changes to upgrade. It is recommended for those with large existing codebases or who just want the smoothest possible upgrade path to Vue 2.0. This guide is dedicated to facilitating that process, but only includes migration notes. For the complete usage guide, see [the Vuex 1.0 docs](https://github.com/vuejs/vuex/tree/1.0/docs/en).\n\n## `store.watch` with String Property Path <sup>replaced</sup>\n\n`store.watch` now only accept functions. So for example, you would have to replace:\n\n``` js\nstore.watch('user.notifications', callback)\n```\n\nwith:\n\n``` js\nstore.watch(\n  // When the returned result changes...\n  function (state) {\n    return state.user.notifications\n  },\n  // Run this callback\n  callback\n)\n```\n\nThis gives you more complete control over the reactive properties you'd like to watch.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.watch</code> with a string as the first argument.</p>\n</div>\n{% endraw %}\n\n## Store's Event Emitter <sup>removed</sup>\n\nThe store instance no longer exposes the event emitter interface (`on`, `off`, `emit`). If you were previously using the store as a global event bus, [see this section](migration.html#dispatch-and-broadcast-removed) for migration instructions.\n\nInstead of using this interface to watch events emitted by the store itself (e.g. `store.on('mutation', callback)`), a new method `store.subscribe` is introduced. Typical usage inside a plugin would be:\n\n``` js\nvar myPlugin = store => {\n  store.subscribe(function (mutation, state) {\n    // Do something...\n  })\n}\n\n```\n\nSee example [the plugins docs](https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md) for more info.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.on</code>, <code>store.off</code>, and <code>store.emit</code>.</p>\n</div>\n{% endraw %}\n\n## Middlewares <sup>replaced</sup>\n\nMiddlewares are replaced by plugins. A plugin is simply a function that receives the store as the only argument, and can listen to the mutation event on the store:\n\n``` js\nconst myPlugins = store => {\n  store.subscribe('mutation', (mutation, state) => {\n    // Do something...\n  })\n}\n```\n\nFor more details, see [the plugins docs](https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>middlewares</code> option on a store.</p>\n</div>\n{% endraw %}\n","source":"v2/guide/migration-vuex.md","raw":"---\ntitle: Migration from Vuex 0.6.x to 1.0\ntype: guide\norder: 27\n---\n\n> Vuex 2.0 is released, but this guide only covers the migration to 1.0? Is that a typo? Also, it looks like Vuex 1.0 and 2.0 were released simultaneously. What's going on? Which one should I use and what's compatible with Vue 2.0?\n\nBoth Vuex 1.0 and 2.0:\n\n- fully support both Vue 1.0 and 2.0\n- will be maintained for the forseeable future\n\nThey have slightly different target users however.\n\n__Vuex 2.0__ is a radical redesign and simplification of the API, for those who are starting new projects or want to be on the cutting edge of client-side state management. __It is not covered by this migration guide__, so you should check out [the Vuex 2.0 docs](https://vuex.vuejs.org/en/index.html) if you'd like to learn more about it.\n\n__Vuex 1.0__ is mostly backwards-compatible, so requires very few changes to upgrade. It is recommended for those with large existing codebases or who just want the smoothest possible upgrade path to Vue 2.0. This guide is dedicated to facilitating that process, but only includes migration notes. For the complete usage guide, see [the Vuex 1.0 docs](https://github.com/vuejs/vuex/tree/1.0/docs/en).\n\n## `store.watch` with String Property Path <sup>replaced</sup>\n\n`store.watch` now only accept functions. So for example, you would have to replace:\n\n``` js\nstore.watch('user.notifications', callback)\n```\n\nwith:\n\n``` js\nstore.watch(\n  // When the returned result changes...\n  function (state) {\n    return state.user.notifications\n  },\n  // Run this callback\n  callback\n)\n```\n\nThis gives you more complete control over the reactive properties you'd like to watch.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.watch</code> with a string as the first argument.</p>\n</div>\n{% endraw %}\n\n## Store's Event Emitter <sup>removed</sup>\n\nThe store instance no longer exposes the event emitter interface (`on`, `off`, `emit`). If you were previously using the store as a global event bus, [see this section](migration.html#dispatch-and-broadcast-removed) for migration instructions.\n\nInstead of using this interface to watch events emitted by the store itself (e.g. `store.on('mutation', callback)`), a new method `store.subscribe` is introduced. Typical usage inside a plugin would be:\n\n``` js\nvar myPlugin = store => {\n  store.subscribe(function (mutation, state) {\n    // Do something...\n  })\n}\n\n```\n\nSee example [the plugins docs](https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md) for more info.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.on</code>, <code>store.off</code>, and <code>store.emit</code>.</p>\n</div>\n{% endraw %}\n\n## Middlewares <sup>replaced</sup>\n\nMiddlewares are replaced by plugins. A plugin is simply a function that receives the store as the only argument, and can listen to the mutation event on the store:\n\n``` js\nconst myPlugins = store => {\n  store.subscribe('mutation', (mutation, state) => {\n    // Do something...\n  })\n}\n```\n\nFor more details, see [the plugins docs](https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>middlewares</code> option on a store.</p>\n</div>\n{% endraw %}\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/migration-vuex.html","comments":1,"layout":"page","_id":"civ8jcjor001591m1xkeig0xe","content":"<blockquote>\n<p>Vuex 2.0 is released, but this guide only covers the migration to 1.0? Is that a typo? Also, it looks like Vuex 1.0 and 2.0 were released simultaneously. What’s going on? Which one should I use and what’s compatible with Vue 2.0?</p>\n</blockquote>\n<p>Both Vuex 1.0 and 2.0:</p>\n<ul>\n<li>fully support both Vue 1.0 and 2.0</li>\n<li>will be maintained for the forseeable future</li>\n</ul>\n<p>They have slightly different target users however.</p>\n<p><strong>Vuex 2.0</strong> is a radical redesign and simplification of the API, for those who are starting new projects or want to be on the cutting edge of client-side state management. <strong>It is not covered by this migration guide</strong>, so you should check out <a href=\"https://vuex.vuejs.org/en/index.html\" target=\"_blank\" rel=\"external\">the Vuex 2.0 docs</a> if you’d like to learn more about it.</p>\n<p><strong>Vuex 1.0</strong> is mostly backwards-compatible, so requires very few changes to upgrade. It is recommended for those with large existing codebases or who just want the smoothest possible upgrade path to Vue 2.0. This guide is dedicated to facilitating that process, but only includes migration notes. For the complete usage guide, see <a href=\"https://github.com/vuejs/vuex/tree/1.0/docs/en\" target=\"_blank\" rel=\"external\">the Vuex 1.0 docs</a>.</p>\n<h2 id=\"store-watch-with-String-Property-Path-replaced\"><a href=\"#store-watch-with-String-Property-Path-replaced\" class=\"headerlink\" title=\"store.watch with String Property Path replaced\"></a><code>store.watch</code> with String Property Path <sup>replaced</sup></h2><p><code>store.watch</code> now only accept functions. So for example, you would have to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">store.watch(<span class=\"string\">'user.notifications'</span>, callback)</div></pre></td></tr></table></figure>\n<p>with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">store.watch(</div><div class=\"line\">  <span class=\"comment\">// When the returned result changes...</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> state.user.notifications</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Run this callback</span></div><div class=\"line\">  callback</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>This gives you more complete control over the reactive properties you’d like to watch.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>store.watch</code> with a string as the first argument.</p>\n</div>\n\n<h2 id=\"Store’s-Event-Emitter-removed\"><a href=\"#Store’s-Event-Emitter-removed\" class=\"headerlink\" title=\"Store’s Event Emitter removed\"></a>Store’s Event Emitter <sup>removed</sup></h2><p>The store instance no longer exposes the event emitter interface (<code>on</code>, <code>off</code>, <code>emit</code>). If you were previously using the store as a global event bus, <a href=\"migration.html#dispatch-and-broadcast-removed\">see this section</a> for migration instructions.</p>\n<p>Instead of using this interface to watch events emitted by the store itself (e.g. <code>store.on(&#39;mutation&#39;, callback)</code>), a new method <code>store.subscribe</code> is introduced. Typical usage inside a plugin would be:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</div><div class=\"line\">  store.subscribe(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mutation, state</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>See example <a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\" target=\"_blank\" rel=\"external\">the plugins docs</a> for more info.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>store.on</code>, <code>store.off</code>, and <code>store.emit</code>.</p>\n</div>\n\n<h2 id=\"Middlewares-replaced\"><a href=\"#Middlewares-replaced\" class=\"headerlink\" title=\"Middlewares replaced\"></a>Middlewares <sup>replaced</sup></h2><p>Middlewares are replaced by plugins. A plugin is simply a function that receives the store as the only argument, and can listen to the mutation event on the store:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myPlugins = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</div><div class=\"line\">  store.subscribe(<span class=\"string\">'mutation'</span>, (mutation, state) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// Do something...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For more details, see <a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\" target=\"_blank\" rel=\"external\">the plugins docs</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>middlewares</code> option on a store.</p>\n</div>\n\n","excerpt":"","more":"<blockquote>\n<p>Vuex 2.0 is released, but this guide only covers the migration to 1.0? Is that a typo? Also, it looks like Vuex 1.0 and 2.0 were released simultaneously. What’s going on? Which one should I use and what’s compatible with Vue 2.0?</p>\n</blockquote>\n<p>Both Vuex 1.0 and 2.0:</p>\n<ul>\n<li>fully support both Vue 1.0 and 2.0</li>\n<li>will be maintained for the forseeable future</li>\n</ul>\n<p>They have slightly different target users however.</p>\n<p><strong>Vuex 2.0</strong> is a radical redesign and simplification of the API, for those who are starting new projects or want to be on the cutting edge of client-side state management. <strong>It is not covered by this migration guide</strong>, so you should check out <a href=\"https://vuex.vuejs.org/en/index.html\">the Vuex 2.0 docs</a> if you’d like to learn more about it.</p>\n<p><strong>Vuex 1.0</strong> is mostly backwards-compatible, so requires very few changes to upgrade. It is recommended for those with large existing codebases or who just want the smoothest possible upgrade path to Vue 2.0. This guide is dedicated to facilitating that process, but only includes migration notes. For the complete usage guide, see <a href=\"https://github.com/vuejs/vuex/tree/1.0/docs/en\">the Vuex 1.0 docs</a>.</p>\n<h2 id=\"store-watch-with-String-Property-Path-replaced\"><a href=\"#store-watch-with-String-Property-Path-replaced\" class=\"headerlink\" title=\"store.watch with String Property Path replaced\"></a><code>store.watch</code> with String Property Path <sup>replaced</sup></h2><p><code>store.watch</code> now only accept functions. So for example, you would have to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">store.watch(<span class=\"string\">'user.notifications'</span>, callback)</div></pre></td></tr></table></figure>\n<p>with:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">store.watch(</div><div class=\"line\">  <span class=\"comment\">// When the returned result changes...</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> state.user.notifications</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Run this callback</span></div><div class=\"line\">  callback</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>This gives you more complete control over the reactive properties you’d like to watch.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.watch</code> with a string as the first argument.</p>\n</div>\n\n<h2 id=\"Store’s-Event-Emitter-removed\"><a href=\"#Store’s-Event-Emitter-removed\" class=\"headerlink\" title=\"Store’s Event Emitter removed\"></a>Store’s Event Emitter <sup>removed</sup></h2><p>The store instance no longer exposes the event emitter interface (<code>on</code>, <code>off</code>, <code>emit</code>). If you were previously using the store as a global event bus, <a href=\"migration.html#dispatch-and-broadcast-removed\">see this section</a> for migration instructions.</p>\n<p>Instead of using this interface to watch events emitted by the store itself (e.g. <code>store.on(&#39;mutation&#39;, callback)</code>), a new method <code>store.subscribe</code> is introduced. Typical usage inside a plugin would be:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</div><div class=\"line\">  store.subscribe(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mutation, state</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>See example <a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\">the plugins docs</a> for more info.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>store.on</code>, <code>store.off</code>, and <code>store.emit</code>.</p>\n</div>\n\n<h2 id=\"Middlewares-replaced\"><a href=\"#Middlewares-replaced\" class=\"headerlink\" title=\"Middlewares replaced\"></a>Middlewares <sup>replaced</sup></h2><p>Middlewares are replaced by plugins. A plugin is simply a function that receives the store as the only argument, and can listen to the mutation event on the store:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> myPlugins = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</div><div class=\"line\">  store.subscribe(<span class=\"string\">'mutation'</span>, (mutation, state) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// Do something...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For more details, see <a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\">the plugins docs</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>middlewares</code> option on a store.</p>\n</div>\n\n"},{"title":"Mixins","type":"guide","order":17,"_content":"\n## Basics\n\nMixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be \"mixed\" into the component's own options.\n\nExample:\n\n``` js\n// define a mixin object\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n\n// define a component that uses this mixin\nvar Component = Vue.extend({\n  mixins: [myMixin]\n})\n\nvar component = new Component() // -> \"hello from mixin!\"\n```\n\n## Option Merging\n\nWhen a mixin and the component itself contain overlapping options, they will be \"merged\" using appropriate strategies. For example, hook functions with the same name are merged into an array so that all of them will be called. In addition, mixin hooks will be called **before** the component's own hooks:\n\n``` js\nvar mixin = {\n  created: function () {\n    console.log('mixin hook called')\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('component hook called')\n  }\n})\n\n// -> \"mixin hook called\"\n// -> \"component hook called\"\n```\n\nOptions that expect object values, for example `methods`, `components` and `directives`, will be merged into the same object. The component's options will take priority when there are conflicting keys in these objects:\n\n``` js\nvar mixin = {\n  methods: {\n    foo: function () {\n      console.log('foo')\n    },\n    conflicting: function () {\n      console.log('from mixin')\n    }\n  }\n}\n\nvar vm = new Vue({\n  mixins: [mixin],\n  methods: {\n    bar: function () {\n      console.log('bar')\n    },\n    conflicting: function () {\n      console.log('from self')\n    }\n  }\n})\n\nvm.foo() // -> \"foo\"\nvm.bar() // -> \"bar\"\nvm.conflicting() // -> \"from self\"\n```\n\nNote that the same merge strategies are used in `Vue.extend()`.\n\n## Global Mixin\n\nYou can also apply a mixin globally. Use caution! Once you apply a mixin globally, it will affect **every** Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:\n\n``` js\n// inject a handler for `myOption` custom option\nVue.mixin({\n  created: function () {\n    var myOption = this.$options.myOption\n    if (myOption) {\n      console.log(myOption)\n    }\n  }\n})\n\nnew Vue({\n  myOption: 'hello!'\n})\n// -> \"hello!\"\n```\n\n<p class=\"tip\">Use global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It's also a good idea to ship them as [Plugins](plugins.html) to avoid duplicate application.</p>\n\n## Custom Option Merge Strategies\n\nWhen custom options are merged, they use the default strategy, which simply overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to `Vue.config.optionMergeStrategies`:\n\n``` js\nVue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {\n  // return mergedVal\n}\n```\n\nFor most object-based options, you can simply use the same strategy used by `methods`:\n\n``` js\nvar strategies = Vue.config.optionMergeStrategies\nstrategies.myOption = strategies.methods\n```\n\nA more advanced example can be found on [Vuex](https://github.com/vuejs/vuex)'s 1.x merging strategy:\n\n``` js\nconst merge = Vue.config.optionMergeStrategies.computed\nVue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n  if (!toVal) return fromVal\n  if (!fromVal) return toVal\n  return {\n    getters: merge(toVal.getters, fromVal.getters),\n    state: merge(toVal.state, fromVal.state),\n    actions: merge(toVal.actions, fromVal.actions)\n  }\n}\n```\n","source":"v2/guide/mixins.md","raw":"---\ntitle: Mixins\ntype: guide\norder: 17\n---\n\n## Basics\n\nMixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be \"mixed\" into the component's own options.\n\nExample:\n\n``` js\n// define a mixin object\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n\n// define a component that uses this mixin\nvar Component = Vue.extend({\n  mixins: [myMixin]\n})\n\nvar component = new Component() // -> \"hello from mixin!\"\n```\n\n## Option Merging\n\nWhen a mixin and the component itself contain overlapping options, they will be \"merged\" using appropriate strategies. For example, hook functions with the same name are merged into an array so that all of them will be called. In addition, mixin hooks will be called **before** the component's own hooks:\n\n``` js\nvar mixin = {\n  created: function () {\n    console.log('mixin hook called')\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('component hook called')\n  }\n})\n\n// -> \"mixin hook called\"\n// -> \"component hook called\"\n```\n\nOptions that expect object values, for example `methods`, `components` and `directives`, will be merged into the same object. The component's options will take priority when there are conflicting keys in these objects:\n\n``` js\nvar mixin = {\n  methods: {\n    foo: function () {\n      console.log('foo')\n    },\n    conflicting: function () {\n      console.log('from mixin')\n    }\n  }\n}\n\nvar vm = new Vue({\n  mixins: [mixin],\n  methods: {\n    bar: function () {\n      console.log('bar')\n    },\n    conflicting: function () {\n      console.log('from self')\n    }\n  }\n})\n\nvm.foo() // -> \"foo\"\nvm.bar() // -> \"bar\"\nvm.conflicting() // -> \"from self\"\n```\n\nNote that the same merge strategies are used in `Vue.extend()`.\n\n## Global Mixin\n\nYou can also apply a mixin globally. Use caution! Once you apply a mixin globally, it will affect **every** Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:\n\n``` js\n// inject a handler for `myOption` custom option\nVue.mixin({\n  created: function () {\n    var myOption = this.$options.myOption\n    if (myOption) {\n      console.log(myOption)\n    }\n  }\n})\n\nnew Vue({\n  myOption: 'hello!'\n})\n// -> \"hello!\"\n```\n\n<p class=\"tip\">Use global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It's also a good idea to ship them as [Plugins](plugins.html) to avoid duplicate application.</p>\n\n## Custom Option Merge Strategies\n\nWhen custom options are merged, they use the default strategy, which simply overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to `Vue.config.optionMergeStrategies`:\n\n``` js\nVue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {\n  // return mergedVal\n}\n```\n\nFor most object-based options, you can simply use the same strategy used by `methods`:\n\n``` js\nvar strategies = Vue.config.optionMergeStrategies\nstrategies.myOption = strategies.methods\n```\n\nA more advanced example can be found on [Vuex](https://github.com/vuejs/vuex)'s 1.x merging strategy:\n\n``` js\nconst merge = Vue.config.optionMergeStrategies.computed\nVue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n  if (!toVal) return fromVal\n  if (!fromVal) return toVal\n  return {\n    getters: merge(toVal.getters, fromVal.getters),\n    state: merge(toVal.state, fromVal.state),\n    actions: merge(toVal.actions, fromVal.actions)\n  }\n}\n```\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/mixins.html","comments":1,"layout":"page","_id":"civ8jcjos001691m1hmplywdd","content":"<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><p>Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// define a mixin object</span></div><div class=\"line\"><span class=\"keyword\">var</span> myMixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hello()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">hello</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello from mixin!'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// define a component that uses this mixin</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [myMixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> Component() <span class=\"comment\">// -&gt; \"hello from mixin!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Option-Merging\"><a href=\"#Option-Merging\" class=\"headerlink\" title=\"Option Merging\"></a>Option Merging</h2><p>When a mixin and the component itself contain overlapping options, they will be “merged” using appropriate strategies. For example, hook functions with the same name are merged into an array so that all of them will be called. In addition, mixin hooks will be called <strong>before</strong> the component’s own hooks:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin hook called'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin],</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'component hook called'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -&gt; \"mixin hook called\"</span></div><div class=\"line\"><span class=\"comment\">// -&gt; \"component hook called\"</span></div></pre></td></tr></table></figure>\n<p>Options that expect object values, for example <code>methods</code>, <code>components</code> and <code>directives</code>, will be merged into the same object. The component’s options will take priority when there are conflicting keys in these objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">conflicting</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from mixin'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">conflicting</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from self'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.foo() <span class=\"comment\">// -&gt; \"foo\"</span></div><div class=\"line\">vm.bar() <span class=\"comment\">// -&gt; \"bar\"</span></div><div class=\"line\">vm.conflicting() <span class=\"comment\">// -&gt; \"from self\"</span></div></pre></td></tr></table></figure>\n<p>Note that the same merge strategies are used in <code>Vue.extend()</code>.</p>\n<h2 id=\"Global-Mixin\"><a href=\"#Global-Mixin\" class=\"headerlink\" title=\"Global Mixin\"></a>Global Mixin</h2><p>You can also apply a mixin globally. Use caution! Once you apply a mixin globally, it will affect <strong>every</strong> Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// inject a handler for `myOption` custom option</span></div><div class=\"line\">Vue.mixin(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> myOption = <span class=\"keyword\">this</span>.$options.myOption</div><div class=\"line\">    <span class=\"keyword\">if</span> (myOption) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(myOption)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">myOption</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hello!\"</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Use global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It’s also a good idea to ship them as <a href=\"plugins.html\">Plugins</a> to avoid duplicate application.</p>\n\n<h2 id=\"Custom-Option-Merge-Strategies\"><a href=\"#Custom-Option-Merge-Strategies\" class=\"headerlink\" title=\"Custom Option Merge Strategies\"></a>Custom Option Merge Strategies</h2><p>When custom options are merged, they use the default strategy, which simply overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to <code>Vue.config.optionMergeStrategies</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies.myOption = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">toVal, fromVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return mergedVal</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For most object-based options, you can simply use the same strategy used by <code>methods</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategies = Vue.config.optionMergeStrategies</div><div class=\"line\">strategies.myOption = strategies.methods</div></pre></td></tr></table></figure>\n<p>A more advanced example can be found on <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>‘s 1.x merging strategy:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge = Vue.config.optionMergeStrategies.computed</div><div class=\"line\">Vue.config.optionMergeStrategies.vuex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">toVal, fromVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!toVal) <span class=\"keyword\">return</span> fromVal</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fromVal) <span class=\"keyword\">return</span> toVal</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">getters</span>: merge(toVal.getters, fromVal.getters),</div><div class=\"line\">    <span class=\"attr\">state</span>: merge(toVal.state, fromVal.state),</div><div class=\"line\">    <span class=\"attr\">actions</span>: merge(toVal.actions, fromVal.actions)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><p>Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options.</p>\n<p>Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// define a mixin object</span></div><div class=\"line\"><span class=\"keyword\">var</span> myMixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hello()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">hello</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello from mixin!'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// define a component that uses this mixin</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [myMixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> Component() <span class=\"comment\">// -&gt; \"hello from mixin!\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"Option-Merging\"><a href=\"#Option-Merging\" class=\"headerlink\" title=\"Option Merging\"></a>Option Merging</h2><p>When a mixin and the component itself contain overlapping options, they will be “merged” using appropriate strategies. For example, hook functions with the same name are merged into an array so that all of them will be called. In addition, mixin hooks will be called <strong>before</strong> the component’s own hooks:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin hook called'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin],</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'component hook called'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// -&gt; \"mixin hook called\"</span></div><div class=\"line\"><span class=\"comment\">// -&gt; \"component hook called\"</span></div></pre></td></tr></table></figure>\n<p>Options that expect object values, for example <code>methods</code>, <code>components</code> and <code>directives</code>, will be merged into the same object. The component’s options will take priority when there are conflicting keys in these objects:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">conflicting</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from mixin'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin],</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">conflicting</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from self'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">vm.foo() <span class=\"comment\">// -&gt; \"foo\"</span></div><div class=\"line\">vm.bar() <span class=\"comment\">// -&gt; \"bar\"</span></div><div class=\"line\">vm.conflicting() <span class=\"comment\">// -&gt; \"from self\"</span></div></pre></td></tr></table></figure>\n<p>Note that the same merge strategies are used in <code>Vue.extend()</code>.</p>\n<h2 id=\"Global-Mixin\"><a href=\"#Global-Mixin\" class=\"headerlink\" title=\"Global Mixin\"></a>Global Mixin</h2><p>You can also apply a mixin globally. Use caution! Once you apply a mixin globally, it will affect <strong>every</strong> Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// inject a handler for `myOption` custom option</span></div><div class=\"line\">Vue.mixin(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> myOption = <span class=\"keyword\">this</span>.$options.myOption</div><div class=\"line\">    <span class=\"keyword\">if</span> (myOption) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(myOption)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">myOption</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hello!\"</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Use global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It’s also a good idea to ship them as <a href=\"plugins.html\">Plugins</a> to avoid duplicate application.</p>\n\n<h2 id=\"Custom-Option-Merge-Strategies\"><a href=\"#Custom-Option-Merge-Strategies\" class=\"headerlink\" title=\"Custom Option Merge Strategies\"></a>Custom Option Merge Strategies</h2><p>When custom options are merged, they use the default strategy, which simply overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to <code>Vue.config.optionMergeStrategies</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies.myOption = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">toVal, fromVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return mergedVal</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For most object-based options, you can simply use the same strategy used by <code>methods</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategies = Vue.config.optionMergeStrategies</div><div class=\"line\">strategies.myOption = strategies.methods</div></pre></td></tr></table></figure>\n<p>A more advanced example can be found on <a href=\"https://github.com/vuejs/vuex\">Vuex</a>‘s 1.x merging strategy:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge = Vue.config.optionMergeStrategies.computed</div><div class=\"line\">Vue.config.optionMergeStrategies.vuex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">toVal, fromVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!toVal) <span class=\"keyword\">return</span> fromVal</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fromVal) <span class=\"keyword\">return</span> toVal</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">getters</span>: merge(toVal.getters, fromVal.getters),</div><div class=\"line\">    <span class=\"attr\">state</span>: merge(toVal.state, fromVal.state),</div><div class=\"line\">    <span class=\"attr\">actions</span>: merge(toVal.actions, fromVal.actions)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Plugins","type":"guide","order":18,"_content":"\n## Writing a Plugin\n\nPlugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins you can write:\n\n1. Add some global methods or properties. e.g. [vue-element](https://github.com/vuejs/vue-element)\n\n2. Add one or more global assets: directives/filters/transitions etc. e.g. [vue-touch](https://github.com/vuejs/vue-touch)\n\n3. Add some component options by global mixin. e.g. [vuex](https://github.com/vuejs/vuex)\n\n4. Add some Vue instance methods by attaching them to Vue.prototype.\n\n5. A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. [vue-router](https://github.com/vuejs/vue-router)\n\nA Vue.js plugin should expose an `install` method. The method will be called with the `Vue` constructor as the first argument, along with possible options:\n\n``` js\nMyPlugin.install = function (Vue, options) {\n  // 1. add global method or property\n  Vue.myGlobalMethod = function () {\n    // something logic ...\n  }\n\n  // 2. add a global asset\n  Vue.directive('my-directive', {\n    bind (el, binding, vnode, oldVnode) {\n      // something logic ...\n    }\n    ...\n  })\n\n  // 3. inject some component options\n  Vue.mixin({\n    created: function () {\n      // something logic ...\n    }\n    ...\n  })\n\n  // 4. add an instance method\n  Vue.prototype.$myMethod = function (options) {\n    // something logic ...\n  }\n}\n```\n\n## Using a Plugin\n\nUse plugins by calling the `Vue.use()` global method:\n\n``` js\n// calls `MyPlugin.install(Vue)`\nVue.use(MyPlugin)\n```\n\nYou can optionally pass in some options:\n\n``` js\nVue.use(MyPlugin, { someOption: true })\n```\n\n`Vue.use` automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.\n\nSome plugins provided by Vue.js official plugins such as `vue-router` automatically calls `Vue.use()` if `Vue` is available as a global variable. However in a module environment such as CommonJS, you always need to call `Vue.use()` explicitly:\n\n``` js\n// When using CommonJS via Browserify or Webpack\nvar Vue = require('vue')\nvar VueRouter = require('vue-router')\n\n// Don't forget to call this\nVue.use(VueRouter)\n```\n\nCheckout [awesome-vue](https://github.com/vuejs/awesome-vue#libraries--plugins) for a huge collection of community-contributed plugins and libraries.\n","source":"v2/guide/plugins.md","raw":"---\ntitle: Plugins\ntype: guide\norder: 18\n---\n\n## Writing a Plugin\n\nPlugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins you can write:\n\n1. Add some global methods or properties. e.g. [vue-element](https://github.com/vuejs/vue-element)\n\n2. Add one or more global assets: directives/filters/transitions etc. e.g. [vue-touch](https://github.com/vuejs/vue-touch)\n\n3. Add some component options by global mixin. e.g. [vuex](https://github.com/vuejs/vuex)\n\n4. Add some Vue instance methods by attaching them to Vue.prototype.\n\n5. A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. [vue-router](https://github.com/vuejs/vue-router)\n\nA Vue.js plugin should expose an `install` method. The method will be called with the `Vue` constructor as the first argument, along with possible options:\n\n``` js\nMyPlugin.install = function (Vue, options) {\n  // 1. add global method or property\n  Vue.myGlobalMethod = function () {\n    // something logic ...\n  }\n\n  // 2. add a global asset\n  Vue.directive('my-directive', {\n    bind (el, binding, vnode, oldVnode) {\n      // something logic ...\n    }\n    ...\n  })\n\n  // 3. inject some component options\n  Vue.mixin({\n    created: function () {\n      // something logic ...\n    }\n    ...\n  })\n\n  // 4. add an instance method\n  Vue.prototype.$myMethod = function (options) {\n    // something logic ...\n  }\n}\n```\n\n## Using a Plugin\n\nUse plugins by calling the `Vue.use()` global method:\n\n``` js\n// calls `MyPlugin.install(Vue)`\nVue.use(MyPlugin)\n```\n\nYou can optionally pass in some options:\n\n``` js\nVue.use(MyPlugin, { someOption: true })\n```\n\n`Vue.use` automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.\n\nSome plugins provided by Vue.js official plugins such as `vue-router` automatically calls `Vue.use()` if `Vue` is available as a global variable. However in a module environment such as CommonJS, you always need to call `Vue.use()` explicitly:\n\n``` js\n// When using CommonJS via Browserify or Webpack\nvar Vue = require('vue')\nvar VueRouter = require('vue-router')\n\n// Don't forget to call this\nVue.use(VueRouter)\n```\n\nCheckout [awesome-vue](https://github.com/vuejs/awesome-vue#libraries--plugins) for a huge collection of community-contributed plugins and libraries.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/plugins.html","comments":1,"layout":"page","_id":"civ8jcjot001791m1svtj50ls","content":"<h2 id=\"Writing-a-Plugin\"><a href=\"#Writing-a-Plugin\" class=\"headerlink\" title=\"Writing a Plugin\"></a>Writing a Plugin</h2><p>Plugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins you can write:</p>\n<ol>\n<li><p>Add some global methods or properties. e.g. <a href=\"https://github.com/vuejs/vue-element\" target=\"_blank\" rel=\"external\">vue-element</a></p>\n</li>\n<li><p>Add one or more global assets: directives/filters/transitions etc. e.g. <a href=\"https://github.com/vuejs/vue-touch\" target=\"_blank\" rel=\"external\">vue-touch</a></p>\n</li>\n<li><p>Add some component options by global mixin. e.g. <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a></p>\n</li>\n<li><p>Add some Vue instance methods by attaching them to Vue.prototype.</p>\n</li>\n<li><p>A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router</a></p>\n</li>\n</ol>\n<p>A Vue.js plugin should expose an <code>install</code> method. The method will be called with the <code>Vue</code> constructor as the first argument, along with possible options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. add global method or property</span></div><div class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// something logic ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. add a global asset</span></div><div class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</div><div class=\"line\">      <span class=\"comment\">// something logic ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. inject some component options</span></div><div class=\"line\">  Vue.mixin(&#123;</div><div class=\"line\">    <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// something logic ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 4. add an instance method</span></div><div class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// something logic ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Using-a-Plugin\"><a href=\"#Using-a-Plugin\" class=\"headerlink\" title=\"Using a Plugin\"></a>Using a Plugin</h2><p>Use plugins by calling the <code>Vue.use()</code> global method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// calls `MyPlugin.install(Vue)`</span></div><div class=\"line\">Vue.use(MyPlugin)</div></pre></td></tr></table></figure>\n<p>You can optionally pass in some options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.use(MyPlugin, &#123; <span class=\"attr\">someOption</span>: <span class=\"literal\">true</span> &#125;)</div></pre></td></tr></table></figure>\n<p><code>Vue.use</code> automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.</p>\n<p>Some plugins provided by Vue.js official plugins such as <code>vue-router</code> automatically calls <code>Vue.use()</code> if <code>Vue</code> is available as a global variable. However in a module environment such as CommonJS, you always need to call <code>Vue.use()</code> explicitly:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When using CommonJS via Browserify or Webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> VueRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-router'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Don't forget to call this</span></div><div class=\"line\">Vue.use(VueRouter)</div></pre></td></tr></table></figure>\n<p>Checkout <a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\" target=\"_blank\" rel=\"external\">awesome-vue</a> for a huge collection of community-contributed plugins and libraries.</p>\n","excerpt":"","more":"<h2 id=\"Writing-a-Plugin\"><a href=\"#Writing-a-Plugin\" class=\"headerlink\" title=\"Writing a Plugin\"></a>Writing a Plugin</h2><p>Plugins usually add global-level functionality to Vue. There is no strictly defined scope for a plugin - there are typically several types of plugins you can write:</p>\n<ol>\n<li><p>Add some global methods or properties. e.g. <a href=\"https://github.com/vuejs/vue-element\">vue-element</a></p>\n</li>\n<li><p>Add one or more global assets: directives/filters/transitions etc. e.g. <a href=\"https://github.com/vuejs/vue-touch\">vue-touch</a></p>\n</li>\n<li><p>Add some component options by global mixin. e.g. <a href=\"https://github.com/vuejs/vuex\">vuex</a></p>\n</li>\n<li><p>Add some Vue instance methods by attaching them to Vue.prototype.</p>\n</li>\n<li><p>A library that provides an API of its own, while at the same time injecting some combination of the above. e.g. <a href=\"https://github.com/vuejs/vue-router\">vue-router</a></p>\n</li>\n</ol>\n<p>A Vue.js plugin should expose an <code>install</code> method. The method will be called with the <code>Vue</code> constructor as the first argument, along with possible options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. add global method or property</span></div><div class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// something logic ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. add a global asset</span></div><div class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</div><div class=\"line\">      <span class=\"comment\">// something logic ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. inject some component options</span></div><div class=\"line\">  Vue.mixin(&#123;</div><div class=\"line\">    <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// something logic ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 4. add an instance method</span></div><div class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// something logic ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Using-a-Plugin\"><a href=\"#Using-a-Plugin\" class=\"headerlink\" title=\"Using a Plugin\"></a>Using a Plugin</h2><p>Use plugins by calling the <code>Vue.use()</code> global method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// calls `MyPlugin.install(Vue)`</span></div><div class=\"line\">Vue.use(MyPlugin)</div></pre></td></tr></table></figure>\n<p>You can optionally pass in some options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.use(MyPlugin, &#123; <span class=\"attr\">someOption</span>: <span class=\"literal\">true</span> &#125;)</div></pre></td></tr></table></figure>\n<p><code>Vue.use</code> automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.</p>\n<p>Some plugins provided by Vue.js official plugins such as <code>vue-router</code> automatically calls <code>Vue.use()</code> if <code>Vue</code> is available as a global variable. However in a module environment such as CommonJS, you always need to call <code>Vue.use()</code> explicitly:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When using CommonJS via Browserify or Webpack</span></div><div class=\"line\"><span class=\"keyword\">var</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> VueRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-router'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Don't forget to call this</span></div><div class=\"line\">Vue.use(VueRouter)</div></pre></td></tr></table></figure>\n<p>Checkout <a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\">awesome-vue</a> for a huge collection of community-contributed plugins and libraries.</p>\n"},{"title":"Migration from Vue 1.x","type":"guide","order":25,"_content":"\n## FAQ\n\n> Woah - this is a super long page! Does that mean 2.0 is completely different, I'll have to learn the basics all over again, and migrating will be practically impossible?\n\nI'm glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven't changed. It's long because we like to offer very detailed explanations and include a lot of examples. Rest assured, __this is not something you have to read from top to bottom!__\n\n> Where should I start in a migration?\n\n1. Start by running the [migration helper](https://github.com/vuejs/vue-migration-helper) on a current project. We've carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they'll let you know, offer suggestions, and provide links to more info.\n\n2. After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn't catch, check it out.\n\n3. If you have any tests, run them and see what still fails. If you don't have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.\n\n4. By now, your app should be fully migrated. If you're still hungry for more though, you can read the rest of this page - or just dive in to the new and improved guide from [the beginning](index.html). Many parts will be skimmable, since you're already familiar with the core concepts.\n\n> How long will it take to migrate a Vue 1.x app to 2.0?\n\nIt depends on a few factors:\n\n- The size of your app (small to medium-sized apps will probably be less than a day)\n\n- How many times you get distracted and start playing with a cool new feature. 😉 &nbsp;Not judging, it also happened to us while building 2.0!\n\n- Which obsolete features you're using. Most can be upgraded with find-and-replace, but others might take a few minutes. If you're not currently following best practices, Vue 2.0 will also try harder to force you to. This is a good thing in the long run, but could also mean a significant (though possibly overdue) refactor.\n\n> If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue-Router?\n\nOnly Vue-Router 2 is compatible with Vue 2, so yes, you'll have to follow the [migration path for Vue-Router](migration-vue-router.html) as well. Fortunately, most applications don't have a lot of router code, so this likely won't take more than an hour.\n\nAs for Vuex, even version 0.8 is compatible with Vue 2, so you're not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.\n\n## Templates\n\n### Fragment Instances <sup>removed</sup>\n\nEvery component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:\n\n``` html\n<p>foo</p>\n<p>bar</p>\n```\n\nIt's recommended to simply wrap the entire contents in a new element, like this:\n\n``` html\n<div>\n  <p>foo</p>\n  <p>bar</p>\n</div>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about multiple root elements in a template.</p>\n</div>\n{% endraw %}\n\n## Lifecycle Hooks\n\n### `beforeCompile` <sup>removed</sup>\n\nUse the `created` hook instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `compiled` <sup>replaced</sup>\n\nUse the new `mounted` hook instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `attached` <sup>removed</sup>\n\nUse a custom in-DOM check in other hooks. For example, to replace:\n\n``` js\nattached: function () {\n  doSomething()\n}\n```\n\nYou could use:\n\n``` js\nmounted: function () {\n  this.$nextTick(function () {\n    doSomething()\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `detached` <sup>removed</sup>\n\nUse a custom in-DOM check in other hooks. For example, to replace:\n\n``` js\ndetached: function () {\n  doSomething()\n}\n```\n\nYou could use:\n\n``` js\ndestroyed: function () {\n  this.$nextTick(function () {\n    doSomething()\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `init` <sup>renamed</sup>\n\nUse the new `beforeCreate` hook instead, which is essentially the same thing. It was renamed for consistency with other lifecycle methods.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `ready` <sup>replaced</sup>\n\nUse the new `mounted` hook instead. It should be noted though that with `mounted`, there's no guarantee to be in-document. For that, also include `Vue.nextTick`/`vm.$nextTick`. For example:\n\n``` js\nmounted: function () {\n  this.$nextTick(function () {\n    // code that assumes this.$el is in-document\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n## `v-for`\n\n### `v-for` Argument Order for Arrays <sup>changed</sup>\n\nWhen including an `index`, the argument order for arrays used to be `(index, value)`. It is now `(value, index)` to be more consistent with JavaScript's native array methods such as `forEach` and `map`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like <code>position</code> or <code>num</code>, the helper will not flag them.</p>\n</div>\n{% endraw %}\n\n### `v-for` Argument Order for Objects <sup>changed</sup>\n\nWhen including a `key`, the argument order for objects used to be `(key, value)`. It is now `(value, key)` to be more consistent with common object iterators such as lodash's.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like <code>name</code> or <code>property</code>, the helper will not flag them.</p>\n</div>\n{% endraw %}\n\n### `$index` and `$key` <sup>removed</sup>\n\nThe implicitly assigned `$index` and `$key` variables have been removed in favor of explicitly defining them in `v-for`. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of these removed variables. If you miss any, you should also see <strong>console errors</strong> such as: <code>Uncaught ReferenceError: $index is not defined</code></p>\n</div>\n{% endraw %}\n\n### `track-by` <sup>replaced</sup>\n\n`track-by` has been replaced with `key`, which works like any other attribute: without the `v-bind:` or `:` prefix, it is treated as a literal string. In most cases, you'd want to use a dynamic binding which expects a full expression instead of a key. For example, in place of:\n\n``` html\n<div v-for=\"item in items\" track-by=\"id\">\n```\n\nYou would now write:\n\n``` html\n<div v-for=\"item in items\" v-bind:key=\"item.id\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>track-by</code>.</p>\n</div>\n{% endraw %}\n\n### `v-for` Range Values <sup>changed</sup>\n\nPreviously, `v-for=\"number in 10\"` would have `number` starting at 0 and ending at 9. Now it starts at 1 and ends at 10.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Search your codebase for the regex <code>/\\w+ in \\d+/</code>. Wherever it appears in a <code>v-for</code>, check to see if you may be affected.</p>\n</div>\n{% endraw %}\n\n## Props\n\n### `coerce` Prop Option <sup>removed</sup>\n\nIf you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:\n\n``` js\nprops: {\n  username: {\n    type: String,\n    coerce: function (value) {\n      return value\n        .toLowerCase()\n        .replace(/\\s+/, '-')\n    }\n  }\n}\n```\n\nYou could write:\n\n``` js\nprops: {\n  username: String,\n},\ncomputed: {\n  normalizedUsername: function () {\n    return this.username\n      .toLowerCase()\n      .replace(/\\s+/, '-')\n  }\n}\n```\n\nThere are a few advantages:\n\n- You still have access to the original value of the prop.\n- You are forced to be more explicit, by giving your coerced value a name that differentiates it from the value passed in the prop.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>coerce</code> option.</p>\n</div>\n{% endraw %}\n\n### `twoWay` Prop Option <sup>removed</sup>\n\nProps are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:\n\n- [Custom component events](components.html#Custom-Events)\n- [Custom input components](components.html#Form-Input-Components-using-Custom-Events) (using component events)\n- [Global state management](state-management.html)\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>twoWay</code> option.</p>\n</div>\n{% endraw %}\n\n### `.once` and `.sync` Modifiers on `v-bind` <sup>removed</sup>\n\nProps are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:\n\n- [Custom component events](components.html#Custom-Events)\n- [Custom input components](components.html#Form-Input-Components-using-Custom-Events) (using component events)\n- [Global state management](state-management.html)\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>.once</code> and <code>.sync</code> modifiers.</p>\n</div>\n{% endraw %}\n\n### Prop Mutation <sup>deprecated</sup>\n\nMutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting `this.myProp = 'someOtherValue'` in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component's local changes will be overwritten.\n\nMost use cases of mutating a prop can be replaced by one of these options:\n\n- a data property, with the prop used to set its default value\n- a computed property\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about prop mutations.</p>\n</div>\n{% endraw %}\n\n### Props on a Root Instance <sup>replaced</sup>\n\nOn root Vue instances (i.e. instances created with `new Vue({ ... })`), you must use `propsData` instead of `props`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that props passed to root instances are no longer working.</p>\n</div>\n{% endraw %}\n\n## Built-In Directives\n\n### Truthiness/Falsiness with `v-bind` <sup>changed</sup>\n\nWhen used with `v-bind`, the only falsy values are now: `null`, `undefined`, and `false`. This means `0` and empty strings will render as truthy. So for example, `v-bind:draggable=\"''\"` will render as `draggable=\"true\"`.\n\nFor enumerated attributes, in addition to the falsy values above, the string `\"false\"` will also render as `attr=\"false\"`.\n\n<p class=\"tip\">Note that for other directives (e.g. `v-if` and `v-show`), JavaScript's normal truthiness still applies.</p>\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### Listening for Native Events on Components with `v-on` <sup>changed</sup>\n\nWhen used on a component, `v-on` now only listens to custom events `$emit`ted by that component. To listen for a native DOM event on the root element, you can use the `.native` modifier. For example:\n\n``` html\n<my-component v-on:click.native=\"doSomething\"></my-component>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### `debounce` Param Attribute for `v-model` <sup>removed</sup>\n\nDebouncing is used to limit how often we execute Ajax requests and other expensive operations. Vue's `debounce` attribute parameter for `v-model` made this easy for very simple cases, but it actually debounced __state updates__ rather than the expensive operations themselves. It's a subtle difference, but it comes with limitations as an application grows.\n\nThese limitations become apparent when designing a search indicator, like this one for example:\n\n{% raw %}\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\" class=\"demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n<script>\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n</script>\n{% endraw %}\n\nUsing the `debounce` attribute, there'd be no way to detect the \"Typing\" state, because we lose access to the input's real-time state. By decoupling the debounce function from Vue however, we're able to debounce only the operation we want to limit, removing the limits on features we can develop:\n\n``` html\n<!--\nBy using the debounce function from lodash or another dedicated\nutility library, we know the specific debounce implementation we\nuse will be best-in-class - and we can use it ANYWHERE. Not just\nin our template.\n-->\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    // This is where the debounce actually belongs.\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n```\n\nAnother advantage of this approach is there will be times when debouncing isn't quite the right wrapper function. For example, when hitting an API for search suggestions, waiting to offer suggestions until after the user has stopped typing for a period of time isn't an ideal experience. What you probably want instead is a __throttling__ function. Now since you're already using a utility library like lodash, refactoring to use its `throttle` function instead takes only a few seconds.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>debounce</code> attribute.</p>\n</div>\n{% endraw %}\n\n### `lazy` or `number` Param Attributes for `v-model` <sup>replaced</sup>\n\nThe `lazy` and `number` param attributes are now modifiers, to make it more clear what That means instead of:\n\n``` html\n<input v-model=\"name\" lazy>\n<input v-model=\"age\" type=\"number\" number>\n```\n\nYou would use:\n\n``` html\n<input v-model.lazy=\"name\">\n<input v-model.number=\"age\" type=\"number\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the these param attributes.</p>\n</div>\n{% endraw %}\n\n### `value` Attribute with `v-model` <sup>removed</sup>\n\n`v-model` no longer cares about the initial value of an inline `value` attribute. For predictability, it will instead always treat the Vue instance data as the source of truth.\n\nThat means this element:\n\n``` html\n<input v-model=\"text\" value=\"foo\">\n```\n\nbacked by this data:\n\n``` js\ndata: {\n  text: 'bar'\n}\n```\n\nwill render with a value of \"bar\" instead of \"foo\". The same goes for a `<textarea>` with existing content. Instead of:\n\n``` html\n<textarea v-model=\"text\">\n  hello world\n</textarea>\n```\n\nYou should ensure your initial value for `text` is \"hello world\".\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about inline value attributes with <code>v-model</code>.</p>\n</div>\n{% endraw %}\n\n### `v-model` with `v-for` Iterated Primitive Values <sup>removed</sup>\n\nCases like this no longer work:\n\n``` html\n<input v-for=\"str in strings\" v-model=\"str\">\n```\n\nThe reason is this is the equivalent JavaScript that the `<input>` would compile to:\n\n``` js\nstrings.map(function (str) {\n  return createElement('input', ...)\n})\n```\n\nAs you can see, `v-model`'s two-way binding doesn't make sense here. Setting `str` to another value in the iterator function will do nothing because it's just a local variable in the function scope.\n\nInstead, you should use an array of __objects__ so that `v-model` can update the field on the object. For example:\n\n``` html\n<input v-for=\"obj in objects\" v-model=\"obj.str\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### `v-bind:style` with Object Syntax and `!important` <sup>removed</sup>\n\nThis will no longer work:\n\n``` html\n<p v-bind:style=\"{ color: myColor + ' !important' }\">hello</p>\n```\n\nIf you really need to override another `!important`, you must use the string syntax:\n\n``` html\n<p v-bind:style=\"'color: ' + myColor + ' !important'\">hello</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of style bindings with <code>!important</code> in objects.</p>\n</div>\n{% endraw %}\n\n### `v-el` and `v-ref` <sup>replaced</sup>\n\nFor simplicity, `v-el` and `v-ref` have been merged into the `ref` attribute, accessible on a component instance via `$refs`. That means `v-el:my-element` would become `ref=\"myElement\"` and `v-ref:my-component` would become `ref=\"myComponent\"`. When used on a normal element, the `ref` will be the DOM element, and when used on a component, the `ref` will be the component instance.\n\nSince `v-ref` is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with `v-for`. For example:\n\n``` html\n<p v-for=\"item in items\" v-bind:ref=\"'item' + item.id\"></p>\n```\n\nPreviously, `v-el`/`v-ref` combined with `v-for` would produce an array of elements/components, because there was no way to give each item a unique name. You can still achieve this behavior by given each item the same `ref`:\n\n``` html\n<p v-for=\"item in items\" ref=\"items\"></p>\n```\n\nUnlike in 1.x, these `$refs` are not reactive, because they're registered/updated during the render process itself. Making them reactive would require duplicate renders for every change.\n\nOn the other hand, `$refs` are designed primarily for programmatic access in JavaScript - it is not recommended to rely on them in templates, because that would mean referring to state that does not belong to the instance itself. This would violate Vue's data-driven view model.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>v-el</code> and <code>v-ref</code>.</p>\n</div>\n{% endraw %}\n\n### `v-else` with `v-show` <sup>removed</sup>\n\n`v-else` no longer works with `v-show`. Use `v-if` with a negation expression instead. For example, instead of:\n\n``` html\n<p v-if=\"foo\">Foo</p>\n<p v-else v-show=\"bar\">Not foo, but bar</p>\n```\n\nYou can use:\n\n``` html\n<p v-if=\"foo\">Foo</p>\n<p v-if=\"!foo && bar\">Not foo, but bar</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-else</code> with <code>v-show</code>.</p>\n</div>\n{% endraw %}\n\n## Custom Directives <sup>simplified</sup>\n\nDirectives have a greatly reduced scope of responsibility: they are now only used for applying low-level direct DOM manipulations. In most cases, you should prefer using components as the main code-reuse abstraction.\n\nSome of the most notable differences include:\n\n- Directives no longer have instances. This means there's no more `this` inside directive hooks. Instead, they receive everything they might need as arguments. If you really must persist state across hooks, you can do so on `el`.\n- Options such as `acceptStatement`, `deep`, `priority`, etc have all been removed. To replace `twoWay` directives, see [this example](#Two-Way-Filters-replaced).\n- Some of the current hooks have different behavior and there are also a couple new hooks.\n\nFortunately, since the new directives are much simpler, you can master them more easily. Read the new [Custom Directives guide](custom-directive.html) to learn more.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</p>\n</div>\n{% endraw %}\n\n### Directive `.literal` Modifier <sup>removed</sup>\n\nThe `.literal` modifier has been removed, as the same can be easily achieved by just providing a string literal as the value.\n\nFor example, you can update:\n\n``` js\n<p v-my-directive.literal=\"foo bar baz\"></p>\n```\n\nto just:\n\n``` html\n<p v-my-directive=\"'foo bar baz'\"></p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the `.literal` modifier on a directive.</p>\n</div>\n{% endraw %}\n\n## Transitions\n\n### `transition` Attribute <sup>replaced</sup>\n\nVue's transition system has changed quite drastically and now uses `<transition>` and `<transition-group>` wrapper elements, rather than the `transition` attribute. It's recommended to read the new [Transitions guide](transitions.html) to learn more.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute.</p>\n</div>\n{% endraw %}\n\n### `Vue.transition` for Reusable Transitions <sup>replaced</sup>\n\nWith the new transition system, you can now just [use components for reusable transitions](transitions.html#Reusable-Transitions).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.transition</code>.</p>\n</div>\n{% endraw %}\n\n### Transition `stagger` Attribute <sup>removed</sup>\n\nIf you need to stagger list transitions, you can control timing by setting and accessing a `data-index` (or similar attribute) on an element. See [an example here](transitions.html#Staggering-List-Transitions).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</p>\n</div>\n{% endraw %}\n\n## Events\n\n### `events` option <sup>removed</sup>\n\nThe `events` option has been removed. Event handlers should now be registered in the `created` hook instead. Check out the [`$dispatch` and `$broadcast` migration guide](#dispatch-and-broadcast-replaced) for a detailed example.\n\n### `Vue.directive('on').keyCodes` <sup>replaced</sup>\n\nThe new, more concise way to configure `keyCodes` is through `Vue.config.keyCodes`. For example:\n\n``` js\n// enable v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the the old <code>keyCode</code> configuration syntax.</p>\n</div>\n{% endraw %}\n\n### `$dispatch` and `$broadcast` <sup>replaced</sup>\n\n`$dispatch` and `$broadcast` have been removed in favor of more explicitly cross-component communication and more maintainable state management solutions, such as [Vuex](https://github.com/vuejs/vuex).\n\nThe problem is event flows that depend on a component's tree structure can be hard to reason about and very brittle when the tree becomes large. It simply doesn't scale well and we don't want to set you up for pain later. `$dispatch` and `$broadcast` also do not solve communication between sibling components.\n\nOne of the most common uses for these methods is to communicate between a parent and its direct children. In these cases, you can actually [listen to an `$emit` from a child with `v-on`](components.html#Form-Input-Components-using-Custom-Events). This allows you to keep the convenience of events with added explicitness.\n\nHowever, when communicating between distant descendants/ancestors, `$emit` won't help you. Instead, the simplest possible upgrade would be to use a centralized event hub. This has the added benefit of allowing you to communicate between components no matter where they are in the component tree - even between siblings! Because Vue instances implement an event emitter interface, you can actually use an empty Vue instance for this purpose.\n\nFor example, let's say we have a todo app structured like this:\n\n```\nTodos\n|-- NewTodoInput\n|-- Todo\n    |-- DeleteTodoButton\n```\n\nWe could manage communication between components with this single event hub:\n\n``` js\n// This is the event hub we'll use in every\n// component to communicate between them.\nvar eventHub = new Vue()\n```\n\nThen in our components, we can use `$emit`, `$on`, `$off` to emit events, listen for events, and clean up event listeners, respectively:\n\n``` js\n// NewTodoInput\n// ...\nmethods: {\n  addTodo: function () {\n    eventHub.$emit('add-todo', { text: this.newTodoText })\n    this.newTodoText = ''\n  }\n}\n```\n\n``` js\n// DeleteTodoButton\n// ...\nmethods: {\n  deleteTodo: function (id) {\n    eventHub.$emit('delete-todo', id)\n  }\n}\n```\n\n``` js\n// Todos\n// ...\ncreated: function () {\n  eventHub.$on('add-todo', this.addTodo)\n  eventHub.$on('delete-todo', this.deleteTodo)\n},\n// It's good to clean up event listeners before\n// a component is destroyed.\nbeforeDestroy: function () {\n  eventHub.$off('add-todo', this.addTodo)\n  eventHub.$off('delete-todo', this.deleteTodo)\n},\nmethods: {\n  addTodo: function (newTodo) {\n    this.todos.push(newTodo)\n  },\n  deleteTodo: function (todoId) {\n    this.todos = this.todos.filter(function (todo) {\n      return todo.id !== todoId\n    })\n  }\n}\n```\n\nThis pattern can serve as a replacement for `$dispatch` and `$broadcast` in simple scenarios, but for more complex cases, it's recommended to use a dedicated state management layer such as [Vuex](https://github.com/vuejs/vuex).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>$dispatch</code> and <code>$broadcast</code>.</p>\n</div>\n{% endraw %}\n\n## Filters\n\n### Filters Outside Text Interpolations <sup>removed</sup>\n\nFilters can now only be used inside text interpolations (`{% raw %}{{ }}{% endraw %}` tags). In the past we've found using filters within directives such as `v-model`, `v-on`, etc led to more complexity than convenience. For list filtering on `v-for`, it's also better to move that logic into JavaScript as computed properties, so that it can be reused throughout your component.\n\nIn general, whenever something can be achieved in plain JavaScript, we want to avoid introducing a special syntax like filters to take care of the same concern. Here's how you can replace Vue's built-in directive filters:\n\n#### Replacing the `debounce` Filter\n\nInstead of:\n\n``` html\n<input v-on:keyup=\"doStuff | debounce 500\">\n```\n\n``` js\nmethods: {\n  doStuff: function () {\n    // ...\n  }\n}\n```\n\nUse [lodash's `debounce`](https://lodash.com/docs/4.15.0#debounce) (or possibly [`throttle`](https://lodash.com/docs/4.15.0#throttle)) to directly limit calling the expensive method. You can achieve the same as above like this:\n\n``` html\n<input v-on:keyup=\"doStuff\">\n```\n\n``` js\nmethods: {\n  doStuff: _.debounce(function () {\n    // ...\n  }, 500)\n}\n```\n\nFor more on the advantages of this strategy, see [the example here with `v-model`](#v-model-with-debounce-removed).\n\n#### Replacing the `limitBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"item in items | limitBy 10\">{{ item }}</p>\n```\n\nUse JavaScript's built-in [`.slice` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Examples) in a computed property:\n\n``` html\n<p v-for=\"item in filteredItems\">{{ item }}</p>\n```\n\n``` js\ncomputed: {\n  filteredItems: function () {\n    return this.items.slice(0, 10)\n  }\n}\n```\n\n#### Replacing the `filterBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"user in users | filterBy searchQuery in 'name'\">{{ user.name }}</p>\n```\n\nUse JavaScript's built-in [`.filter` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Examples) in a computed property:\n\n``` html\n<p v-for=\"user in filteredUsers\">{{ user.name }}</p>\n```\n\n``` js\ncomputed: {\n  filteredUsers: function () {\n    var self = this\n    return self.users.filter(function (user) {\n      return user.name.indexOf(self.searchQuery) !== -1\n    })\n  }\n}\n```\n\nJavaScript's native `.filter` can also manage much more complex filtering operations, because you have access to the full power of JavaScript within computed properties. For example, if you wanted to find all active users and case-insensitively match against both their name and email:\n\n``` js\nvar self = this\nself.users.filter(function (user) {\n  var searchRegex = new RegExp(self.searchQuery, 'i')\n  return user.isActive && (\n    searchRegex.test(user.name) ||\n    searchRegex.test(user.email)\n  )\n})\n```\n\n#### Replacing the `orderBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"user in users | orderBy 'name'\">{{ user.name }}</p>\n```\n\nUse [lodash's `orderBy`](https://lodash.com/docs/4.15.0#orderBy) (or possibly [`sortBy`](https://lodash.com/docs/4.15.0#sortBy)) in a computed property:\n\n``` html\n<p v-for=\"user in orderedUsers\">{{ user.name }}</p>\n```\n\n``` js\ncomputed: {\n  orderedUsers: function () {\n    return _.orderBy(this.users, 'name')\n  }\n}\n```\n\nYou can even order by multiple columns:\n\n``` js\n_.orderBy(this.users, ['name', 'last_login'], ['asc', 'desc'])\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters being used inside directives. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Filter Argument Syntax <sup>changed</sup>\n\nFilters' syntax for arguments now better aligns with JavaScript function invocation. So instead of taking space-delimited arguments:\n\n``` html\n<p>{{ date | formatDate 'YY-MM-DD' timeZone }}</p>\n```\n\nWe surround the arguments with parentheses and delimit the arguments with commas:\n\n``` html\n<p>{{ date | formatDate('YY-MM-DD', timeZone) }}</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the old filter syntax. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Built-In Text Filters <sup>removed</sup>\n\nAlthough filters within text interpolations are still allowed, all of the filters have been removed. Instead, it's recommended to use more specialized libraries for solving problems in each domain (e.g. [`date-fns`](https://date-fns.org/) to format dates and [`accounting`](http://openexchangerates.github.io/accounting.js/) for currencies).\n\nFor each of Vue's built-in text filters, we go through how you can replace them below. The example code could exist in custom helper functions, methods, or computed properties.\n\n#### Replacing the `json` Filter\n\nYou actually don't need to for debugging anymore, as Vue will nicely format output for you automatically, whether it's a string, number, array, or plain object. If you want the exact same functionality as JavaScript's `JSON.stringify` though, then you can use that in a method or computed property.\n\n#### Replacing the `capitalize` Filter\n\n``` js\ntext[0].toUpperCase() + text.slice(1)\n```\n\n#### Replacing the `uppercase` Filter\n\n``` js\ntext.toUpperCase()\n```\n\n#### Replacing the `lowercase` Filter\n\n``` js\ntext.toLowerCase()\n```\n\n#### Replacing the `pluralize` Filter\n\nThe [pluralize](https://www.npmjs.com/package/pluralize) package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like `0`, then you can also easily define your own pluralize functions. For example:\n\n``` js\nfunction pluralizeKnife (count) {\n  if (count === 0) {\n    return 'no knives'\n  } else if (count === 1) {\n    return '1 knife'\n  } else {\n    return count + 'knives'\n  }\n}\n```\n\n#### Replacing the `currency` Filter\n\nFor a very naive implementation, you could just do something like this:\n\n``` js\n'$' + price.toFixed(2)\n```\n\nIn many cases though, you'll still run into strange behavior (e.g. `0.035.toFixed(2)` rounds up to `0.04`, but `0.045` rounds down to `0.04`). To work around these issues, you can use the [`accounting`](http://openexchangerates.github.io/accounting.js/) library to more reliably format currencies.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete text filters. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Two-Way Filters <sup>replaced</sup>\n\nSome users have enjoyed using two-way filters with `v-model` to create interesting inputs with very little code. While _seemingly_ simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.\n\nAs an example, we'll now walk the migration of a two-way currency filter:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/6744xnjk/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nIt mostly works well, but the delayed state updates can cause strange behavior. For example, click on the `Result` tab and try entering `9.999` into one of those inputs. When the input loses focus, its value will update to `$10.00`. When looking at the calculated total however, you'll see that `9.999` is what's stored in our data. The version of reality that the user sees is out of sync!\n\nTo start transitioning towards a more robust solution using Vue 2.0, let's first wrap this filter in a new `<currency-input>` component:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/943zfbsh/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThis allows us add behavior that a filter alone couldn't encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external [`currencyValidator` object](https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e):\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/9c32kev2/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThis increased modularity not only makes it easier to migrate to Vue 2, but also allows currency parsing and formatting to be:\n\n- unit tested in isolation from your Vue code\n- used by other parts of your application, such as to validate the payload to an API endpoint\n\nHaving this validator extracted out, we've also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it's actually impossible for users to enter anything wrong, similar to what the browser's native number input tries to do.\n\nWe're still limited however, by filters and by Vue 1.0 in general, so let's complete the upgrade to Vue 2.0:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nYou may notice that:\n\n- Every aspect of our input is more explicit, using lifecycle hooks and DOM events in place of the hidden behavior of two-way filters.\n- We can now use `v-model` directly on our custom inputs, which is not only more consistent with normal inputs, but also means our component is Vuex-friendly.\n- Since we're no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters used in directives like <code>v-model</code>. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Slots\n\n### Duplicate Slots <sup>removed</sup>\n\nIt is no longer supported to have `<slot>`s with the same name in the same template. When a slot is rendered it is \"used up\" and cannot be rendered elsewhere in the same render tree. If you must render the same content in multiple places, pass that content as a prop.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about duplicate slots <code>v-model</code>.</p>\n</div>\n{% endraw %}\n\n### `slot` Attribute Styling <sup>removed</sup>\n\nContent inserted via named `<slot>` no longer preserves the `slot` attribute. Use a wrapper element to style them, or for advanced use cases, modify the inserted content programmatically using [render functions](render-function.html).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find CSS selectors targeting named slots (e.g. <code>[slot=\"my-slot-name\"]</code>).</p>\n</div>\n{% endraw %}\n\n## Special Attributes\n\n### `keep-alive` Attribute <sup>replaced</sup>\n\n`keep-alive` is no longer a special attribute, but rather a wrapper component, similar to `<transition>`. For example:\n\n``` html\n<keep-alive>\n  <component v-bind:is=\"view\"></component>\n</keep-alive>\n```\n\nThis makes it possible to use `<keep-alive>` on multiple conditional children:\n\n``` html\n<keep-alive>\n  <todo-list v-if=\"todos.length > 0\"></todo-list>\n  <no-todos-gif v-else></no-todos-gif>\n</keep-alive>\n```\n\n<p class=\"tip\">When `<keep-alive>` has multiple children, they should eventually evaluate to a single child. Any child other than the first one will simply be ignored.</p>\n\nWhen used together with `<transition>`, make sure to nest it inside:\n\n``` html\n<transition>\n  <keep-alive>\n    <component v-bind:is=\"view\"></component>\n  </keep-alive>\n</transition>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find <code>keep-alive</code> attributes.</p>\n</div>\n{% endraw %}\n\n## Interpolation\n\n### Interpolation within Attributes <sup>removed</sup>\n\nInterpolation within attributes is no longer valid. For example:\n\n``` html\n<button class=\"btn btn-{{ size }}\"></button>\n```\n\nShould either be updated to use an inline expression:\n\n``` html\n<button v-bind:class=\"'btn btn-' + size\"></button>\n```\n\nOr a data/computed property:\n\n``` html\n<button v-bind:class=\"buttonClasses\"></button>\n```\n\n``` js\ncomputed: {\n  buttonClasses: function () {\n    return 'btn btn-' + size\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of interpolation used within attributes.</p>\n</div>\n{% endraw %}\n\n### HTML Interpolation <sup>removed</sup>\n\nHTML interpolations (`{% raw %}{{{ foo }}}{% endraw %}`) have been removed in favor of the [`v-html` directive](../api/#v-html).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find HTML interpolations.</p>\n</div>\n{% endraw %}\n\n### One-Time Bindings <sup>replaced</sup>\n\nOne time bindings (`{% raw %}{{* foo }}{% endraw %}`) have been replaced by the new [`v-once` directive](../api/#v-once).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find one-time bindings.</p>\n</div>\n{% endraw %}\n\n## Reactivity\n\n### `vm.$watch` <sup>changed</sup>\n\nWatchers created via `vm.$watch` are now fired before the associated component rerenders. This gives you the chance to further update state before the component rerender, thus avoiding unnecessary updates. For example, you can watch a component prop and update the component's own data when the prop changes.\n\nIf you were previously relying on `vm.$watch` to do something with the DOM after a component updates, you can instead do so in the `updated` lifecycle hook.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that a watcher was relying on the old behavior.</p>\n</div>\n{% endraw %}\n\n### `vm.$set` <sup>changed</sup>\n\n`vm.$set` is now just an alias for [`Vue.set`](../api/#Vue-set).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n{% endraw %}\n\n### `vm.$delete` <sup>changed</sup>\n\n`vm.$delete` is now just an alias for [`Vue.delete`](../api/#Vue-delete).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n{% endraw %}\n\n### `Array.prototype.$set` <sup>removed</sup>\n\nUse `Vue.set` instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$set</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n{% endraw %}\n\n### `Array.prototype.$remove` <sup>removed</sup>\n\nUse `Array.prototype.splice` instead. For example:\n\n``` js\nmethods: {\n  removeTodo: function (todo) {\n    var index = this.todos.indexOf(todo)\n    this.todos.splice(index, 1)\n  }\n}\n```\n\nOr better yet, just pass removal methods an index:\n\n``` js\nmethods: {\n  removeTodo: function (index) {\n    this.todos.splice(index, 1)\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$remove</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n{% endraw %}\n\n### `Vue.set` and `Vue.delete` on Vue instances <sup>removed</sup>\n\n`Vue.set` and `Vue.delete` can no longer work on Vue instances. It is now mandatory to properly declare all top-level reactive properties in the data option. If you'd like to delete properties on a Vue instance or its `$data`, just set it to null.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.set</code> or <code>Vue.delete</code> on a Vue instance. If you miss any, they'll trigger <strong>console warnings</strong>.</p>\n</div>\n{% endraw %}\n\n### Replacing `vm.$data` <sup>removed</sup>\n\nIt is now prohibited to replace a component instance's root $data. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of overwriting <code>vm.$data</code>. If you miss any, <strong>console warnings</strong> will be emitted.</p>\n</div>\n{% endraw %}\n\n### `vm.$get` <sup>removed</sup>\n\nJust retrieve reactive data directly.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$get</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## DOM-Focused Instance Methods\n\n### `vm.$appendTo` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.appendChild(vm.$el)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$appendTo</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$before` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.parentNode.insertBefore(vm.$el, myElement)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$before</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$after` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.parentNode.insertBefore(vm.$el, myElement.nextSibling)\n```\n\nOr if `myElement` is the last child:\n\n``` js\nmyElement.parentNode.appendChild(vm.$el)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$after</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$remove` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nvm.$el.remove()\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$remove</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Meta Instance Methods\n\n### `vm.$eval` <sup>removed</sup>\n\nNo real use. If you do happen to rely on this feature somehow and aren't sure how to work around it, post on [the forum](http://forum.vuejs.org/) for ideas.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$eval</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$interpolate` <sup>removed</sup>\n\nNo real use. If you do happen to rely on this feature somehow and aren't sure how to work around it, post on [the forum](http://forum.vuejs.org/) for ideas.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$interpolate</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$log` <sup>removed</sup>\n\nUse the [Vue Devtools](https://github.com/vuejs/vue-devtools) for the optimal debugging experience.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$log</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Instance DOM Options\n\n### `replace: false` <sup>removed</sup>\n\nComponents now always replace the element they're bound to. To simulate the behavior of `replace: false`, you can wrap your root component with an element similar to the one you're replacing. For example:\n\n``` js\nnew Vue({\n  el: '#app',\n  template: '<div id=\"app\"> ... </div>'\n})\n```\n\nOr with a render function:\n\n``` js\nnew Vue({\n  el: '#app',\n  render: function (h) {\n    h('div', {\n      attrs: {\n        id: 'app',\n      }\n    }, /* ... */)\n  }\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>replace: false</code>.</p>\n</div>\n{% endraw %}\n\n## Global Config\n\n### `Vue.config.debug` <sup>removed</sup>\n\nNo longer necessary, since warnings come with stack traces by default now.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.debug</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.async` <sup>removed</sup>\n\nAsync is now required for rendering performance.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.async</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.delimiters` <sup>replaced</sup>\n\nThis has been reworked as a [component-level option](../api/#delimiters). This allows you to use alternative delimiters within your app without breaking 3rd-party components.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.delimiters</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.unsafeDelimiters` <sup>removed</sup>\n\nHTML interpolation has been [removed in favor of `v-html`](#HTML-Interpolation-removed).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.unsafeDelimiters</code>. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</p>\n</div>\n{% endraw %}\n\n## Global API\n\n### `Vue.extend` with `el` <sup>removed</sup>\n\nThe el option can no longer be used in `Vue.extend`. It's only valid as an instance creation option.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about the <code>el</code> option with <code>Vue.extend</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.elementDirective` <sup>removed</sup>\n\nUse components instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.elementDirective</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.partial` <sup>removed</sup>\n\nPartials have been removed in favor of more explicit data flow between components, using props. Unless you're using a partial in a performance-critical area, the recommendation is to simply use a [normal component](components.html) instead. If you were dynamically binding the `name` of a partial, you can use a [dynamic component](components.html#Dynamic-Components).\n\nIf you happen to be using partials in a performance-critical part of your app, then you should upgrade to [functional components](render-function.html#Functional-Components). They must be in a plain JS/JSX file (rather than in a `.vue` file) and are stateless and instanceless, just like partials. This makes rendering extremely fast.\n\nA benefit of functional components over partials is that they can be much more dynamic, because they grant you access to the full power of JavaScript. There is a cost to this power however. If you've never used a component framework with render functions before, they may take a bit longer to learn.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.partial</code>.</p>\n</div>\n{% endraw %}\n","source":"v2/guide/migration.md","raw":"---\ntitle: Migration from Vue 1.x\ntype: guide\norder: 25\n---\n\n## FAQ\n\n> Woah - this is a super long page! Does that mean 2.0 is completely different, I'll have to learn the basics all over again, and migrating will be practically impossible?\n\nI'm glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven't changed. It's long because we like to offer very detailed explanations and include a lot of examples. Rest assured, __this is not something you have to read from top to bottom!__\n\n> Where should I start in a migration?\n\n1. Start by running the [migration helper](https://github.com/vuejs/vue-migration-helper) on a current project. We've carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they'll let you know, offer suggestions, and provide links to more info.\n\n2. After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn't catch, check it out.\n\n3. If you have any tests, run them and see what still fails. If you don't have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.\n\n4. By now, your app should be fully migrated. If you're still hungry for more though, you can read the rest of this page - or just dive in to the new and improved guide from [the beginning](index.html). Many parts will be skimmable, since you're already familiar with the core concepts.\n\n> How long will it take to migrate a Vue 1.x app to 2.0?\n\nIt depends on a few factors:\n\n- The size of your app (small to medium-sized apps will probably be less than a day)\n\n- How many times you get distracted and start playing with a cool new feature. 😉 &nbsp;Not judging, it also happened to us while building 2.0!\n\n- Which obsolete features you're using. Most can be upgraded with find-and-replace, but others might take a few minutes. If you're not currently following best practices, Vue 2.0 will also try harder to force you to. This is a good thing in the long run, but could also mean a significant (though possibly overdue) refactor.\n\n> If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue-Router?\n\nOnly Vue-Router 2 is compatible with Vue 2, so yes, you'll have to follow the [migration path for Vue-Router](migration-vue-router.html) as well. Fortunately, most applications don't have a lot of router code, so this likely won't take more than an hour.\n\nAs for Vuex, even version 0.8 is compatible with Vue 2, so you're not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.\n\n## Templates\n\n### Fragment Instances <sup>removed</sup>\n\nEvery component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:\n\n``` html\n<p>foo</p>\n<p>bar</p>\n```\n\nIt's recommended to simply wrap the entire contents in a new element, like this:\n\n``` html\n<div>\n  <p>foo</p>\n  <p>bar</p>\n</div>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about multiple root elements in a template.</p>\n</div>\n{% endraw %}\n\n## Lifecycle Hooks\n\n### `beforeCompile` <sup>removed</sup>\n\nUse the `created` hook instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `compiled` <sup>replaced</sup>\n\nUse the new `mounted` hook instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `attached` <sup>removed</sup>\n\nUse a custom in-DOM check in other hooks. For example, to replace:\n\n``` js\nattached: function () {\n  doSomething()\n}\n```\n\nYou could use:\n\n``` js\nmounted: function () {\n  this.$nextTick(function () {\n    doSomething()\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `detached` <sup>removed</sup>\n\nUse a custom in-DOM check in other hooks. For example, to replace:\n\n``` js\ndetached: function () {\n  doSomething()\n}\n```\n\nYou could use:\n\n``` js\ndestroyed: function () {\n  this.$nextTick(function () {\n    doSomething()\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `init` <sup>renamed</sup>\n\nUse the new `beforeCreate` hook instead, which is essentially the same thing. It was renamed for consistency with other lifecycle methods.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n### `ready` <sup>replaced</sup>\n\nUse the new `mounted` hook instead. It should be noted though that with `mounted`, there's no guarantee to be in-document. For that, also include `Vue.nextTick`/`vm.$nextTick`. For example:\n\n``` js\nmounted: function () {\n  this.$nextTick(function () {\n    // code that assumes this.$el is in-document\n  })\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n{% endraw %}\n\n## `v-for`\n\n### `v-for` Argument Order for Arrays <sup>changed</sup>\n\nWhen including an `index`, the argument order for arrays used to be `(index, value)`. It is now `(value, index)` to be more consistent with JavaScript's native array methods such as `forEach` and `map`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like <code>position</code> or <code>num</code>, the helper will not flag them.</p>\n</div>\n{% endraw %}\n\n### `v-for` Argument Order for Objects <sup>changed</sup>\n\nWhen including a `key`, the argument order for objects used to be `(key, value)`. It is now `(value, key)` to be more consistent with common object iterators such as lodash's.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like <code>name</code> or <code>property</code>, the helper will not flag them.</p>\n</div>\n{% endraw %}\n\n### `$index` and `$key` <sup>removed</sup>\n\nThe implicitly assigned `$index` and `$key` variables have been removed in favor of explicitly defining them in `v-for`. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of these removed variables. If you miss any, you should also see <strong>console errors</strong> such as: <code>Uncaught ReferenceError: $index is not defined</code></p>\n</div>\n{% endraw %}\n\n### `track-by` <sup>replaced</sup>\n\n`track-by` has been replaced with `key`, which works like any other attribute: without the `v-bind:` or `:` prefix, it is treated as a literal string. In most cases, you'd want to use a dynamic binding which expects a full expression instead of a key. For example, in place of:\n\n``` html\n<div v-for=\"item in items\" track-by=\"id\">\n```\n\nYou would now write:\n\n``` html\n<div v-for=\"item in items\" v-bind:key=\"item.id\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>track-by</code>.</p>\n</div>\n{% endraw %}\n\n### `v-for` Range Values <sup>changed</sup>\n\nPreviously, `v-for=\"number in 10\"` would have `number` starting at 0 and ending at 9. Now it starts at 1 and ends at 10.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Search your codebase for the regex <code>/\\w+ in \\d+/</code>. Wherever it appears in a <code>v-for</code>, check to see if you may be affected.</p>\n</div>\n{% endraw %}\n\n## Props\n\n### `coerce` Prop Option <sup>removed</sup>\n\nIf you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:\n\n``` js\nprops: {\n  username: {\n    type: String,\n    coerce: function (value) {\n      return value\n        .toLowerCase()\n        .replace(/\\s+/, '-')\n    }\n  }\n}\n```\n\nYou could write:\n\n``` js\nprops: {\n  username: String,\n},\ncomputed: {\n  normalizedUsername: function () {\n    return this.username\n      .toLowerCase()\n      .replace(/\\s+/, '-')\n  }\n}\n```\n\nThere are a few advantages:\n\n- You still have access to the original value of the prop.\n- You are forced to be more explicit, by giving your coerced value a name that differentiates it from the value passed in the prop.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>coerce</code> option.</p>\n</div>\n{% endraw %}\n\n### `twoWay` Prop Option <sup>removed</sup>\n\nProps are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:\n\n- [Custom component events](components.html#Custom-Events)\n- [Custom input components](components.html#Form-Input-Components-using-Custom-Events) (using component events)\n- [Global state management](state-management.html)\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>twoWay</code> option.</p>\n</div>\n{% endraw %}\n\n### `.once` and `.sync` Modifiers on `v-bind` <sup>removed</sup>\n\nProps are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:\n\n- [Custom component events](components.html#Custom-Events)\n- [Custom input components](components.html#Form-Input-Components-using-Custom-Events) (using component events)\n- [Global state management](state-management.html)\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>.once</code> and <code>.sync</code> modifiers.</p>\n</div>\n{% endraw %}\n\n### Prop Mutation <sup>deprecated</sup>\n\nMutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting `this.myProp = 'someOtherValue'` in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component's local changes will be overwritten.\n\nMost use cases of mutating a prop can be replaced by one of these options:\n\n- a data property, with the prop used to set its default value\n- a computed property\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about prop mutations.</p>\n</div>\n{% endraw %}\n\n### Props on a Root Instance <sup>replaced</sup>\n\nOn root Vue instances (i.e. instances created with `new Vue({ ... })`), you must use `propsData` instead of `props`.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that props passed to root instances are no longer working.</p>\n</div>\n{% endraw %}\n\n## Built-In Directives\n\n### Truthiness/Falsiness with `v-bind` <sup>changed</sup>\n\nWhen used with `v-bind`, the only falsy values are now: `null`, `undefined`, and `false`. This means `0` and empty strings will render as truthy. So for example, `v-bind:draggable=\"''\"` will render as `draggable=\"true\"`.\n\nFor enumerated attributes, in addition to the falsy values above, the string `\"false\"` will also render as `attr=\"false\"`.\n\n<p class=\"tip\">Note that for other directives (e.g. `v-if` and `v-show`), JavaScript's normal truthiness still applies.</p>\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### Listening for Native Events on Components with `v-on` <sup>changed</sup>\n\nWhen used on a component, `v-on` now only listens to custom events `$emit`ted by that component. To listen for a native DOM event on the root element, you can use the `.native` modifier. For example:\n\n``` html\n<my-component v-on:click.native=\"doSomething\"></my-component>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### `debounce` Param Attribute for `v-model` <sup>removed</sup>\n\nDebouncing is used to limit how often we execute Ajax requests and other expensive operations. Vue's `debounce` attribute parameter for `v-model` made this easy for very simple cases, but it actually debounced __state updates__ rather than the expensive operations themselves. It's a subtle difference, but it comes with limitations as an application grows.\n\nThese limitations become apparent when designing a search indicator, like this one for example:\n\n{% raw %}\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\" class=\"demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n<script>\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n</script>\n{% endraw %}\n\nUsing the `debounce` attribute, there'd be no way to detect the \"Typing\" state, because we lose access to the input's real-time state. By decoupling the debounce function from Vue however, we're able to debounce only the operation we want to limit, removing the limits on features we can develop:\n\n``` html\n<!--\nBy using the debounce function from lodash or another dedicated\nutility library, we know the specific debounce implementation we\nuse will be best-in-class - and we can use it ANYWHERE. Not just\nin our template.\n-->\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    // This is where the debounce actually belongs.\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n```\n\nAnother advantage of this approach is there will be times when debouncing isn't quite the right wrapper function. For example, when hitting an API for search suggestions, waiting to offer suggestions until after the user has stopped typing for a period of time isn't an ideal experience. What you probably want instead is a __throttling__ function. Now since you're already using a utility library like lodash, refactoring to use its `throttle` function instead takes only a few seconds.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>debounce</code> attribute.</p>\n</div>\n{% endraw %}\n\n### `lazy` or `number` Param Attributes for `v-model` <sup>replaced</sup>\n\nThe `lazy` and `number` param attributes are now modifiers, to make it more clear what That means instead of:\n\n``` html\n<input v-model=\"name\" lazy>\n<input v-model=\"age\" type=\"number\" number>\n```\n\nYou would use:\n\n``` html\n<input v-model.lazy=\"name\">\n<input v-model.number=\"age\" type=\"number\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the these param attributes.</p>\n</div>\n{% endraw %}\n\n### `value` Attribute with `v-model` <sup>removed</sup>\n\n`v-model` no longer cares about the initial value of an inline `value` attribute. For predictability, it will instead always treat the Vue instance data as the source of truth.\n\nThat means this element:\n\n``` html\n<input v-model=\"text\" value=\"foo\">\n```\n\nbacked by this data:\n\n``` js\ndata: {\n  text: 'bar'\n}\n```\n\nwill render with a value of \"bar\" instead of \"foo\". The same goes for a `<textarea>` with existing content. Instead of:\n\n``` html\n<textarea v-model=\"text\">\n  hello world\n</textarea>\n```\n\nYou should ensure your initial value for `text` is \"hello world\".\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about inline value attributes with <code>v-model</code>.</p>\n</div>\n{% endraw %}\n\n### `v-model` with `v-for` Iterated Primitive Values <sup>removed</sup>\n\nCases like this no longer work:\n\n``` html\n<input v-for=\"str in strings\" v-model=\"str\">\n```\n\nThe reason is this is the equivalent JavaScript that the `<input>` would compile to:\n\n``` js\nstrings.map(function (str) {\n  return createElement('input', ...)\n})\n```\n\nAs you can see, `v-model`'s two-way binding doesn't make sense here. Setting `str` to another value in the iterator function will do nothing because it's just a local variable in the function scope.\n\nInstead, you should use an array of __objects__ so that `v-model` can update the field on the object. For example:\n\n``` html\n<input v-for=\"obj in objects\" v-model=\"obj.str\">\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n{% endraw %}\n\n### `v-bind:style` with Object Syntax and `!important` <sup>removed</sup>\n\nThis will no longer work:\n\n``` html\n<p v-bind:style=\"{ color: myColor + ' !important' }\">hello</p>\n```\n\nIf you really need to override another `!important`, you must use the string syntax:\n\n``` html\n<p v-bind:style=\"'color: ' + myColor + ' !important'\">hello</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of style bindings with <code>!important</code> in objects.</p>\n</div>\n{% endraw %}\n\n### `v-el` and `v-ref` <sup>replaced</sup>\n\nFor simplicity, `v-el` and `v-ref` have been merged into the `ref` attribute, accessible on a component instance via `$refs`. That means `v-el:my-element` would become `ref=\"myElement\"` and `v-ref:my-component` would become `ref=\"myComponent\"`. When used on a normal element, the `ref` will be the DOM element, and when used on a component, the `ref` will be the component instance.\n\nSince `v-ref` is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with `v-for`. For example:\n\n``` html\n<p v-for=\"item in items\" v-bind:ref=\"'item' + item.id\"></p>\n```\n\nPreviously, `v-el`/`v-ref` combined with `v-for` would produce an array of elements/components, because there was no way to give each item a unique name. You can still achieve this behavior by given each item the same `ref`:\n\n``` html\n<p v-for=\"item in items\" ref=\"items\"></p>\n```\n\nUnlike in 1.x, these `$refs` are not reactive, because they're registered/updated during the render process itself. Making them reactive would require duplicate renders for every change.\n\nOn the other hand, `$refs` are designed primarily for programmatic access in JavaScript - it is not recommended to rely on them in templates, because that would mean referring to state that does not belong to the instance itself. This would violate Vue's data-driven view model.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>v-el</code> and <code>v-ref</code>.</p>\n</div>\n{% endraw %}\n\n### `v-else` with `v-show` <sup>removed</sup>\n\n`v-else` no longer works with `v-show`. Use `v-if` with a negation expression instead. For example, instead of:\n\n``` html\n<p v-if=\"foo\">Foo</p>\n<p v-else v-show=\"bar\">Not foo, but bar</p>\n```\n\nYou can use:\n\n``` html\n<p v-if=\"foo\">Foo</p>\n<p v-if=\"!foo && bar\">Not foo, but bar</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-else</code> with <code>v-show</code>.</p>\n</div>\n{% endraw %}\n\n## Custom Directives <sup>simplified</sup>\n\nDirectives have a greatly reduced scope of responsibility: they are now only used for applying low-level direct DOM manipulations. In most cases, you should prefer using components as the main code-reuse abstraction.\n\nSome of the most notable differences include:\n\n- Directives no longer have instances. This means there's no more `this` inside directive hooks. Instead, they receive everything they might need as arguments. If you really must persist state across hooks, you can do so on `el`.\n- Options such as `acceptStatement`, `deep`, `priority`, etc have all been removed. To replace `twoWay` directives, see [this example](#Two-Way-Filters-replaced).\n- Some of the current hooks have different behavior and there are also a couple new hooks.\n\nFortunately, since the new directives are much simpler, you can master them more easily. Read the new [Custom Directives guide](custom-directive.html) to learn more.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</p>\n</div>\n{% endraw %}\n\n### Directive `.literal` Modifier <sup>removed</sup>\n\nThe `.literal` modifier has been removed, as the same can be easily achieved by just providing a string literal as the value.\n\nFor example, you can update:\n\n``` js\n<p v-my-directive.literal=\"foo bar baz\"></p>\n```\n\nto just:\n\n``` html\n<p v-my-directive=\"'foo bar baz'\"></p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the `.literal` modifier on a directive.</p>\n</div>\n{% endraw %}\n\n## Transitions\n\n### `transition` Attribute <sup>replaced</sup>\n\nVue's transition system has changed quite drastically and now uses `<transition>` and `<transition-group>` wrapper elements, rather than the `transition` attribute. It's recommended to read the new [Transitions guide](transitions.html) to learn more.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute.</p>\n</div>\n{% endraw %}\n\n### `Vue.transition` for Reusable Transitions <sup>replaced</sup>\n\nWith the new transition system, you can now just [use components for reusable transitions](transitions.html#Reusable-Transitions).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.transition</code>.</p>\n</div>\n{% endraw %}\n\n### Transition `stagger` Attribute <sup>removed</sup>\n\nIf you need to stagger list transitions, you can control timing by setting and accessing a `data-index` (or similar attribute) on an element. See [an example here](transitions.html#Staggering-List-Transitions).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</p>\n</div>\n{% endraw %}\n\n## Events\n\n### `events` option <sup>removed</sup>\n\nThe `events` option has been removed. Event handlers should now be registered in the `created` hook instead. Check out the [`$dispatch` and `$broadcast` migration guide](#dispatch-and-broadcast-replaced) for a detailed example.\n\n### `Vue.directive('on').keyCodes` <sup>replaced</sup>\n\nThe new, more concise way to configure `keyCodes` is through `Vue.config.keyCodes`. For example:\n\n``` js\n// enable v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the the old <code>keyCode</code> configuration syntax.</p>\n</div>\n{% endraw %}\n\n### `$dispatch` and `$broadcast` <sup>replaced</sup>\n\n`$dispatch` and `$broadcast` have been removed in favor of more explicitly cross-component communication and more maintainable state management solutions, such as [Vuex](https://github.com/vuejs/vuex).\n\nThe problem is event flows that depend on a component's tree structure can be hard to reason about and very brittle when the tree becomes large. It simply doesn't scale well and we don't want to set you up for pain later. `$dispatch` and `$broadcast` also do not solve communication between sibling components.\n\nOne of the most common uses for these methods is to communicate between a parent and its direct children. In these cases, you can actually [listen to an `$emit` from a child with `v-on`](components.html#Form-Input-Components-using-Custom-Events). This allows you to keep the convenience of events with added explicitness.\n\nHowever, when communicating between distant descendants/ancestors, `$emit` won't help you. Instead, the simplest possible upgrade would be to use a centralized event hub. This has the added benefit of allowing you to communicate between components no matter where they are in the component tree - even between siblings! Because Vue instances implement an event emitter interface, you can actually use an empty Vue instance for this purpose.\n\nFor example, let's say we have a todo app structured like this:\n\n```\nTodos\n|-- NewTodoInput\n|-- Todo\n    |-- DeleteTodoButton\n```\n\nWe could manage communication between components with this single event hub:\n\n``` js\n// This is the event hub we'll use in every\n// component to communicate between them.\nvar eventHub = new Vue()\n```\n\nThen in our components, we can use `$emit`, `$on`, `$off` to emit events, listen for events, and clean up event listeners, respectively:\n\n``` js\n// NewTodoInput\n// ...\nmethods: {\n  addTodo: function () {\n    eventHub.$emit('add-todo', { text: this.newTodoText })\n    this.newTodoText = ''\n  }\n}\n```\n\n``` js\n// DeleteTodoButton\n// ...\nmethods: {\n  deleteTodo: function (id) {\n    eventHub.$emit('delete-todo', id)\n  }\n}\n```\n\n``` js\n// Todos\n// ...\ncreated: function () {\n  eventHub.$on('add-todo', this.addTodo)\n  eventHub.$on('delete-todo', this.deleteTodo)\n},\n// It's good to clean up event listeners before\n// a component is destroyed.\nbeforeDestroy: function () {\n  eventHub.$off('add-todo', this.addTodo)\n  eventHub.$off('delete-todo', this.deleteTodo)\n},\nmethods: {\n  addTodo: function (newTodo) {\n    this.todos.push(newTodo)\n  },\n  deleteTodo: function (todoId) {\n    this.todos = this.todos.filter(function (todo) {\n      return todo.id !== todoId\n    })\n  }\n}\n```\n\nThis pattern can serve as a replacement for `$dispatch` and `$broadcast` in simple scenarios, but for more complex cases, it's recommended to use a dedicated state management layer such as [Vuex](https://github.com/vuejs/vuex).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>$dispatch</code> and <code>$broadcast</code>.</p>\n</div>\n{% endraw %}\n\n## Filters\n\n### Filters Outside Text Interpolations <sup>removed</sup>\n\nFilters can now only be used inside text interpolations (`{% raw %}{{ }}{% endraw %}` tags). In the past we've found using filters within directives such as `v-model`, `v-on`, etc led to more complexity than convenience. For list filtering on `v-for`, it's also better to move that logic into JavaScript as computed properties, so that it can be reused throughout your component.\n\nIn general, whenever something can be achieved in plain JavaScript, we want to avoid introducing a special syntax like filters to take care of the same concern. Here's how you can replace Vue's built-in directive filters:\n\n#### Replacing the `debounce` Filter\n\nInstead of:\n\n``` html\n<input v-on:keyup=\"doStuff | debounce 500\">\n```\n\n``` js\nmethods: {\n  doStuff: function () {\n    // ...\n  }\n}\n```\n\nUse [lodash's `debounce`](https://lodash.com/docs/4.15.0#debounce) (or possibly [`throttle`](https://lodash.com/docs/4.15.0#throttle)) to directly limit calling the expensive method. You can achieve the same as above like this:\n\n``` html\n<input v-on:keyup=\"doStuff\">\n```\n\n``` js\nmethods: {\n  doStuff: _.debounce(function () {\n    // ...\n  }, 500)\n}\n```\n\nFor more on the advantages of this strategy, see [the example here with `v-model`](#v-model-with-debounce-removed).\n\n#### Replacing the `limitBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"item in items | limitBy 10\">{{ item }}</p>\n```\n\nUse JavaScript's built-in [`.slice` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Examples) in a computed property:\n\n``` html\n<p v-for=\"item in filteredItems\">{{ item }}</p>\n```\n\n``` js\ncomputed: {\n  filteredItems: function () {\n    return this.items.slice(0, 10)\n  }\n}\n```\n\n#### Replacing the `filterBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"user in users | filterBy searchQuery in 'name'\">{{ user.name }}</p>\n```\n\nUse JavaScript's built-in [`.filter` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Examples) in a computed property:\n\n``` html\n<p v-for=\"user in filteredUsers\">{{ user.name }}</p>\n```\n\n``` js\ncomputed: {\n  filteredUsers: function () {\n    var self = this\n    return self.users.filter(function (user) {\n      return user.name.indexOf(self.searchQuery) !== -1\n    })\n  }\n}\n```\n\nJavaScript's native `.filter` can also manage much more complex filtering operations, because you have access to the full power of JavaScript within computed properties. For example, if you wanted to find all active users and case-insensitively match against both their name and email:\n\n``` js\nvar self = this\nself.users.filter(function (user) {\n  var searchRegex = new RegExp(self.searchQuery, 'i')\n  return user.isActive && (\n    searchRegex.test(user.name) ||\n    searchRegex.test(user.email)\n  )\n})\n```\n\n#### Replacing the `orderBy` Filter\n\nInstead of:\n\n``` html\n<p v-for=\"user in users | orderBy 'name'\">{{ user.name }}</p>\n```\n\nUse [lodash's `orderBy`](https://lodash.com/docs/4.15.0#orderBy) (or possibly [`sortBy`](https://lodash.com/docs/4.15.0#sortBy)) in a computed property:\n\n``` html\n<p v-for=\"user in orderedUsers\">{{ user.name }}</p>\n```\n\n``` js\ncomputed: {\n  orderedUsers: function () {\n    return _.orderBy(this.users, 'name')\n  }\n}\n```\n\nYou can even order by multiple columns:\n\n``` js\n_.orderBy(this.users, ['name', 'last_login'], ['asc', 'desc'])\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters being used inside directives. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Filter Argument Syntax <sup>changed</sup>\n\nFilters' syntax for arguments now better aligns with JavaScript function invocation. So instead of taking space-delimited arguments:\n\n``` html\n<p>{{ date | formatDate 'YY-MM-DD' timeZone }}</p>\n```\n\nWe surround the arguments with parentheses and delimit the arguments with commas:\n\n``` html\n<p>{{ date | formatDate('YY-MM-DD', timeZone) }}</p>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the old filter syntax. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Built-In Text Filters <sup>removed</sup>\n\nAlthough filters within text interpolations are still allowed, all of the filters have been removed. Instead, it's recommended to use more specialized libraries for solving problems in each domain (e.g. [`date-fns`](https://date-fns.org/) to format dates and [`accounting`](http://openexchangerates.github.io/accounting.js/) for currencies).\n\nFor each of Vue's built-in text filters, we go through how you can replace them below. The example code could exist in custom helper functions, methods, or computed properties.\n\n#### Replacing the `json` Filter\n\nYou actually don't need to for debugging anymore, as Vue will nicely format output for you automatically, whether it's a string, number, array, or plain object. If you want the exact same functionality as JavaScript's `JSON.stringify` though, then you can use that in a method or computed property.\n\n#### Replacing the `capitalize` Filter\n\n``` js\ntext[0].toUpperCase() + text.slice(1)\n```\n\n#### Replacing the `uppercase` Filter\n\n``` js\ntext.toUpperCase()\n```\n\n#### Replacing the `lowercase` Filter\n\n``` js\ntext.toLowerCase()\n```\n\n#### Replacing the `pluralize` Filter\n\nThe [pluralize](https://www.npmjs.com/package/pluralize) package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like `0`, then you can also easily define your own pluralize functions. For example:\n\n``` js\nfunction pluralizeKnife (count) {\n  if (count === 0) {\n    return 'no knives'\n  } else if (count === 1) {\n    return '1 knife'\n  } else {\n    return count + 'knives'\n  }\n}\n```\n\n#### Replacing the `currency` Filter\n\nFor a very naive implementation, you could just do something like this:\n\n``` js\n'$' + price.toFixed(2)\n```\n\nIn many cases though, you'll still run into strange behavior (e.g. `0.035.toFixed(2)` rounds up to `0.04`, but `0.045` rounds down to `0.04`). To work around these issues, you can use the [`accounting`](http://openexchangerates.github.io/accounting.js/) library to more reliably format currencies.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete text filters. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### Two-Way Filters <sup>replaced</sup>\n\nSome users have enjoyed using two-way filters with `v-model` to create interesting inputs with very little code. While _seemingly_ simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.\n\nAs an example, we'll now walk the migration of a two-way currency filter:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/6744xnjk/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nIt mostly works well, but the delayed state updates can cause strange behavior. For example, click on the `Result` tab and try entering `9.999` into one of those inputs. When the input loses focus, its value will update to `$10.00`. When looking at the calculated total however, you'll see that `9.999` is what's stored in our data. The version of reality that the user sees is out of sync!\n\nTo start transitioning towards a more robust solution using Vue 2.0, let's first wrap this filter in a new `<currency-input>` component:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/943zfbsh/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThis allows us add behavior that a filter alone couldn't encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external [`currencyValidator` object](https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e):\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/9c32kev2/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThis increased modularity not only makes it easier to migrate to Vue 2, but also allows currency parsing and formatting to be:\n\n- unit tested in isolation from your Vue code\n- used by other parts of your application, such as to validate the payload to an API endpoint\n\nHaving this validator extracted out, we've also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it's actually impossible for users to enter anything wrong, similar to what the browser's native number input tries to do.\n\nWe're still limited however, by filters and by Vue 1.0 in general, so let's complete the upgrade to Vue 2.0:\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nYou may notice that:\n\n- Every aspect of our input is more explicit, using lifecycle hooks and DOM events in place of the hidden behavior of two-way filters.\n- We can now use `v-model` directly on our custom inputs, which is not only more consistent with normal inputs, but also means our component is Vuex-friendly.\n- Since we're no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters used in directives like <code>v-model</code>. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Slots\n\n### Duplicate Slots <sup>removed</sup>\n\nIt is no longer supported to have `<slot>`s with the same name in the same template. When a slot is rendered it is \"used up\" and cannot be rendered elsewhere in the same render tree. If you must render the same content in multiple places, pass that content as a prop.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about duplicate slots <code>v-model</code>.</p>\n</div>\n{% endraw %}\n\n### `slot` Attribute Styling <sup>removed</sup>\n\nContent inserted via named `<slot>` no longer preserves the `slot` attribute. Use a wrapper element to style them, or for advanced use cases, modify the inserted content programmatically using [render functions](render-function.html).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find CSS selectors targeting named slots (e.g. <code>[slot=\"my-slot-name\"]</code>).</p>\n</div>\n{% endraw %}\n\n## Special Attributes\n\n### `keep-alive` Attribute <sup>replaced</sup>\n\n`keep-alive` is no longer a special attribute, but rather a wrapper component, similar to `<transition>`. For example:\n\n``` html\n<keep-alive>\n  <component v-bind:is=\"view\"></component>\n</keep-alive>\n```\n\nThis makes it possible to use `<keep-alive>` on multiple conditional children:\n\n``` html\n<keep-alive>\n  <todo-list v-if=\"todos.length > 0\"></todo-list>\n  <no-todos-gif v-else></no-todos-gif>\n</keep-alive>\n```\n\n<p class=\"tip\">When `<keep-alive>` has multiple children, they should eventually evaluate to a single child. Any child other than the first one will simply be ignored.</p>\n\nWhen used together with `<transition>`, make sure to nest it inside:\n\n``` html\n<transition>\n  <keep-alive>\n    <component v-bind:is=\"view\"></component>\n  </keep-alive>\n</transition>\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find <code>keep-alive</code> attributes.</p>\n</div>\n{% endraw %}\n\n## Interpolation\n\n### Interpolation within Attributes <sup>removed</sup>\n\nInterpolation within attributes is no longer valid. For example:\n\n``` html\n<button class=\"btn btn-{{ size }}\"></button>\n```\n\nShould either be updated to use an inline expression:\n\n``` html\n<button v-bind:class=\"'btn btn-' + size\"></button>\n```\n\nOr a data/computed property:\n\n``` html\n<button v-bind:class=\"buttonClasses\"></button>\n```\n\n``` js\ncomputed: {\n  buttonClasses: function () {\n    return 'btn btn-' + size\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of interpolation used within attributes.</p>\n</div>\n{% endraw %}\n\n### HTML Interpolation <sup>removed</sup>\n\nHTML interpolations (`{% raw %}{{{ foo }}}{% endraw %}`) have been removed in favor of the [`v-html` directive](../api/#v-html).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find HTML interpolations.</p>\n</div>\n{% endraw %}\n\n### One-Time Bindings <sup>replaced</sup>\n\nOne time bindings (`{% raw %}{{* foo }}{% endraw %}`) have been replaced by the new [`v-once` directive](../api/#v-once).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find one-time bindings.</p>\n</div>\n{% endraw %}\n\n## Reactivity\n\n### `vm.$watch` <sup>changed</sup>\n\nWatchers created via `vm.$watch` are now fired before the associated component rerenders. This gives you the chance to further update state before the component rerender, thus avoiding unnecessary updates. For example, you can watch a component prop and update the component's own data when the prop changes.\n\nIf you were previously relying on `vm.$watch` to do something with the DOM after a component updates, you can instead do so in the `updated` lifecycle hook.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that a watcher was relying on the old behavior.</p>\n</div>\n{% endraw %}\n\n### `vm.$set` <sup>changed</sup>\n\n`vm.$set` is now just an alias for [`Vue.set`](../api/#Vue-set).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n{% endraw %}\n\n### `vm.$delete` <sup>changed</sup>\n\n`vm.$delete` is now just an alias for [`Vue.delete`](../api/#Vue-delete).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n{% endraw %}\n\n### `Array.prototype.$set` <sup>removed</sup>\n\nUse `Vue.set` instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$set</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n{% endraw %}\n\n### `Array.prototype.$remove` <sup>removed</sup>\n\nUse `Array.prototype.splice` instead. For example:\n\n``` js\nmethods: {\n  removeTodo: function (todo) {\n    var index = this.todos.indexOf(todo)\n    this.todos.splice(index, 1)\n  }\n}\n```\n\nOr better yet, just pass removal methods an index:\n\n``` js\nmethods: {\n  removeTodo: function (index) {\n    this.todos.splice(index, 1)\n  }\n}\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$remove</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n{% endraw %}\n\n### `Vue.set` and `Vue.delete` on Vue instances <sup>removed</sup>\n\n`Vue.set` and `Vue.delete` can no longer work on Vue instances. It is now mandatory to properly declare all top-level reactive properties in the data option. If you'd like to delete properties on a Vue instance or its `$data`, just set it to null.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.set</code> or <code>Vue.delete</code> on a Vue instance. If you miss any, they'll trigger <strong>console warnings</strong>.</p>\n</div>\n{% endraw %}\n\n### Replacing `vm.$data` <sup>removed</sup>\n\nIt is now prohibited to replace a component instance's root $data. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of overwriting <code>vm.$data</code>. If you miss any, <strong>console warnings</strong> will be emitted.</p>\n</div>\n{% endraw %}\n\n### `vm.$get` <sup>removed</sup>\n\nJust retrieve reactive data directly.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$get</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## DOM-Focused Instance Methods\n\n### `vm.$appendTo` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.appendChild(vm.$el)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$appendTo</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$before` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.parentNode.insertBefore(vm.$el, myElement)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$before</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$after` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nmyElement.parentNode.insertBefore(vm.$el, myElement.nextSibling)\n```\n\nOr if `myElement` is the last child:\n\n``` js\nmyElement.parentNode.appendChild(vm.$el)\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$after</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$remove` <sup>removed</sup>\n\nUse the native DOM API:\n\n``` js\nvm.$el.remove()\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$remove</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Meta Instance Methods\n\n### `vm.$eval` <sup>removed</sup>\n\nNo real use. If you do happen to rely on this feature somehow and aren't sure how to work around it, post on [the forum](http://forum.vuejs.org/) for ideas.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$eval</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$interpolate` <sup>removed</sup>\n\nNo real use. If you do happen to rely on this feature somehow and aren't sure how to work around it, post on [the forum](http://forum.vuejs.org/) for ideas.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$interpolate</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n### `vm.$log` <sup>removed</sup>\n\nUse the [Vue Devtools](https://github.com/vuejs/vue-devtools) for the optimal debugging experience.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$log</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n{% endraw %}\n\n## Instance DOM Options\n\n### `replace: false` <sup>removed</sup>\n\nComponents now always replace the element they're bound to. To simulate the behavior of `replace: false`, you can wrap your root component with an element similar to the one you're replacing. For example:\n\n``` js\nnew Vue({\n  el: '#app',\n  template: '<div id=\"app\"> ... </div>'\n})\n```\n\nOr with a render function:\n\n``` js\nnew Vue({\n  el: '#app',\n  render: function (h) {\n    h('div', {\n      attrs: {\n        id: 'app',\n      }\n    }, /* ... */)\n  }\n})\n```\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>replace: false</code>.</p>\n</div>\n{% endraw %}\n\n## Global Config\n\n### `Vue.config.debug` <sup>removed</sup>\n\nNo longer necessary, since warnings come with stack traces by default now.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.debug</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.async` <sup>removed</sup>\n\nAsync is now required for rendering performance.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.async</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.delimiters` <sup>replaced</sup>\n\nThis has been reworked as a [component-level option](../api/#delimiters). This allows you to use alternative delimiters within your app without breaking 3rd-party components.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.delimiters</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.config.unsafeDelimiters` <sup>removed</sup>\n\nHTML interpolation has been [removed in favor of `v-html`](#HTML-Interpolation-removed).\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.unsafeDelimiters</code>. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</p>\n</div>\n{% endraw %}\n\n## Global API\n\n### `Vue.extend` with `el` <sup>removed</sup>\n\nThe el option can no longer be used in `Vue.extend`. It's only valid as an instance creation option.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about the <code>el</code> option with <code>Vue.extend</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.elementDirective` <sup>removed</sup>\n\nUse components instead.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.elementDirective</code>.</p>\n</div>\n{% endraw %}\n\n### `Vue.partial` <sup>removed</sup>\n\nPartials have been removed in favor of more explicit data flow between components, using props. Unless you're using a partial in a performance-critical area, the recommendation is to simply use a [normal component](components.html) instead. If you were dynamically binding the `name` of a partial, you can use a [dynamic component](components.html#Dynamic-Components).\n\nIf you happen to be using partials in a performance-critical part of your app, then you should upgrade to [functional components](render-function.html#Functional-Components). They must be in a plain JS/JSX file (rather than in a `.vue` file) and are stateless and instanceless, just like partials. This makes rendering extremely fast.\n\nA benefit of functional components over partials is that they can be much more dynamic, because they grant you access to the full power of JavaScript. There is a cost to this power however. If you've never used a component framework with render functions before, they may take a bit longer to learn.\n\n{% raw %}\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.partial</code>.</p>\n</div>\n{% endraw %}\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/migration.html","comments":1,"layout":"page","_id":"civ8jcjot001891m1kvd0sliu","content":"<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><blockquote>\n<p>Woah - this is a super long page! Does that mean 2.0 is completely different, I’ll have to learn the basics all over again, and migrating will be practically impossible?</p>\n</blockquote>\n<p>I’m glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven’t changed. It’s long because we like to offer very detailed explanations and include a lot of examples. Rest assured, <strong>this is not something you have to read from top to bottom!</strong></p>\n<blockquote>\n<p>Where should I start in a migration?</p>\n</blockquote>\n<ol>\n<li><p>Start by running the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on a current project. We’ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they’ll let you know, offer suggestions, and provide links to more info.</p>\n</li>\n<li><p>After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn’t catch, check it out.</p>\n</li>\n<li><p>If you have any tests, run them and see what still fails. If you don’t have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.</p>\n</li>\n<li><p>By now, your app should be fully migrated. If you’re still hungry for more though, you can read the rest of this page - or just dive in to the new and improved guide from <a href=\"index.html\">the beginning</a>. Many parts will be skimmable, since you’re already familiar with the core concepts.</p>\n</li>\n</ol>\n<blockquote>\n<p>How long will it take to migrate a Vue 1.x app to 2.0?</p>\n</blockquote>\n<p>It depends on a few factors:</p>\n<ul>\n<li><p>The size of your app (small to medium-sized apps will probably be less than a day)</p>\n</li>\n<li><p>How many times you get distracted and start playing with a cool new feature. 😉 &nbsp;Not judging, it also happened to us while building 2.0!</p>\n</li>\n<li><p>Which obsolete features you’re using. Most can be upgraded with find-and-replace, but others might take a few minutes. If you’re not currently following best practices, Vue 2.0 will also try harder to force you to. This is a good thing in the long run, but could also mean a significant (though possibly overdue) refactor.</p>\n</li>\n</ul>\n<blockquote>\n<p>If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue-Router?</p>\n</blockquote>\n<p>Only Vue-Router 2 is compatible with Vue 2, so yes, you’ll have to follow the <a href=\"migration-vue-router.html\">migration path for Vue-Router</a> as well. Fortunately, most applications don’t have a lot of router code, so this likely won’t take more than an hour.</p>\n<p>As for Vuex, even version 0.8 is compatible with Vue 2, so you’re not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.</p>\n<h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><h3 id=\"Fragment-Instances-removed\"><a href=\"#Fragment-Instances-removed\" class=\"headerlink\" title=\"Fragment Instances removed\"></a>Fragment Instances <sup>removed</sup></h3><p>Every component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s recommended to simply wrap the entire contents in a new element, like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about multiple root elements in a template.</p>\n</div>\n\n<h2 id=\"Lifecycle-Hooks\"><a href=\"#Lifecycle-Hooks\" class=\"headerlink\" title=\"Lifecycle Hooks\"></a>Lifecycle Hooks</h2><h3 id=\"beforeCompile-removed\"><a href=\"#beforeCompile-removed\" class=\"headerlink\" title=\"beforeCompile removed\"></a><code>beforeCompile</code> <sup>removed</sup></h3><p>Use the <code>created</code> hook instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"compiled-replaced\"><a href=\"#compiled-replaced\" class=\"headerlink\" title=\"compiled replaced\"></a><code>compiled</code> <sup>replaced</sup></h3><p>Use the new <code>mounted</code> hook instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"attached-removed\"><a href=\"#attached-removed\" class=\"headerlink\" title=\"attached removed\"></a><code>attached</code> <sup>removed</sup></h3><p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">attached: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could use:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    doSomething()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"detached-removed\"><a href=\"#detached-removed\" class=\"headerlink\" title=\"detached removed\"></a><code>detached</code> <sup>removed</sup></h3><p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">detached: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could use:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    doSomething()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"init-renamed\"><a href=\"#init-renamed\" class=\"headerlink\" title=\"init renamed\"></a><code>init</code> <sup>renamed</sup></h3><p>Use the new <code>beforeCreate</code> hook instead, which is essentially the same thing. It was renamed for consistency with other lifecycle methods.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"ready-replaced\"><a href=\"#ready-replaced\" class=\"headerlink\" title=\"ready replaced\"></a><code>ready</code> <sup>replaced</sup></h3><p>Use the new <code>mounted</code> hook instead. It should be noted though that with <code>mounted</code>, there’s no guarantee to be in-document. For that, also include <code>Vue.nextTick</code>/<code>vm.$nextTick</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// code that assumes this.$el is in-document</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a><code>v-for</code></h2><h3 id=\"v-for-Argument-Order-for-Arrays-changed\"><a href=\"#v-for-Argument-Order-for-Arrays-changed\" class=\"headerlink\" title=\"v-for Argument Order for Arrays changed\"></a><code>v-for</code> Argument Order for Arrays <sup>changed</sup></h3><p>When including an <code>index</code>, the argument order for arrays used to be <code>(index, value)</code>. It is now <code>(value, index)</code> to be more consistent with JavaScript’s native array methods such as <code>forEach</code> and <code>map</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like <code>position</code> or <code>num</code>, the helper will not flag them.</p>\n</div>\n\n<h3 id=\"v-for-Argument-Order-for-Objects-changed\"><a href=\"#v-for-Argument-Order-for-Objects-changed\" class=\"headerlink\" title=\"v-for Argument Order for Objects changed\"></a><code>v-for</code> Argument Order for Objects <sup>changed</sup></h3><p>When including a <code>key</code>, the argument order for objects used to be <code>(key, value)</code>. It is now <code>(value, key)</code> to be more consistent with common object iterators such as lodash’s.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like <code>name</code> or <code>property</code>, the helper will not flag them.</p>\n</div>\n\n<h3 id=\"index-and-key-removed\"><a href=\"#index-and-key-removed\" class=\"headerlink\" title=\"$index and $key removed\"></a><code>$index</code> and <code>$key</code> <sup>removed</sup></h3><p>The implicitly assigned <code>$index</code> and <code>$key</code> variables have been removed in favor of explicitly defining them in <code>v-for</code>. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of these removed variables. If you miss any, you should also see <strong>console errors</strong> such as: <code>Uncaught ReferenceError: $index is not defined</code></p>\n</div>\n\n<h3 id=\"track-by-replaced\"><a href=\"#track-by-replaced\" class=\"headerlink\" title=\"track-by replaced\"></a><code>track-by</code> <sup>replaced</sup></h3><p><code>track-by</code> has been replaced with <code>key</code>, which works like any other attribute: without the <code>v-bind:</code> or <code>:</code> prefix, it is treated as a literal string. In most cases, you’d want to use a dynamic binding which expects a full expression instead of a key. For example, in place of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">track-by</span>=<span class=\"string\">\"id\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You would now write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>track-by</code>.</p>\n</div>\n\n<h3 id=\"v-for-Range-Values-changed\"><a href=\"#v-for-Range-Values-changed\" class=\"headerlink\" title=\"v-for Range Values changed\"></a><code>v-for</code> Range Values <sup>changed</sup></h3><p>Previously, <code>v-for=&quot;number in 10&quot;</code> would have <code>number</code> starting at 0 and ending at 9. Now it starts at 1 and ends at 10.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Search your codebase for the regex <code>/\\w+ in \\d+/</code>. Wherever it appears in a <code>v-for</code>, check to see if you may be affected.</p>\n</div>\n\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><h3 id=\"coerce-Prop-Option-removed\"><a href=\"#coerce-Prop-Option-removed\" class=\"headerlink\" title=\"coerce Prop Option removed\"></a><code>coerce</code> Prop Option <sup>removed</sup></h3><p>If you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">  <span class=\"attr\">username</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">coerce</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value</div><div class=\"line\">        .toLowerCase()</div><div class=\"line\">        .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">  <span class=\"attr\">username</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">normalizedUsername</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>There are a few advantages:</p>\n<ul>\n<li>You still have access to the original value of the prop.</li>\n<li>You are forced to be more explicit, by giving your coerced value a name that differentiates it from the value passed in the prop.</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>coerce</code> option.</p>\n</div>\n\n<h3 id=\"twoWay-Prop-Option-removed\"><a href=\"#twoWay-Prop-Option-removed\" class=\"headerlink\" title=\"twoWay Prop Option removed\"></a><code>twoWay</code> Prop Option <sup>removed</sup></h3><p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n<ul>\n<li><a href=\"components.html#Custom-Events\">Custom component events</a></li>\n<li><a href=\"components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a> (using component events)</li>\n<li><a href=\"state-management.html\">Global state management</a></li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>twoWay</code> option.</p>\n</div>\n\n<h3 id=\"once-and-sync-Modifiers-on-v-bind-removed\"><a href=\"#once-and-sync-Modifiers-on-v-bind-removed\" class=\"headerlink\" title=\".once and .sync Modifiers on v-bind removed\"></a><code>.once</code> and <code>.sync</code> Modifiers on <code>v-bind</code> <sup>removed</sup></h3><p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n<ul>\n<li><a href=\"components.html#Custom-Events\">Custom component events</a></li>\n<li><a href=\"components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a> (using component events)</li>\n<li><a href=\"state-management.html\">Global state management</a></li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>.once</code> and <code>.sync</code> modifiers.</p>\n</div>\n\n<h3 id=\"Prop-Mutation-deprecated\"><a href=\"#Prop-Mutation-deprecated\" class=\"headerlink\" title=\"Prop Mutation deprecated\"></a>Prop Mutation <sup>deprecated</sup></h3><p>Mutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting <code>this.myProp = &#39;someOtherValue&#39;</code> in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component’s local changes will be overwritten.</p>\n<p>Most use cases of mutating a prop can be replaced by one of these options:</p>\n<ul>\n<li>a data property, with the prop used to set its default value</li>\n<li>a computed property</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about prop mutations.</p>\n</div>\n\n<h3 id=\"Props-on-a-Root-Instance-replaced\"><a href=\"#Props-on-a-Root-Instance-replaced\" class=\"headerlink\" title=\"Props on a Root Instance replaced\"></a>Props on a Root Instance <sup>replaced</sup></h3><p>On root Vue instances (i.e. instances created with <code>new Vue({ ... })</code>), you must use <code>propsData</code> instead of <code>props</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that props passed to root instances are no longer working.</p>\n</div>\n\n<h2 id=\"Built-In-Directives\"><a href=\"#Built-In-Directives\" class=\"headerlink\" title=\"Built-In Directives\"></a>Built-In Directives</h2><h3 id=\"Truthiness-Falsiness-with-v-bind-changed\"><a href=\"#Truthiness-Falsiness-with-v-bind-changed\" class=\"headerlink\" title=\"Truthiness/Falsiness with v-bind changed\"></a>Truthiness/Falsiness with <code>v-bind</code> <sup>changed</sup></h3><p>When used with <code>v-bind</code>, the only falsy values are now: <code>null</code>, <code>undefined</code>, and <code>false</code>. This means <code>0</code> and empty strings will render as truthy. So for example, <code>v-bind:draggable=&quot;&#39;&#39;&quot;</code> will render as <code>draggable=&quot;true&quot;</code>.</p>\n<p>For enumerated attributes, in addition to the falsy values above, the string <code>&quot;false&quot;</code> will also render as <code>attr=&quot;false&quot;</code>.</p>\n<p class=\"tip\">Note that for other directives (e.g. <code>v-if</code> and <code>v-show</code>), JavaScript’s normal truthiness still applies.</p>\n\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"Listening-for-Native-Events-on-Components-with-v-on-changed\"><a href=\"#Listening-for-Native-Events-on-Components-with-v-on-changed\" class=\"headerlink\" title=\"Listening for Native Events on Components with v-on changed\"></a>Listening for Native Events on Components with <code>v-on</code> <sup>changed</sup></h3><p>When used on a component, <code>v-on</code> now only listens to custom events <code>$emit</code>ted by that component. To listen for a native DOM event on the root element, you can use the <code>.native</code> modifier. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"debounce-Param-Attribute-for-v-model-removed\"><a href=\"#debounce-Param-Attribute-for-v-model-removed\" class=\"headerlink\" title=\"debounce Param Attribute for v-model removed\"></a><code>debounce</code> Param Attribute for <code>v-model</code> <sup>removed</sup></h3><p>Debouncing is used to limit how often we execute Ajax requests and other expensive operations. Vue’s <code>debounce</code> attribute parameter for <code>v-model</code> made this easy for very simple cases, but it actually debounced <strong>state updates</strong> rather than the expensive operations themselves. It’s a subtle difference, but it comes with limitations as an application grows.</p>\n<p>These limitations become apparent when designing a search indicator, like this one for example:</p>\n\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\" class=\"demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n<script>\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n</script>\n\n<p>Using the <code>debounce</code> attribute, there’d be no way to detect the “Typing” state, because we lose access to the input’s real-time state. By decoupling the debounce function from Vue however, we’re able to debounce only the operation we want to limit, removing the limits on features we can develop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">By using the debounce function from lodash or another dedicated</div><div class=\"line\">utility library, we know the specific debounce implementation we</div><div class=\"line\">use will be best-in-class - and we can use it ANYWHERE. Not just</div><div class=\"line\">in our template.</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"debounce-search-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchQuery\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Type something\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; searchIndicator &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#debounce-search-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchQuery</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">searchQueryIsDirty</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">isCalculating</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchIndicator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isCalculating) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'⟳ Fetching new results'</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.searchQueryIsDirty) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'... Typing'</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'✓ Done'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchQuery</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.searchQueryIsDirty = <span class=\"literal\">true</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.expensiveOperation()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// This is where the debounce actually belongs.</span></div><div class=\"line\">    expensiveOperation: _.debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.isCalculating = <span class=\"literal\">true</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isCalculating = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.searchQueryIsDirty = <span class=\"literal\">false</span></div><div class=\"line\">      &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Another advantage of this approach is there will be times when debouncing isn’t quite the right wrapper function. For example, when hitting an API for search suggestions, waiting to offer suggestions until after the user has stopped typing for a period of time isn’t an ideal experience. What you probably want instead is a <strong>throttling</strong> function. Now since you’re already using a utility library like lodash, refactoring to use its <code>throttle</code> function instead takes only a few seconds.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>debounce</code> attribute.</p>\n</div>\n\n<h3 id=\"lazy-or-number-Param-Attributes-for-v-model-replaced\"><a href=\"#lazy-or-number-Param-Attributes-for-v-model-replaced\" class=\"headerlink\" title=\"lazy or number Param Attributes for v-model replaced\"></a><code>lazy</code> or <code>number</code> Param Attributes for <code>v-model</code> <sup>replaced</sup></h3><p>The <code>lazy</code> and <code>number</code> param attributes are now modifiers, to make it more clear what That means instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">lazy</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">number</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You would use:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the these param attributes.</p>\n</div>\n\n<h3 id=\"value-Attribute-with-v-model-removed\"><a href=\"#value-Attribute-with-v-model-removed\" class=\"headerlink\" title=\"value Attribute with v-model removed\"></a><code>value</code> Attribute with <code>v-model</code> <sup>removed</sup></h3><p><code>v-model</code> no longer cares about the initial value of an inline <code>value</code> attribute. For predictability, it will instead always treat the Vue instance data as the source of truth.</p>\n<p>That means this element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>backed by this data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>will render with a value of “bar” instead of “foo”. The same goes for a <code>&lt;textarea&gt;</code> with existing content. Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">  hello world</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You should ensure your initial value for <code>text</code> is “hello world”.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about inline value attributes with <code>v-model</code>.</p>\n</div>\n\n<h3 id=\"v-model-with-v-for-Iterated-Primitive-Values-removed\"><a href=\"#v-model-with-v-for-Iterated-Primitive-Values-removed\" class=\"headerlink\" title=\"v-model with v-for Iterated Primitive Values removed\"></a><code>v-model</code> with <code>v-for</code> Iterated Primitive Values <sup>removed</sup></h3><p>Cases like this no longer work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"str in strings\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"str\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The reason is this is the equivalent JavaScript that the <code>&lt;input&gt;</code> would compile to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">strings.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'input'</span>, ...)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>As you can see, <code>v-model</code>‘s two-way binding doesn’t make sense here. Setting <code>str</code> to another value in the iterator function will do nothing because it’s just a local variable in the function scope.</p>\n<p>Instead, you should use an array of <strong>objects</strong> so that <code>v-model</code> can update the field on the object. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"obj in objects\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"obj.str\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"v-bind-style-with-Object-Syntax-and-important-removed\"><a href=\"#v-bind-style-with-Object-Syntax-and-important-removed\" class=\"headerlink\" title=\"v-bind:style with Object Syntax and !important removed\"></a><code>v-bind:style</code> with Object Syntax and <code>!important</code> <sup>removed</sup></h3><p>This will no longer work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: myColor + ' !important' &#125;\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you really need to override another <code>!important</code>, you must use the string syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"'color: ' + myColor + ' !important'\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of style bindings with <code>!important</code> in objects.</p>\n</div>\n\n<h3 id=\"v-el-and-v-ref-replaced\"><a href=\"#v-el-and-v-ref-replaced\" class=\"headerlink\" title=\"v-el and v-ref replaced\"></a><code>v-el</code> and <code>v-ref</code> <sup>replaced</sup></h3><p>For simplicity, <code>v-el</code> and <code>v-ref</code> have been merged into the <code>ref</code> attribute, accessible on a component instance via <code>$refs</code>. That means <code>v-el:my-element</code> would become <code>ref=&quot;myElement&quot;</code> and <code>v-ref:my-component</code> would become <code>ref=&quot;myComponent&quot;</code>. When used on a normal element, the <code>ref</code> will be the DOM element, and when used on a component, the <code>ref</code> will be the component instance.</p>\n<p>Since <code>v-ref</code> is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with <code>v-for</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:ref</span>=<span class=\"string\">\"'item' + item.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Previously, <code>v-el</code>/<code>v-ref</code> combined with <code>v-for</code> would produce an array of elements/components, because there was no way to give each item a unique name. You can still achieve this behavior by given each item the same <code>ref</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Unlike in 1.x, these <code>$refs</code> are not reactive, because they’re registered/updated during the render process itself. Making them reactive would require duplicate renders for every change.</p>\n<p>On the other hand, <code>$refs</code> are designed primarily for programmatic access in JavaScript - it is not recommended to rely on them in templates, because that would mean referring to state that does not belong to the instance itself. This would violate Vue’s data-driven view model.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>v-el</code> and <code>v-ref</code>.</p>\n</div>\n\n<h3 id=\"v-else-with-v-show-removed\"><a href=\"#v-else-with-v-show-removed\" class=\"headerlink\" title=\"v-else with v-show removed\"></a><code>v-else</code> with <code>v-show</code> <sup>removed</sup></h3><p><code>v-else</code> no longer works with <code>v-show</code>. Use <code>v-if</code> with a negation expression instead. For example, instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"foo\"</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"bar\"</span>&gt;</span>Not foo, but bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can use:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"foo\"</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!foo &amp;&amp; bar\"</span>&gt;</span>Not foo, but bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>v-else</code> with <code>v-show</code>.</p>\n</div>\n\n<h2 id=\"Custom-Directives-simplified\"><a href=\"#Custom-Directives-simplified\" class=\"headerlink\" title=\"Custom Directives simplified\"></a>Custom Directives <sup>simplified</sup></h2><p>Directives have a greatly reduced scope of responsibility: they are now only used for applying low-level direct DOM manipulations. In most cases, you should prefer using components as the main code-reuse abstraction.</p>\n<p>Some of the most notable differences include:</p>\n<ul>\n<li>Directives no longer have instances. This means there’s no more <code>this</code> inside directive hooks. Instead, they receive everything they might need as arguments. If you really must persist state across hooks, you can do so on <code>el</code>.</li>\n<li>Options such as <code>acceptStatement</code>, <code>deep</code>, <code>priority</code>, etc have all been removed. To replace <code>twoWay</code> directives, see <a href=\"#Two-Way-Filters-replaced\">this example</a>.</li>\n<li>Some of the current hooks have different behavior and there are also a couple new hooks.</li>\n</ul>\n<p>Fortunately, since the new directives are much simpler, you can master them more easily. Read the new <a href=\"custom-directive.html\">Custom Directives guide</a> to learn more.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</p>\n</div>\n\n<h3 id=\"Directive-literal-Modifier-removed\"><a href=\"#Directive-literal-Modifier-removed\" class=\"headerlink\" title=\"Directive .literal Modifier removed\"></a>Directive <code>.literal</code> Modifier <sup>removed</sup></h3><p>The <code>.literal</code> modifier has been removed, as the same can be easily achieved by just providing a string literal as the value.</p>\n<p>For example, you can update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;p v-my-directive.literal=<span class=\"string\">\"foo bar baz\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>to just:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-my-directive</span>=<span class=\"string\">\"'foo bar baz'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the `.literal` modifier on a directive.</p>\n</div>\n\n<h2 id=\"Transitions\"><a href=\"#Transitions\" class=\"headerlink\" title=\"Transitions\"></a>Transitions</h2><h3 id=\"transition-Attribute-replaced\"><a href=\"#transition-Attribute-replaced\" class=\"headerlink\" title=\"transition Attribute replaced\"></a><code>transition</code> Attribute <sup>replaced</sup></h3><p>Vue’s transition system has changed quite drastically and now uses <code>&lt;transition&gt;</code> and <code>&lt;transition-group&gt;</code> wrapper elements, rather than the <code>transition</code> attribute. It’s recommended to read the new <a href=\"transitions.html\">Transitions guide</a> to learn more.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute.</p>\n</div>\n\n<h3 id=\"Vue-transition-for-Reusable-Transitions-replaced\"><a href=\"#Vue-transition-for-Reusable-Transitions-replaced\" class=\"headerlink\" title=\"Vue.transition for Reusable Transitions replaced\"></a><code>Vue.transition</code> for Reusable Transitions <sup>replaced</sup></h3><p>With the new transition system, you can now just <a href=\"transitions.html#Reusable-Transitions\">use components for reusable transitions</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.transition</code>.</p>\n</div>\n\n<h3 id=\"Transition-stagger-Attribute-removed\"><a href=\"#Transition-stagger-Attribute-removed\" class=\"headerlink\" title=\"Transition stagger Attribute removed\"></a>Transition <code>stagger</code> Attribute <sup>removed</sup></h3><p>If you need to stagger list transitions, you can control timing by setting and accessing a <code>data-index</code> (or similar attribute) on an element. See <a href=\"transitions.html#Staggering-List-Transitions\">an example here</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</p>\n</div>\n\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><h3 id=\"events-option-removed\"><a href=\"#events-option-removed\" class=\"headerlink\" title=\"events option removed\"></a><code>events</code> option <sup>removed</sup></h3><p>The <code>events</code> option has been removed. Event handlers should now be registered in the <code>created</code> hook instead. Check out the <a href=\"#dispatch-and-broadcast-replaced\"><code>$dispatch</code> and <code>$broadcast</code> migration guide</a> for a detailed example.</p>\n<h3 id=\"Vue-directive-39-on-39-keyCodes-replaced\"><a href=\"#Vue-directive-39-on-39-keyCodes-replaced\" class=\"headerlink\" title=\"Vue.directive(&#39;on&#39;).keyCodes replaced\"></a><code>Vue.directive(&#39;on&#39;).keyCodes</code> <sup>replaced</sup></h3><p>The new, more concise way to configure <code>keyCodes</code> is through <code>Vue.config.keyCodes</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// enable v-on:keyup.f1</span></div><div class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the the old <code>keyCode</code> configuration syntax.</p>\n</div>\n\n<h3 id=\"dispatch-and-broadcast-replaced\"><a href=\"#dispatch-and-broadcast-replaced\" class=\"headerlink\" title=\"$dispatch and $broadcast replaced\"></a><code>$dispatch</code> and <code>$broadcast</code> <sup>replaced</sup></h3><p><code>$dispatch</code> and <code>$broadcast</code> have been removed in favor of more explicitly cross-component communication and more maintainable state management solutions, such as <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>.</p>\n<p>The problem is event flows that depend on a component’s tree structure can be hard to reason about and very brittle when the tree becomes large. It simply doesn’t scale well and we don’t want to set you up for pain later. <code>$dispatch</code> and <code>$broadcast</code> also do not solve communication between sibling components.</p>\n<p>One of the most common uses for these methods is to communicate between a parent and its direct children. In these cases, you can actually <a href=\"components.html#Form-Input-Components-using-Custom-Events\">listen to an <code>$emit</code> from a child with <code>v-on</code></a>. This allows you to keep the convenience of events with added explicitness.</p>\n<p>However, when communicating between distant descendants/ancestors, <code>$emit</code> won’t help you. Instead, the simplest possible upgrade would be to use a centralized event hub. This has the added benefit of allowing you to communicate between components no matter where they are in the component tree - even between siblings! Because Vue instances implement an event emitter interface, you can actually use an empty Vue instance for this purpose.</p>\n<p>For example, let’s say we have a todo app structured like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Todos</div><div class=\"line\">|-- NewTodoInput</div><div class=\"line\">|-- Todo</div><div class=\"line\">    |-- DeleteTodoButton</div></pre></td></tr></table></figure>\n<p>We could manage communication between components with this single event hub:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the event hub we'll use in every</span></div><div class=\"line\"><span class=\"comment\">// component to communicate between them.</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventHub = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure>\n<p>Then in our components, we can use <code>$emit</code>, <code>$on</code>, <code>$off</code> to emit events, listen for events, and clean up event listeners, respectively:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NewTodoInput</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">addTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    eventHub.$emit(<span class=\"string\">'add-todo'</span>, &#123; <span class=\"attr\">text</span>: <span class=\"keyword\">this</span>.newTodoText &#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DeleteTodoButton</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">deleteTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    eventHub.$emit(<span class=\"string\">'delete-todo'</span>, id)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Todos</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  eventHub.$on(<span class=\"string\">'add-todo'</span>, <span class=\"keyword\">this</span>.addTodo)</div><div class=\"line\">  eventHub.$on(<span class=\"string\">'delete-todo'</span>, <span class=\"keyword\">this</span>.deleteTodo)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// It's good to clean up event listeners before</span></div><div class=\"line\"><span class=\"comment\">// a component is destroyed.</span></div><div class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  eventHub.$off(<span class=\"string\">'add-todo'</span>, <span class=\"keyword\">this</span>.addTodo)</div><div class=\"line\">  eventHub.$off(<span class=\"string\">'delete-todo'</span>, <span class=\"keyword\">this</span>.deleteTodo)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">addTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newTodo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.push(newTodo)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">deleteTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todoId</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos = <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> todo.id !== todoId</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This pattern can serve as a replacement for <code>$dispatch</code> and <code>$broadcast</code> in simple scenarios, but for more complex cases, it’s recommended to use a dedicated state management layer such as <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>$dispatch</code> and <code>$broadcast</code>.</p>\n</div>\n\n<h2 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h2><h3 id=\"Filters-Outside-Text-Interpolations-removed\"><a href=\"#Filters-Outside-Text-Interpolations-removed\" class=\"headerlink\" title=\"Filters Outside Text Interpolations removed\"></a>Filters Outside Text Interpolations <sup>removed</sup></h3><p>Filters can now only be used inside text interpolations (<code>{{ }}</code> tags). In the past we’ve found using filters within directives such as <code>v-model</code>, <code>v-on</code>, etc led to more complexity than convenience. For list filtering on <code>v-for</code>, it’s also better to move that logic into JavaScript as computed properties, so that it can be reused throughout your component.</p>\n<p>In general, whenever something can be achieved in plain JavaScript, we want to avoid introducing a special syntax like filters to take care of the same concern. Here’s how you can replace Vue’s built-in directive filters:</p>\n<h4 id=\"Replacing-the-debounce-Filter\"><a href=\"#Replacing-the-debounce-Filter\" class=\"headerlink\" title=\"Replacing the debounce Filter\"></a>Replacing the <code>debounce</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup</span>=<span class=\"string\">\"doStuff | debounce 500\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">doStuff</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Use <a href=\"https://lodash.com/docs/4.15.0#debounce\" target=\"_blank\" rel=\"external\">lodash’s <code>debounce</code></a> (or possibly <a href=\"https://lodash.com/docs/4.15.0#throttle\" target=\"_blank\" rel=\"external\"><code>throttle</code></a>) to directly limit calling the expensive method. You can achieve the same as above like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup</span>=<span class=\"string\">\"doStuff\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">doStuff</span>: _.debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For more on the advantages of this strategy, see <a href=\"#v-model-with-debounce-removed\">the example here with <code>v-model</code></a>.</p>\n<h4 id=\"Replacing-the-limitBy-Filter\"><a href=\"#Replacing-the-limitBy-Filter\" class=\"headerlink\" title=\"Replacing the limitBy Filter\"></a>Replacing the <code>limitBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use JavaScript’s built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Examples\" target=\"_blank\" rel=\"external\"><code>.slice</code> method</a> in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in filteredItems\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">filteredItems</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-filterBy-Filter\"><a href=\"#Replacing-the-filterBy-Filter\" class=\"headerlink\" title=\"Replacing the filterBy Filter\"></a>Replacing the <code>filterBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | filterBy searchQuery in 'name'\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use JavaScript’s built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Examples\" target=\"_blank\" rel=\"external\"><code>.filter</code> method</a> in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in filteredUsers\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">filteredUsers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> user.name.indexOf(self.searchQuery) !== <span class=\"number\">-1</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JavaScript’s native <code>.filter</code> can also manage much more complex filtering operations, because you have access to the full power of JavaScript within computed properties. For example, if you wanted to find all active users and case-insensitively match against both their name and email:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">self.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> searchRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(self.searchQuery, <span class=\"string\">'i'</span>)</div><div class=\"line\">  <span class=\"keyword\">return</span> user.isActive &amp;&amp; (</div><div class=\"line\">    searchRegex.test(user.name) ||</div><div class=\"line\">    searchRegex.test(user.email)</div><div class=\"line\">  )</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-orderBy-Filter\"><a href=\"#Replacing-the-orderBy-Filter\" class=\"headerlink\" title=\"Replacing the orderBy Filter\"></a>Replacing the <code>orderBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | orderBy 'name'\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use <a href=\"https://lodash.com/docs/4.15.0#orderBy\" target=\"_blank\" rel=\"external\">lodash’s <code>orderBy</code></a> (or possibly <a href=\"https://lodash.com/docs/4.15.0#sortBy\" target=\"_blank\" rel=\"external\"><code>sortBy</code></a>) in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in orderedUsers\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">orderedUsers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.orderBy(<span class=\"keyword\">this</span>.users, <span class=\"string\">'name'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can even order by multiple columns:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">_.orderBy(<span class=\"keyword\">this</span>.users, [<span class=\"string\">'name'</span>, <span class=\"string\">'last_login'</span>], [<span class=\"string\">'asc'</span>, <span class=\"string\">'desc'</span>])</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of filters being used inside directives. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Filter-Argument-Syntax-changed\"><a href=\"#Filter-Argument-Syntax-changed\" class=\"headerlink\" title=\"Filter Argument Syntax changed\"></a>Filter Argument Syntax <sup>changed</sup></h3><p>Filters’ syntax for arguments now better aligns with JavaScript function invocation. So instead of taking space-delimited arguments:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; date | formatDate 'YY-MM-DD' timeZone &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>We surround the arguments with parentheses and delimit the arguments with commas:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; date | formatDate('YY-MM-DD', timeZone) &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the old filter syntax. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Built-In-Text-Filters-removed\"><a href=\"#Built-In-Text-Filters-removed\" class=\"headerlink\" title=\"Built-In Text Filters removed\"></a>Built-In Text Filters <sup>removed</sup></h3><p>Although filters within text interpolations are still allowed, all of the filters have been removed. Instead, it’s recommended to use more specialized libraries for solving problems in each domain (e.g. <a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"external\"><code>date-fns</code></a> to format dates and <a href=\"http://openexchangerates.github.io/accounting.js/\" target=\"_blank\" rel=\"external\"><code>accounting</code></a> for currencies).</p>\n<p>For each of Vue’s built-in text filters, we go through how you can replace them below. The example code could exist in custom helper functions, methods, or computed properties.</p>\n<h4 id=\"Replacing-the-json-Filter\"><a href=\"#Replacing-the-json-Filter\" class=\"headerlink\" title=\"Replacing the json Filter\"></a>Replacing the <code>json</code> Filter</h4><p>You actually don’t need to for debugging anymore, as Vue will nicely format output for you automatically, whether it’s a string, number, array, or plain object. If you want the exact same functionality as JavaScript’s <code>JSON.stringify</code> though, then you can use that in a method or computed property.</p>\n<h4 id=\"Replacing-the-capitalize-Filter\"><a href=\"#Replacing-the-capitalize-Filter\" class=\"headerlink\" title=\"Replacing the capitalize Filter\"></a>Replacing the <code>capitalize</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text[<span class=\"number\">0</span>].toUpperCase() + text.slice(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-uppercase-Filter\"><a href=\"#Replacing-the-uppercase-Filter\" class=\"headerlink\" title=\"Replacing the uppercase Filter\"></a>Replacing the <code>uppercase</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text.toUpperCase()</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-lowercase-Filter\"><a href=\"#Replacing-the-lowercase-Filter\" class=\"headerlink\" title=\"Replacing the lowercase Filter\"></a>Replacing the <code>lowercase</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text.toLowerCase()</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-pluralize-Filter\"><a href=\"#Replacing-the-pluralize-Filter\" class=\"headerlink\" title=\"Replacing the pluralize Filter\"></a>Replacing the <code>pluralize</code> Filter</h4><p>The <a href=\"https://www.npmjs.com/package/pluralize\" target=\"_blank\" rel=\"external\">pluralize</a> package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like <code>0</code>, then you can also easily define your own pluralize functions. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluralizeKnife</span> (<span class=\"params\">count</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'no knives'</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'1 knife'</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> count + <span class=\"string\">'knives'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-currency-Filter\"><a href=\"#Replacing-the-currency-Filter\" class=\"headerlink\" title=\"Replacing the currency Filter\"></a>Replacing the <code>currency</code> Filter</h4><p>For a very naive implementation, you could just do something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'$'</span> + price.toFixed(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>In many cases though, you’ll still run into strange behavior (e.g. <code>0.035.toFixed(2)</code> rounds up to <code>0.04</code>, but <code>0.045</code> rounds down to <code>0.04</code>). To work around these issues, you can use the <a href=\"http://openexchangerates.github.io/accounting.js/\" target=\"_blank\" rel=\"external\"><code>accounting</code></a> library to more reliably format currencies.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete text filters. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Two-Way-Filters-replaced\"><a href=\"#Two-Way-Filters-replaced\" class=\"headerlink\" title=\"Two-Way Filters replaced\"></a>Two-Way Filters <sup>replaced</sup></h3><p>Some users have enjoyed using two-way filters with <code>v-model</code> to create interesting inputs with very little code. While <em>seemingly</em> simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</p>\n<p>As an example, we’ll now walk the migration of a two-way currency filter:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/6744xnjk/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>It mostly works well, but the delayed state updates can cause strange behavior. For example, click on the <code>Result</code> tab and try entering <code>9.999</code> into one of those inputs. When the input loses focus, its value will update to <code>$10.00</code>. When looking at the calculated total however, you’ll see that <code>9.999</code> is what’s stored in our data. The version of reality that the user sees is out of sync!</p>\n<p>To start transitioning towards a more robust solution using Vue 2.0, let’s first wrap this filter in a new <code>&lt;currency-input&gt;</code> component:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/943zfbsh/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>This allows us add behavior that a filter alone couldn’t encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external <a href=\"https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e\" target=\"_blank\" rel=\"external\"><code>currencyValidator</code> object</a>:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/9c32kev2/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>This increased modularity not only makes it easier to migrate to Vue 2, but also allows currency parsing and formatting to be:</p>\n<ul>\n<li>unit tested in isolation from your Vue code</li>\n<li>used by other parts of your application, such as to validate the payload to an API endpoint</li>\n</ul>\n<p>Having this validator extracted out, we’ve also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it’s actually impossible for users to enter anything wrong, similar to what the browser’s native number input tries to do.</p>\n<p>We’re still limited however, by filters and by Vue 1.0 in general, so let’s complete the upgrade to Vue 2.0:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>You may notice that:</p>\n<ul>\n<li>Every aspect of our input is more explicit, using lifecycle hooks and DOM events in place of the hidden behavior of two-way filters.</li>\n<li>We can now use <code>v-model</code> directly on our custom inputs, which is not only more consistent with normal inputs, but also means our component is Vuex-friendly.</li>\n<li>Since we’re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of filters used in directives like <code>v-model</code>. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Slots\"><a href=\"#Slots\" class=\"headerlink\" title=\"Slots\"></a>Slots</h2><h3 id=\"Duplicate-Slots-removed\"><a href=\"#Duplicate-Slots-removed\" class=\"headerlink\" title=\"Duplicate Slots removed\"></a>Duplicate Slots <sup>removed</sup></h3><p>It is no longer supported to have <code>&lt;slot&gt;</code>s with the same name in the same template. When a slot is rendered it is “used up” and cannot be rendered elsewhere in the same render tree. If you must render the same content in multiple places, pass that content as a prop.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about duplicate slots <code>v-model</code>.</p>\n</div>\n\n<h3 id=\"slot-Attribute-Styling-removed\"><a href=\"#slot-Attribute-Styling-removed\" class=\"headerlink\" title=\"slot Attribute Styling removed\"></a><code>slot</code> Attribute Styling <sup>removed</sup></h3><p>Content inserted via named <code>&lt;slot&gt;</code> no longer preserves the <code>slot</code> attribute. Use a wrapper element to style them, or for advanced use cases, modify the inserted content programmatically using <a href=\"render-function.html\">render functions</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find CSS selectors targeting named slots (e.g. <code>[slot=\"my-slot-name\"]</code>).</p>\n</div>\n\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"keep-alive-Attribute-replaced\"><a href=\"#keep-alive-Attribute-replaced\" class=\"headerlink\" title=\"keep-alive Attribute replaced\"></a><code>keep-alive</code> Attribute <sup>replaced</sup></h3><p><code>keep-alive</code> is no longer a special attribute, but rather a wrapper component, similar to <code>&lt;transition&gt;</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This makes it possible to use <code>&lt;keep-alive&gt;</code> on multiple conditional children:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">todo-list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"todos.length &gt; 0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">no-todos-gif</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">no-todos-gif</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When <code>&lt;keep-alive&gt;</code> has multiple children, they should eventually evaluate to a single child. Any child other than the first one will simply be ignored.</p>\n\n<p>When used together with <code>&lt;transition&gt;</code>, make sure to nest it inside:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find <code>keep-alive</code> attributes.</p>\n</div>\n\n<h2 id=\"Interpolation\"><a href=\"#Interpolation\" class=\"headerlink\" title=\"Interpolation\"></a>Interpolation</h2><h3 id=\"Interpolation-within-Attributes-removed\"><a href=\"#Interpolation-within-Attributes-removed\" class=\"headerlink\" title=\"Interpolation within Attributes removed\"></a>Interpolation within Attributes <sup>removed</sup></h3><p>Interpolation within attributes is no longer valid. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-&#123;&#123; size &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Should either be updated to use an inline expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"'btn btn-' + size\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Or a data/computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"buttonClasses\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">buttonClasses</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'btn btn-'</span> + size</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of interpolation used within attributes.</p>\n</div>\n\n<h3 id=\"HTML-Interpolation-removed\"><a href=\"#HTML-Interpolation-removed\" class=\"headerlink\" title=\"HTML Interpolation removed\"></a>HTML Interpolation <sup>removed</sup></h3><p>HTML interpolations (<code>{{{ foo }}}</code>) have been removed in favor of the <a href=\"../api/#v-html\"><code>v-html</code> directive</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find HTML interpolations.</p>\n</div>\n\n<h3 id=\"One-Time-Bindings-replaced\"><a href=\"#One-Time-Bindings-replaced\" class=\"headerlink\" title=\"One-Time Bindings replaced\"></a>One-Time Bindings <sup>replaced</sup></h3><p>One time bindings (<code>{{* foo }}</code>) have been replaced by the new <a href=\"../api/#v-once\"><code>v-once</code> directive</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find one-time bindings.</p>\n</div>\n\n<h2 id=\"Reactivity\"><a href=\"#Reactivity\" class=\"headerlink\" title=\"Reactivity\"></a>Reactivity</h2><h3 id=\"vm-watch-changed\"><a href=\"#vm-watch-changed\" class=\"headerlink\" title=\"vm.$watch changed\"></a><code>vm.$watch</code> <sup>changed</sup></h3><p>Watchers created via <code>vm.$watch</code> are now fired before the associated component rerenders. This gives you the chance to further update state before the component rerender, thus avoiding unnecessary updates. For example, you can watch a component prop and update the component’s own data when the prop changes.</p>\n<p>If you were previously relying on <code>vm.$watch</code> to do something with the DOM after a component updates, you can instead do so in the <code>updated</code> lifecycle hook.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that a watcher was relying on the old behavior.</p>\n</div>\n\n<h3 id=\"vm-set-changed\"><a href=\"#vm-set-changed\" class=\"headerlink\" title=\"vm.$set changed\"></a><code>vm.$set</code> <sup>changed</sup></h3><p><code>vm.$set</code> is now just an alias for <a href=\"../api/#Vue-set\"><code>Vue.set</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n\n<h3 id=\"vm-delete-changed\"><a href=\"#vm-delete-changed\" class=\"headerlink\" title=\"vm.$delete changed\"></a><code>vm.$delete</code> <sup>changed</sup></h3><p><code>vm.$delete</code> is now just an alias for <a href=\"../api/#Vue-delete\"><code>Vue.delete</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n\n<h3 id=\"Array-prototype-set-removed\"><a href=\"#Array-prototype-set-removed\" class=\"headerlink\" title=\"Array.prototype.$set removed\"></a><code>Array.prototype.$set</code> <sup>removed</sup></h3><p>Use <code>Vue.set</code> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>.$set</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n\n<h3 id=\"Array-prototype-remove-removed\"><a href=\"#Array-prototype-remove-removed\" class=\"headerlink\" title=\"Array.prototype.$remove removed\"></a><code>Array.prototype.$remove</code> <sup>removed</sup></h3><p>Use <code>Array.prototype.splice</code> instead. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">removeTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.todos.indexOf(todo)</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Or better yet, just pass removal methods an index:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">removeTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>.$remove</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n\n<h3 id=\"Vue-set-and-Vue-delete-on-Vue-instances-removed\"><a href=\"#Vue-set-and-Vue-delete-on-Vue-instances-removed\" class=\"headerlink\" title=\"Vue.set and Vue.delete on Vue instances removed\"></a><code>Vue.set</code> and <code>Vue.delete</code> on Vue instances <sup>removed</sup></h3><p><code>Vue.set</code> and <code>Vue.delete</code> can no longer work on Vue instances. It is now mandatory to properly declare all top-level reactive properties in the data option. If you’d like to delete properties on a Vue instance or its <code>$data</code>, just set it to null.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.set</code> or <code>Vue.delete</code> on a Vue instance. If you miss any, they'll trigger <strong>console warnings</strong>.</p>\n</div>\n\n<h3 id=\"Replacing-vm-data-removed\"><a href=\"#Replacing-vm-data-removed\" class=\"headerlink\" title=\"Replacing vm.$data removed\"></a>Replacing <code>vm.$data</code> <sup>removed</sup></h3><p>It is now prohibited to replace a component instance’s root $data. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of overwriting <code>vm.$data</code>. If you miss any, <strong>console warnings</strong> will be emitted.</p>\n</div>\n\n<h3 id=\"vm-get-removed\"><a href=\"#vm-get-removed\" class=\"headerlink\" title=\"vm.$get removed\"></a><code>vm.$get</code> <sup>removed</sup></h3><p>Just retrieve reactive data directly.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$get</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"DOM-Focused-Instance-Methods\"><a href=\"#DOM-Focused-Instance-Methods\" class=\"headerlink\" title=\"DOM-Focused Instance Methods\"></a>DOM-Focused Instance Methods</h2><h3 id=\"vm-appendTo-removed\"><a href=\"#vm-appendTo-removed\" class=\"headerlink\" title=\"vm.$appendTo removed\"></a><code>vm.$appendTo</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.appendChild(vm.$el)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$appendTo</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-before-removed\"><a href=\"#vm-before-removed\" class=\"headerlink\" title=\"vm.$before removed\"></a><code>vm.$before</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.insertBefore(vm.$el, myElement)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$before</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-after-removed\"><a href=\"#vm-after-removed\" class=\"headerlink\" title=\"vm.$after removed\"></a><code>vm.$after</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.insertBefore(vm.$el, myElement.nextSibling)</div></pre></td></tr></table></figure>\n<p>Or if <code>myElement</code> is the last child:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.appendChild(vm.$el)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$after</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-remove-removed\"><a href=\"#vm-remove-removed\" class=\"headerlink\" title=\"vm.$remove removed\"></a><code>vm.$remove</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$el.remove()</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$remove</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Meta-Instance-Methods\"><a href=\"#Meta-Instance-Methods\" class=\"headerlink\" title=\"Meta Instance Methods\"></a>Meta Instance Methods</h2><h3 id=\"vm-eval-removed\"><a href=\"#vm-eval-removed\" class=\"headerlink\" title=\"vm.$eval removed\"></a><code>vm.$eval</code> <sup>removed</sup></h3><p>No real use. If you do happen to rely on this feature somehow and aren’t sure how to work around it, post on <a href=\"http://forum.vuejs.org/\" target=\"_blank\" rel=\"external\">the forum</a> for ideas.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$eval</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-interpolate-removed\"><a href=\"#vm-interpolate-removed\" class=\"headerlink\" title=\"vm.$interpolate removed\"></a><code>vm.$interpolate</code> <sup>removed</sup></h3><p>No real use. If you do happen to rely on this feature somehow and aren’t sure how to work around it, post on <a href=\"http://forum.vuejs.org/\" target=\"_blank\" rel=\"external\">the forum</a> for ideas.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$interpolate</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-log-removed\"><a href=\"#vm-log-removed\" class=\"headerlink\" title=\"vm.$log removed\"></a><code>vm.$log</code> <sup>removed</sup></h3><p>Use the <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">Vue Devtools</a> for the optimal debugging experience.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>vm.$log</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Instance-DOM-Options\"><a href=\"#Instance-DOM-Options\" class=\"headerlink\" title=\"Instance DOM Options\"></a>Instance DOM Options</h2><h3 id=\"replace-false-removed\"><a href=\"#replace-false-removed\" class=\"headerlink\" title=\"replace: false removed\"></a><code>replace: false</code> <sup>removed</sup></h3><p>Components now always replace the element they’re bound to. To simulate the behavior of <code>replace: false</code>, you can wrap your root component with an element similar to the one you’re replacing. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div id=\"app\"&gt; ... &lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or with a render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</div><div class=\"line\">    h(<span class=\"string\">'div'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;, <span class=\"comment\">/* ... */</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>replace: false</code>.</p>\n</div>\n\n<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><h3 id=\"Vue-config-debug-removed\"><a href=\"#Vue-config-debug-removed\" class=\"headerlink\" title=\"Vue.config.debug removed\"></a><code>Vue.config.debug</code> <sup>removed</sup></h3><p>No longer necessary, since warnings come with stack traces by default now.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.config.debug</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-async-removed\"><a href=\"#Vue-config-async-removed\" class=\"headerlink\" title=\"Vue.config.async removed\"></a><code>Vue.config.async</code> <sup>removed</sup></h3><p>Async is now required for rendering performance.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.config.async</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-delimiters-replaced\"><a href=\"#Vue-config-delimiters-replaced\" class=\"headerlink\" title=\"Vue.config.delimiters replaced\"></a><code>Vue.config.delimiters</code> <sup>replaced</sup></h3><p>This has been reworked as a <a href=\"../api/#delimiters\">component-level option</a>. This allows you to use alternative delimiters within your app without breaking 3rd-party components.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.config.delimiters</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-unsafeDelimiters-removed\"><a href=\"#Vue-config-unsafeDelimiters-removed\" class=\"headerlink\" title=\"Vue.config.unsafeDelimiters removed\"></a><code>Vue.config.unsafeDelimiters</code> <sup>removed</sup></h3><p>HTML interpolation has been <a href=\"#HTML-Interpolation-removed\">removed in favor of <code>v-html</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.config.unsafeDelimiters</code>. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</p>\n</div>\n\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend-with-el-removed\"><a href=\"#Vue-extend-with-el-removed\" class=\"headerlink\" title=\"Vue.extend with el removed\"></a><code>Vue.extend</code> with <code>el</code> <sup>removed</sup></h3><p>The el option can no longer be used in <code>Vue.extend</code>. It’s only valid as an instance creation option.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about the <code>el</code> option with <code>Vue.extend</code>.</p>\n</div>\n\n<h3 id=\"Vue-elementDirective-removed\"><a href=\"#Vue-elementDirective-removed\" class=\"headerlink\" title=\"Vue.elementDirective removed\"></a><code>Vue.elementDirective</code> <sup>removed</sup></h3><p>Use components instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.elementDirective</code>.</p>\n</div>\n\n<h3 id=\"Vue-partial-removed\"><a href=\"#Vue-partial-removed\" class=\"headerlink\" title=\"Vue.partial removed\"></a><code>Vue.partial</code> <sup>removed</sup></h3><p>Partials have been removed in favor of more explicit data flow between components, using props. Unless you’re using a partial in a performance-critical area, the recommendation is to simply use a <a href=\"components.html\">normal component</a> instead. If you were dynamically binding the <code>name</code> of a partial, you can use a <a href=\"components.html#Dynamic-Components\">dynamic component</a>.</p>\n<p>If you happen to be using partials in a performance-critical part of your app, then you should upgrade to <a href=\"render-function.html#Functional-Components\">functional components</a>. They must be in a plain JS/JSX file (rather than in a <code>.vue</code> file) and are stateless and instanceless, just like partials. This makes rendering extremely fast.</p>\n<p>A benefit of functional components over partials is that they can be much more dynamic, because they grant you access to the full power of JavaScript. There is a cost to this power however. If you’ve never used a component framework with render functions before, they may take a bit longer to learn.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">migration helper</a> on your codebase to find examples of <code>Vue.partial</code>.</p>\n</div>\n\n","excerpt":"","more":"<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><blockquote>\n<p>Woah - this is a super long page! Does that mean 2.0 is completely different, I’ll have to learn the basics all over again, and migrating will be practically impossible?</p>\n</blockquote>\n<p>I’m glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven’t changed. It’s long because we like to offer very detailed explanations and include a lot of examples. Rest assured, <strong>this is not something you have to read from top to bottom!</strong></p>\n<blockquote>\n<p>Where should I start in a migration?</p>\n</blockquote>\n<ol>\n<li><p>Start by running the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on a current project. We’ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they’ll let you know, offer suggestions, and provide links to more info.</p>\n</li>\n<li><p>After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn’t catch, check it out.</p>\n</li>\n<li><p>If you have any tests, run them and see what still fails. If you don’t have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.</p>\n</li>\n<li><p>By now, your app should be fully migrated. If you’re still hungry for more though, you can read the rest of this page - or just dive in to the new and improved guide from <a href=\"index.html\">the beginning</a>. Many parts will be skimmable, since you’re already familiar with the core concepts.</p>\n</li>\n</ol>\n<blockquote>\n<p>How long will it take to migrate a Vue 1.x app to 2.0?</p>\n</blockquote>\n<p>It depends on a few factors:</p>\n<ul>\n<li><p>The size of your app (small to medium-sized apps will probably be less than a day)</p>\n</li>\n<li><p>How many times you get distracted and start playing with a cool new feature. 😉 &nbsp;Not judging, it also happened to us while building 2.0!</p>\n</li>\n<li><p>Which obsolete features you’re using. Most can be upgraded with find-and-replace, but others might take a few minutes. If you’re not currently following best practices, Vue 2.0 will also try harder to force you to. This is a good thing in the long run, but could also mean a significant (though possibly overdue) refactor.</p>\n</li>\n</ul>\n<blockquote>\n<p>If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue-Router?</p>\n</blockquote>\n<p>Only Vue-Router 2 is compatible with Vue 2, so yes, you’ll have to follow the <a href=\"migration-vue-router.html\">migration path for Vue-Router</a> as well. Fortunately, most applications don’t have a lot of router code, so this likely won’t take more than an hour.</p>\n<p>As for Vuex, even version 0.8 is compatible with Vue 2, so you’re not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.</p>\n<h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><h3 id=\"Fragment-Instances-removed\"><a href=\"#Fragment-Instances-removed\" class=\"headerlink\" title=\"Fragment Instances removed\"></a>Fragment Instances <sup>removed</sup></h3><p>Every component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s recommended to simply wrap the entire contents in a new element, like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about multiple root elements in a template.</p>\n</div>\n\n<h2 id=\"Lifecycle-Hooks\"><a href=\"#Lifecycle-Hooks\" class=\"headerlink\" title=\"Lifecycle Hooks\"></a>Lifecycle Hooks</h2><h3 id=\"beforeCompile-removed\"><a href=\"#beforeCompile-removed\" class=\"headerlink\" title=\"beforeCompile removed\"></a><code>beforeCompile</code> <sup>removed</sup></h3><p>Use the <code>created</code> hook instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"compiled-replaced\"><a href=\"#compiled-replaced\" class=\"headerlink\" title=\"compiled replaced\"></a><code>compiled</code> <sup>replaced</sup></h3><p>Use the new <code>mounted</code> hook instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"attached-removed\"><a href=\"#attached-removed\" class=\"headerlink\" title=\"attached removed\"></a><code>attached</code> <sup>removed</sup></h3><p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">attached: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could use:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    doSomething()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"detached-removed\"><a href=\"#detached-removed\" class=\"headerlink\" title=\"detached removed\"></a><code>detached</code> <sup>removed</sup></h3><p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">detached: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  doSomething()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could use:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">destroyed: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    doSomething()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"init-renamed\"><a href=\"#init-renamed\" class=\"headerlink\" title=\"init renamed\"></a><code>init</code> <sup>renamed</sup></h3><p>Use the new <code>beforeCreate</code> hook instead, which is essentially the same thing. It was renamed for consistency with other lifecycle methods.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h3 id=\"ready-replaced\"><a href=\"#ready-replaced\" class=\"headerlink\" title=\"ready replaced\"></a><code>ready</code> <sup>replaced</sup></h3><p>Use the new <code>mounted</code> hook instead. It should be noted though that with <code>mounted</code>, there’s no guarantee to be in-document. For that, also include <code>Vue.nextTick</code>/<code>vm.$nextTick</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// code that assumes this.$el is in-document</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find all examples of this hook.</p>\n</div>\n\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a><code>v-for</code></h2><h3 id=\"v-for-Argument-Order-for-Arrays-changed\"><a href=\"#v-for-Argument-Order-for-Arrays-changed\" class=\"headerlink\" title=\"v-for Argument Order for Arrays changed\"></a><code>v-for</code> Argument Order for Arrays <sup>changed</sup></h3><p>When including an <code>index</code>, the argument order for arrays used to be <code>(index, value)</code>. It is now <code>(value, index)</code> to be more consistent with JavaScript’s native array methods such as <code>forEach</code> and <code>map</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like <code>position</code> or <code>num</code>, the helper will not flag them.</p>\n</div>\n\n<h3 id=\"v-for-Argument-Order-for-Objects-changed\"><a href=\"#v-for-Argument-Order-for-Objects-changed\" class=\"headerlink\" title=\"v-for Argument Order for Objects changed\"></a><code>v-for</code> Argument Order for Objects <sup>changed</sup></h3><p>When including a <code>key</code>, the argument order for objects used to be <code>(key, value)</code>. It is now <code>(value, key)</code> to be more consistent with common object iterators such as lodash’s.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like <code>name</code> or <code>property</code>, the helper will not flag them.</p>\n</div>\n\n<h3 id=\"index-and-key-removed\"><a href=\"#index-and-key-removed\" class=\"headerlink\" title=\"$index and $key removed\"></a><code>$index</code> and <code>$key</code> <sup>removed</sup></h3><p>The implicitly assigned <code>$index</code> and <code>$key</code> variables have been removed in favor of explicitly defining them in <code>v-for</code>. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of these removed variables. If you miss any, you should also see <strong>console errors</strong> such as: <code>Uncaught ReferenceError: $index is not defined</code></p>\n</div>\n\n<h3 id=\"track-by-replaced\"><a href=\"#track-by-replaced\" class=\"headerlink\" title=\"track-by replaced\"></a><code>track-by</code> <sup>replaced</sup></h3><p><code>track-by</code> has been replaced with <code>key</code>, which works like any other attribute: without the <code>v-bind:</code> or <code>:</code> prefix, it is treated as a literal string. In most cases, you’d want to use a dynamic binding which expects a full expression instead of a key. For example, in place of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">track-by</span>=<span class=\"string\">\"id\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You would now write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>track-by</code>.</p>\n</div>\n\n<h3 id=\"v-for-Range-Values-changed\"><a href=\"#v-for-Range-Values-changed\" class=\"headerlink\" title=\"v-for Range Values changed\"></a><code>v-for</code> Range Values <sup>changed</sup></h3><p>Previously, <code>v-for=&quot;number in 10&quot;</code> would have <code>number</code> starting at 0 and ending at 9. Now it starts at 1 and ends at 10.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Search your codebase for the regex <code>/\\w+ in \\d+/</code>. Wherever it appears in a <code>v-for</code>, check to see if you may be affected.</p>\n</div>\n\n<h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><h3 id=\"coerce-Prop-Option-removed\"><a href=\"#coerce-Prop-Option-removed\" class=\"headerlink\" title=\"coerce Prop Option removed\"></a><code>coerce</code> Prop Option <sup>removed</sup></h3><p>If you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">  <span class=\"attr\">username</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">coerce</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value</div><div class=\"line\">        .toLowerCase()</div><div class=\"line\">        .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You could write:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">  <span class=\"attr\">username</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">normalizedUsername</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>There are a few advantages:</p>\n<ul>\n<li>You still have access to the original value of the prop.</li>\n<li>You are forced to be more explicit, by giving your coerced value a name that differentiates it from the value passed in the prop.</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>coerce</code> option.</p>\n</div>\n\n<h3 id=\"twoWay-Prop-Option-removed\"><a href=\"#twoWay-Prop-Option-removed\" class=\"headerlink\" title=\"twoWay Prop Option removed\"></a><code>twoWay</code> Prop Option <sup>removed</sup></h3><p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n<ul>\n<li><a href=\"components.html#Custom-Events\">Custom component events</a></li>\n<li><a href=\"components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a> (using component events)</li>\n<li><a href=\"state-management.html\">Global state management</a></li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>twoWay</code> option.</p>\n</div>\n\n<h3 id=\"once-and-sync-Modifiers-on-v-bind-removed\"><a href=\"#once-and-sync-Modifiers-on-v-bind-removed\" class=\"headerlink\" title=\".once and .sync Modifiers on v-bind removed\"></a><code>.once</code> and <code>.sync</code> Modifiers on <code>v-bind</code> <sup>removed</sup></h3><p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n<ul>\n<li><a href=\"components.html#Custom-Events\">Custom component events</a></li>\n<li><a href=\"components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a> (using component events)</li>\n<li><a href=\"state-management.html\">Global state management</a></li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>.once</code> and <code>.sync</code> modifiers.</p>\n</div>\n\n<h3 id=\"Prop-Mutation-deprecated\"><a href=\"#Prop-Mutation-deprecated\" class=\"headerlink\" title=\"Prop Mutation deprecated\"></a>Prop Mutation <sup>deprecated</sup></h3><p>Mutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting <code>this.myProp = &#39;someOtherValue&#39;</code> in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component’s local changes will be overwritten.</p>\n<p>Most use cases of mutating a prop can be replaced by one of these options:</p>\n<ul>\n<li>a data property, with the prop used to set its default value</li>\n<li>a computed property</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about prop mutations.</p>\n</div>\n\n<h3 id=\"Props-on-a-Root-Instance-replaced\"><a href=\"#Props-on-a-Root-Instance-replaced\" class=\"headerlink\" title=\"Props on a Root Instance replaced\"></a>Props on a Root Instance <sup>replaced</sup></h3><p>On root Vue instances (i.e. instances created with <code>new Vue({ ... })</code>), you must use <code>propsData</code> instead of <code>props</code>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that props passed to root instances are no longer working.</p>\n</div>\n\n<h2 id=\"Built-In-Directives\"><a href=\"#Built-In-Directives\" class=\"headerlink\" title=\"Built-In Directives\"></a>Built-In Directives</h2><h3 id=\"Truthiness-Falsiness-with-v-bind-changed\"><a href=\"#Truthiness-Falsiness-with-v-bind-changed\" class=\"headerlink\" title=\"Truthiness/Falsiness with v-bind changed\"></a>Truthiness/Falsiness with <code>v-bind</code> <sup>changed</sup></h3><p>When used with <code>v-bind</code>, the only falsy values are now: <code>null</code>, <code>undefined</code>, and <code>false</code>. This means <code>0</code> and empty strings will render as truthy. So for example, <code>v-bind:draggable=&quot;&#39;&#39;&quot;</code> will render as <code>draggable=&quot;true&quot;</code>.</p>\n<p>For enumerated attributes, in addition to the falsy values above, the string <code>&quot;false&quot;</code> will also render as <code>attr=&quot;false&quot;</code>.</p>\n<p class=\"tip\">Note that for other directives (e.g. <code>v-if</code> and <code>v-show</code>), JavaScript’s normal truthiness still applies.</p>\n\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"Listening-for-Native-Events-on-Components-with-v-on-changed\"><a href=\"#Listening-for-Native-Events-on-Components-with-v-on-changed\" class=\"headerlink\" title=\"Listening for Native Events on Components with v-on changed\"></a>Listening for Native Events on Components with <code>v-on</code> <sup>changed</sup></h3><p>When used on a component, <code>v-on</code> now only listens to custom events <code>$emit</code>ted by that component. To listen for a native DOM event on the root element, you can use the <code>.native</code> modifier. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"debounce-Param-Attribute-for-v-model-removed\"><a href=\"#debounce-Param-Attribute-for-v-model-removed\" class=\"headerlink\" title=\"debounce Param Attribute for v-model removed\"></a><code>debounce</code> Param Attribute for <code>v-model</code> <sup>removed</sup></h3><p>Debouncing is used to limit how often we execute Ajax requests and other expensive operations. Vue’s <code>debounce</code> attribute parameter for <code>v-model</code> made this easy for very simple cases, but it actually debounced <strong>state updates</strong> rather than the expensive operations themselves. It’s a subtle difference, but it comes with limitations as an application grows.</p>\n<p>These limitations become apparent when designing a search indicator, like this one for example:</p>\n\n<script src=\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"></script>\n<div id=\"debounce-search-demo\" class=\"demo\">\n  <input v-model=\"searchQuery\" placeholder=\"Type something\">\n  <strong>{{ searchIndicator }}</strong>\n</div>\n<script>\nnew Vue({\n  el: '#debounce-search-demo',\n  data: {\n    searchQuery: '',\n    searchQueryIsDirty: false,\n    isCalculating: false\n  },\n  computed: {\n    searchIndicator: function () {\n      if (this.isCalculating) {\n        return '⟳ Fetching new results'\n      } else if (this.searchQueryIsDirty) {\n        return '... Typing'\n      } else {\n        return '✓ Done'\n      }\n    }\n  },\n  watch: {\n    searchQuery: function () {\n      this.searchQueryIsDirty = true\n      this.expensiveOperation()\n    }\n  },\n  methods: {\n    expensiveOperation: _.debounce(function () {\n      this.isCalculating = true\n      setTimeout(function () {\n        this.isCalculating = false\n        this.searchQueryIsDirty = false\n      }.bind(this), 1000)\n    }, 500)\n  }\n})\n</script>\n\n<p>Using the <code>debounce</code> attribute, there’d be no way to detect the “Typing” state, because we lose access to the input’s real-time state. By decoupling the debounce function from Vue however, we’re able to debounce only the operation we want to limit, removing the limits on features we can develop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</div><div class=\"line\">By using the debounce function from lodash or another dedicated</div><div class=\"line\">utility library, we know the specific debounce implementation we</div><div class=\"line\">use will be best-in-class - and we can use it ANYWHERE. Not just</div><div class=\"line\">in our template.</div><div class=\"line\">--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/lodash/4.13.1/lodash.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"debounce-search-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchQuery\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Type something\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; searchIndicator &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#debounce-search-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchQuery</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">searchQueryIsDirty</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">isCalculating</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchIndicator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isCalculating) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'⟳ Fetching new results'</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.searchQueryIsDirty) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'... Typing'</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'✓ Done'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">searchQuery</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.searchQueryIsDirty = <span class=\"literal\">true</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.expensiveOperation()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// This is where the debounce actually belongs.</span></div><div class=\"line\">    expensiveOperation: _.debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.isCalculating = <span class=\"literal\">true</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isCalculating = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.searchQueryIsDirty = <span class=\"literal\">false</span></div><div class=\"line\">      &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Another advantage of this approach is there will be times when debouncing isn’t quite the right wrapper function. For example, when hitting an API for search suggestions, waiting to offer suggestions until after the user has stopped typing for a period of time isn’t an ideal experience. What you probably want instead is a <strong>throttling</strong> function. Now since you’re already using a utility library like lodash, refactoring to use its <code>throttle</code> function instead takes only a few seconds.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>debounce</code> attribute.</p>\n</div>\n\n<h3 id=\"lazy-or-number-Param-Attributes-for-v-model-replaced\"><a href=\"#lazy-or-number-Param-Attributes-for-v-model-replaced\" class=\"headerlink\" title=\"lazy or number Param Attributes for v-model replaced\"></a><code>lazy</code> or <code>number</code> Param Attributes for <code>v-model</code> <sup>replaced</sup></h3><p>The <code>lazy</code> and <code>number</code> param attributes are now modifiers, to make it more clear what That means instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">lazy</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">number</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You would use:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the these param attributes.</p>\n</div>\n\n<h3 id=\"value-Attribute-with-v-model-removed\"><a href=\"#value-Attribute-with-v-model-removed\" class=\"headerlink\" title=\"value Attribute with v-model removed\"></a><code>value</code> Attribute with <code>v-model</code> <sup>removed</sup></h3><p><code>v-model</code> no longer cares about the initial value of an inline <code>value</code> attribute. For predictability, it will instead always treat the Vue instance data as the source of truth.</p>\n<p>That means this element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>backed by this data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>will render with a value of “bar” instead of “foo”. The same goes for a <code>&lt;textarea&gt;</code> with existing content. Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">  hello world</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You should ensure your initial value for <code>text</code> is “hello world”.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about inline value attributes with <code>v-model</code>.</p>\n</div>\n\n<h3 id=\"v-model-with-v-for-Iterated-Primitive-Values-removed\"><a href=\"#v-model-with-v-for-Iterated-Primitive-Values-removed\" class=\"headerlink\" title=\"v-model with v-for Iterated Primitive Values removed\"></a><code>v-model</code> with <code>v-for</code> Iterated Primitive Values <sup>removed</sup></h3><p>Cases like this no longer work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"str in strings\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"str\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The reason is this is the equivalent JavaScript that the <code>&lt;input&gt;</code> would compile to:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">strings.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'input'</span>, ...)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>As you can see, <code>v-model</code>‘s two-way binding doesn’t make sense here. Setting <code>str</code> to another value in the iterator function will do nothing because it’s just a local variable in the function scope.</p>\n<p>Instead, you should use an array of <strong>objects</strong> so that <code>v-model</code> can update the field on the object. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"obj in objects\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"obj.str\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your test suite, if you have one. The <strong>failed tests</strong> should alert to you to any parts of your app that may be affected by this change.</p>\n</div>\n\n<h3 id=\"v-bind-style-with-Object-Syntax-and-important-removed\"><a href=\"#v-bind-style-with-Object-Syntax-and-important-removed\" class=\"headerlink\" title=\"v-bind:style with Object Syntax and !important removed\"></a><code>v-bind:style</code> with Object Syntax and <code>!important</code> <sup>removed</sup></h3><p>This will no longer work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: myColor + ' !important' &#125;\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>If you really need to override another <code>!important</code>, you must use the string syntax:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"'color: ' + myColor + ' !important'\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of style bindings with <code>!important</code> in objects.</p>\n</div>\n\n<h3 id=\"v-el-and-v-ref-replaced\"><a href=\"#v-el-and-v-ref-replaced\" class=\"headerlink\" title=\"v-el and v-ref replaced\"></a><code>v-el</code> and <code>v-ref</code> <sup>replaced</sup></h3><p>For simplicity, <code>v-el</code> and <code>v-ref</code> have been merged into the <code>ref</code> attribute, accessible on a component instance via <code>$refs</code>. That means <code>v-el:my-element</code> would become <code>ref=&quot;myElement&quot;</code> and <code>v-ref:my-component</code> would become <code>ref=&quot;myComponent&quot;</code>. When used on a normal element, the <code>ref</code> will be the DOM element, and when used on a component, the <code>ref</code> will be the component instance.</p>\n<p>Since <code>v-ref</code> is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with <code>v-for</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:ref</span>=<span class=\"string\">\"'item' + item.id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Previously, <code>v-el</code>/<code>v-ref</code> combined with <code>v-for</code> would produce an array of elements/components, because there was no way to give each item a unique name. You can still achieve this behavior by given each item the same <code>ref</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Unlike in 1.x, these <code>$refs</code> are not reactive, because they’re registered/updated during the render process itself. Making them reactive would require duplicate renders for every change.</p>\n<p>On the other hand, <code>$refs</code> are designed primarily for programmatic access in JavaScript - it is not recommended to rely on them in templates, because that would mean referring to state that does not belong to the instance itself. This would violate Vue’s data-driven view model.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>v-el</code> and <code>v-ref</code>.</p>\n</div>\n\n<h3 id=\"v-else-with-v-show-removed\"><a href=\"#v-else-with-v-show-removed\" class=\"headerlink\" title=\"v-else with v-show removed\"></a><code>v-else</code> with <code>v-show</code> <sup>removed</sup></h3><p><code>v-else</code> no longer works with <code>v-show</code>. Use <code>v-if</code> with a negation expression instead. For example, instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"foo\"</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"bar\"</span>&gt;</span>Not foo, but bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can use:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"foo\"</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!foo &amp;&amp; bar\"</span>&gt;</span>Not foo, but bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>v-else</code> with <code>v-show</code>.</p>\n</div>\n\n<h2 id=\"Custom-Directives-simplified\"><a href=\"#Custom-Directives-simplified\" class=\"headerlink\" title=\"Custom Directives simplified\"></a>Custom Directives <sup>simplified</sup></h2><p>Directives have a greatly reduced scope of responsibility: they are now only used for applying low-level direct DOM manipulations. In most cases, you should prefer using components as the main code-reuse abstraction.</p>\n<p>Some of the most notable differences include:</p>\n<ul>\n<li>Directives no longer have instances. This means there’s no more <code>this</code> inside directive hooks. Instead, they receive everything they might need as arguments. If you really must persist state across hooks, you can do so on <code>el</code>.</li>\n<li>Options such as <code>acceptStatement</code>, <code>deep</code>, <code>priority</code>, etc have all been removed. To replace <code>twoWay</code> directives, see <a href=\"#Two-Way-Filters-replaced\">this example</a>.</li>\n<li>Some of the current hooks have different behavior and there are also a couple new hooks.</li>\n</ul>\n<p>Fortunately, since the new directives are much simpler, you can master them more easily. Read the new <a href=\"custom-directive.html\">Custom Directives guide</a> to learn more.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</p>\n</div>\n\n<h3 id=\"Directive-literal-Modifier-removed\"><a href=\"#Directive-literal-Modifier-removed\" class=\"headerlink\" title=\"Directive .literal Modifier removed\"></a>Directive <code>.literal</code> Modifier <sup>removed</sup></h3><p>The <code>.literal</code> modifier has been removed, as the same can be easily achieved by just providing a string literal as the value.</p>\n<p>For example, you can update:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;p v-my-directive.literal=<span class=\"string\">\"foo bar baz\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>to just:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-my-directive</span>=<span class=\"string\">\"'foo bar baz'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the `.literal` modifier on a directive.</p>\n</div>\n\n<h2 id=\"Transitions\"><a href=\"#Transitions\" class=\"headerlink\" title=\"Transitions\"></a>Transitions</h2><h3 id=\"transition-Attribute-replaced\"><a href=\"#transition-Attribute-replaced\" class=\"headerlink\" title=\"transition Attribute replaced\"></a><code>transition</code> Attribute <sup>replaced</sup></h3><p>Vue’s transition system has changed quite drastically and now uses <code>&lt;transition&gt;</code> and <code>&lt;transition-group&gt;</code> wrapper elements, rather than the <code>transition</code> attribute. It’s recommended to read the new <a href=\"transitions.html\">Transitions guide</a> to learn more.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute.</p>\n</div>\n\n<h3 id=\"Vue-transition-for-Reusable-Transitions-replaced\"><a href=\"#Vue-transition-for-Reusable-Transitions-replaced\" class=\"headerlink\" title=\"Vue.transition for Reusable Transitions replaced\"></a><code>Vue.transition</code> for Reusable Transitions <sup>replaced</sup></h3><p>With the new transition system, you can now just <a href=\"transitions.html#Reusable-Transitions\">use components for reusable transitions</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.transition</code>.</p>\n</div>\n\n<h3 id=\"Transition-stagger-Attribute-removed\"><a href=\"#Transition-stagger-Attribute-removed\" class=\"headerlink\" title=\"Transition stagger Attribute removed\"></a>Transition <code>stagger</code> Attribute <sup>removed</sup></h3><p>If you need to stagger list transitions, you can control timing by setting and accessing a <code>data-index</code> (or similar attribute) on an element. See <a href=\"transitions.html#Staggering-List-Transitions\">an example here</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the <code>transition</code> attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</p>\n</div>\n\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><h3 id=\"events-option-removed\"><a href=\"#events-option-removed\" class=\"headerlink\" title=\"events option removed\"></a><code>events</code> option <sup>removed</sup></h3><p>The <code>events</code> option has been removed. Event handlers should now be registered in the <code>created</code> hook instead. Check out the <a href=\"#dispatch-and-broadcast-replaced\"><code>$dispatch</code> and <code>$broadcast</code> migration guide</a> for a detailed example.</p>\n<h3 id=\"Vue-directive-39-on-39-keyCodes-replaced\"><a href=\"#Vue-directive-39-on-39-keyCodes-replaced\" class=\"headerlink\" title=\"Vue.directive(&#39;on&#39;).keyCodes replaced\"></a><code>Vue.directive(&#39;on&#39;).keyCodes</code> <sup>replaced</sup></h3><p>The new, more concise way to configure <code>keyCodes</code> is through <code>Vue.config.keyCodes</code>. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// enable v-on:keyup.f1</span></div><div class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the the old <code>keyCode</code> configuration syntax.</p>\n</div>\n\n<h3 id=\"dispatch-and-broadcast-replaced\"><a href=\"#dispatch-and-broadcast-replaced\" class=\"headerlink\" title=\"$dispatch and $broadcast replaced\"></a><code>$dispatch</code> and <code>$broadcast</code> <sup>replaced</sup></h3><p><code>$dispatch</code> and <code>$broadcast</code> have been removed in favor of more explicitly cross-component communication and more maintainable state management solutions, such as <a href=\"https://github.com/vuejs/vuex\">Vuex</a>.</p>\n<p>The problem is event flows that depend on a component’s tree structure can be hard to reason about and very brittle when the tree becomes large. It simply doesn’t scale well and we don’t want to set you up for pain later. <code>$dispatch</code> and <code>$broadcast</code> also do not solve communication between sibling components.</p>\n<p>One of the most common uses for these methods is to communicate between a parent and its direct children. In these cases, you can actually <a href=\"components.html#Form-Input-Components-using-Custom-Events\">listen to an <code>$emit</code> from a child with <code>v-on</code></a>. This allows you to keep the convenience of events with added explicitness.</p>\n<p>However, when communicating between distant descendants/ancestors, <code>$emit</code> won’t help you. Instead, the simplest possible upgrade would be to use a centralized event hub. This has the added benefit of allowing you to communicate between components no matter where they are in the component tree - even between siblings! Because Vue instances implement an event emitter interface, you can actually use an empty Vue instance for this purpose.</p>\n<p>For example, let’s say we have a todo app structured like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Todos</div><div class=\"line\">|-- NewTodoInput</div><div class=\"line\">|-- Todo</div><div class=\"line\">    |-- DeleteTodoButton</div></pre></td></tr></table></figure>\n<p>We could manage communication between components with this single event hub:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This is the event hub we'll use in every</span></div><div class=\"line\"><span class=\"comment\">// component to communicate between them.</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventHub = <span class=\"keyword\">new</span> Vue()</div></pre></td></tr></table></figure>\n<p>Then in our components, we can use <code>$emit</code>, <code>$on</code>, <code>$off</code> to emit events, listen for events, and clean up event listeners, respectively:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NewTodoInput</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">addTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    eventHub.$emit(<span class=\"string\">'add-todo'</span>, &#123; <span class=\"attr\">text</span>: <span class=\"keyword\">this</span>.newTodoText &#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.newTodoText = <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DeleteTodoButton</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">deleteTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    eventHub.$emit(<span class=\"string\">'delete-todo'</span>, id)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Todos</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  eventHub.$on(<span class=\"string\">'add-todo'</span>, <span class=\"keyword\">this</span>.addTodo)</div><div class=\"line\">  eventHub.$on(<span class=\"string\">'delete-todo'</span>, <span class=\"keyword\">this</span>.deleteTodo)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// It's good to clean up event listeners before</span></div><div class=\"line\"><span class=\"comment\">// a component is destroyed.</span></div><div class=\"line\">beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  eventHub.$off(<span class=\"string\">'add-todo'</span>, <span class=\"keyword\">this</span>.addTodo)</div><div class=\"line\">  eventHub.$off(<span class=\"string\">'delete-todo'</span>, <span class=\"keyword\">this</span>.deleteTodo)</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">  <span class=\"attr\">addTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newTodo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.push(newTodo)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">deleteTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todoId</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos = <span class=\"keyword\">this</span>.todos.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> todo.id !== todoId</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This pattern can serve as a replacement for <code>$dispatch</code> and <code>$broadcast</code> in simple scenarios, but for more complex cases, it’s recommended to use a dedicated state management layer such as <a href=\"https://github.com/vuejs/vuex\">Vuex</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>$dispatch</code> and <code>$broadcast</code>.</p>\n</div>\n\n<h2 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h2><h3 id=\"Filters-Outside-Text-Interpolations-removed\"><a href=\"#Filters-Outside-Text-Interpolations-removed\" class=\"headerlink\" title=\"Filters Outside Text Interpolations removed\"></a>Filters Outside Text Interpolations <sup>removed</sup></h3><p>Filters can now only be used inside text interpolations (<code>{{ }}</code> tags). In the past we’ve found using filters within directives such as <code>v-model</code>, <code>v-on</code>, etc led to more complexity than convenience. For list filtering on <code>v-for</code>, it’s also better to move that logic into JavaScript as computed properties, so that it can be reused throughout your component.</p>\n<p>In general, whenever something can be achieved in plain JavaScript, we want to avoid introducing a special syntax like filters to take care of the same concern. Here’s how you can replace Vue’s built-in directive filters:</p>\n<h4 id=\"Replacing-the-debounce-Filter\"><a href=\"#Replacing-the-debounce-Filter\" class=\"headerlink\" title=\"Replacing the debounce Filter\"></a>Replacing the <code>debounce</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup</span>=<span class=\"string\">\"doStuff | debounce 500\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">doStuff</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Use <a href=\"https://lodash.com/docs/4.15.0#debounce\">lodash’s <code>debounce</code></a> (or possibly <a href=\"https://lodash.com/docs/4.15.0#throttle\"><code>throttle</code></a>) to directly limit calling the expensive method. You can achieve the same as above like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup</span>=<span class=\"string\">\"doStuff\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">doStuff</span>: _.debounce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For more on the advantages of this strategy, see <a href=\"#v-model-with-debounce-removed\">the example here with <code>v-model</code></a>.</p>\n<h4 id=\"Replacing-the-limitBy-Filter\"><a href=\"#Replacing-the-limitBy-Filter\" class=\"headerlink\" title=\"Replacing the limitBy Filter\"></a>Replacing the <code>limitBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use JavaScript’s built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Examples\"><code>.slice</code> method</a> in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in filteredItems\"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">filteredItems</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items.slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-filterBy-Filter\"><a href=\"#Replacing-the-filterBy-Filter\" class=\"headerlink\" title=\"Replacing the filterBy Filter\"></a>Replacing the <code>filterBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | filterBy searchQuery in 'name'\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use JavaScript’s built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Examples\"><code>.filter</code> method</a> in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in filteredUsers\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">filteredUsers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> user.name.indexOf(self.searchQuery) !== <span class=\"number\">-1</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JavaScript’s native <code>.filter</code> can also manage much more complex filtering operations, because you have access to the full power of JavaScript within computed properties. For example, if you wanted to find all active users and case-insensitively match against both their name and email:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">self.users.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> searchRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(self.searchQuery, <span class=\"string\">'i'</span>)</div><div class=\"line\">  <span class=\"keyword\">return</span> user.isActive &amp;&amp; (</div><div class=\"line\">    searchRegex.test(user.name) ||</div><div class=\"line\">    searchRegex.test(user.email)</div><div class=\"line\">  )</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-orderBy-Filter\"><a href=\"#Replacing-the-orderBy-Filter\" class=\"headerlink\" title=\"Replacing the orderBy Filter\"></a>Replacing the <code>orderBy</code> Filter</h4><p>Instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | orderBy 'name'\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Use <a href=\"https://lodash.com/docs/4.15.0#orderBy\">lodash’s <code>orderBy</code></a> (or possibly <a href=\"https://lodash.com/docs/4.15.0#sortBy\"><code>sortBy</code></a>) in a computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in orderedUsers\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">orderedUsers</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.orderBy(<span class=\"keyword\">this</span>.users, <span class=\"string\">'name'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can even order by multiple columns:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">_.orderBy(<span class=\"keyword\">this</span>.users, [<span class=\"string\">'name'</span>, <span class=\"string\">'last_login'</span>], [<span class=\"string\">'asc'</span>, <span class=\"string\">'desc'</span>])</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters being used inside directives. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Filter-Argument-Syntax-changed\"><a href=\"#Filter-Argument-Syntax-changed\" class=\"headerlink\" title=\"Filter Argument Syntax changed\"></a>Filter Argument Syntax <sup>changed</sup></h3><p>Filters’ syntax for arguments now better aligns with JavaScript function invocation. So instead of taking space-delimited arguments:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; date | formatDate 'YY-MM-DD' timeZone &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>We surround the arguments with parentheses and delimit the arguments with commas:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; date | formatDate('YY-MM-DD', timeZone) &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the old filter syntax. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Built-In-Text-Filters-removed\"><a href=\"#Built-In-Text-Filters-removed\" class=\"headerlink\" title=\"Built-In Text Filters removed\"></a>Built-In Text Filters <sup>removed</sup></h3><p>Although filters within text interpolations are still allowed, all of the filters have been removed. Instead, it’s recommended to use more specialized libraries for solving problems in each domain (e.g. <a href=\"https://date-fns.org/\"><code>date-fns</code></a> to format dates and <a href=\"http://openexchangerates.github.io/accounting.js/\"><code>accounting</code></a> for currencies).</p>\n<p>For each of Vue’s built-in text filters, we go through how you can replace them below. The example code could exist in custom helper functions, methods, or computed properties.</p>\n<h4 id=\"Replacing-the-json-Filter\"><a href=\"#Replacing-the-json-Filter\" class=\"headerlink\" title=\"Replacing the json Filter\"></a>Replacing the <code>json</code> Filter</h4><p>You actually don’t need to for debugging anymore, as Vue will nicely format output for you automatically, whether it’s a string, number, array, or plain object. If you want the exact same functionality as JavaScript’s <code>JSON.stringify</code> though, then you can use that in a method or computed property.</p>\n<h4 id=\"Replacing-the-capitalize-Filter\"><a href=\"#Replacing-the-capitalize-Filter\" class=\"headerlink\" title=\"Replacing the capitalize Filter\"></a>Replacing the <code>capitalize</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text[<span class=\"number\">0</span>].toUpperCase() + text.slice(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-uppercase-Filter\"><a href=\"#Replacing-the-uppercase-Filter\" class=\"headerlink\" title=\"Replacing the uppercase Filter\"></a>Replacing the <code>uppercase</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text.toUpperCase()</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-lowercase-Filter\"><a href=\"#Replacing-the-lowercase-Filter\" class=\"headerlink\" title=\"Replacing the lowercase Filter\"></a>Replacing the <code>lowercase</code> Filter</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">text.toLowerCase()</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-pluralize-Filter\"><a href=\"#Replacing-the-pluralize-Filter\" class=\"headerlink\" title=\"Replacing the pluralize Filter\"></a>Replacing the <code>pluralize</code> Filter</h4><p>The <a href=\"https://www.npmjs.com/package/pluralize\">pluralize</a> package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like <code>0</code>, then you can also easily define your own pluralize functions. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluralizeKnife</span> (<span class=\"params\">count</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'no knives'</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'1 knife'</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> count + <span class=\"string\">'knives'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Replacing-the-currency-Filter\"><a href=\"#Replacing-the-currency-Filter\" class=\"headerlink\" title=\"Replacing the currency Filter\"></a>Replacing the <code>currency</code> Filter</h4><p>For a very naive implementation, you could just do something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'$'</span> + price.toFixed(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>In many cases though, you’ll still run into strange behavior (e.g. <code>0.035.toFixed(2)</code> rounds up to <code>0.04</code>, but <code>0.045</code> rounds down to <code>0.04</code>). To work around these issues, you can use the <a href=\"http://openexchangerates.github.io/accounting.js/\"><code>accounting</code></a> library to more reliably format currencies.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete text filters. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"Two-Way-Filters-replaced\"><a href=\"#Two-Way-Filters-replaced\" class=\"headerlink\" title=\"Two-Way Filters replaced\"></a>Two-Way Filters <sup>replaced</sup></h3><p>Some users have enjoyed using two-way filters with <code>v-model</code> to create interesting inputs with very little code. While <em>seemingly</em> simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</p>\n<p>As an example, we’ll now walk the migration of a two-way currency filter:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/6744xnjk/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>It mostly works well, but the delayed state updates can cause strange behavior. For example, click on the <code>Result</code> tab and try entering <code>9.999</code> into one of those inputs. When the input loses focus, its value will update to <code>$10.00</code>. When looking at the calculated total however, you’ll see that <code>9.999</code> is what’s stored in our data. The version of reality that the user sees is out of sync!</p>\n<p>To start transitioning towards a more robust solution using Vue 2.0, let’s first wrap this filter in a new <code>&lt;currency-input&gt;</code> component:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/943zfbsh/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>This allows us add behavior that a filter alone couldn’t encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external <a href=\"https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e\"><code>currencyValidator</code> object</a>:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/9c32kev2/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>This increased modularity not only makes it easier to migrate to Vue 2, but also allows currency parsing and formatting to be:</p>\n<ul>\n<li>unit tested in isolation from your Vue code</li>\n<li>used by other parts of your application, such as to validate the payload to an API endpoint</li>\n</ul>\n<p>Having this validator extracted out, we’ve also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it’s actually impossible for users to enter anything wrong, similar to what the browser’s native number input tries to do.</p>\n<p>We’re still limited however, by filters and by Vue 1.0 in general, so let’s complete the upgrade to Vue 2.0:</p>\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/chrisvfritz/1oqjojjx/embedded/js,html,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>You may notice that:</p>\n<ul>\n<li>Every aspect of our input is more explicit, using lifecycle hooks and DOM events in place of the hidden behavior of two-way filters.</li>\n<li>We can now use <code>v-model</code> directly on our custom inputs, which is not only more consistent with normal inputs, but also means our component is Vuex-friendly.</li>\n<li>Since we’re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</li>\n</ul>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of filters used in directives like <code>v-model</code>. If you miss any, you should also see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Slots\"><a href=\"#Slots\" class=\"headerlink\" title=\"Slots\"></a>Slots</h2><h3 id=\"Duplicate-Slots-removed\"><a href=\"#Duplicate-Slots-removed\" class=\"headerlink\" title=\"Duplicate Slots removed\"></a>Duplicate Slots <sup>removed</sup></h3><p>It is no longer supported to have <code>&lt;slot&gt;</code>s with the same name in the same template. When a slot is rendered it is “used up” and cannot be rendered elsewhere in the same render tree. If you must render the same content in multiple places, pass that content as a prop.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about duplicate slots <code>v-model</code>.</p>\n</div>\n\n<h3 id=\"slot-Attribute-Styling-removed\"><a href=\"#slot-Attribute-Styling-removed\" class=\"headerlink\" title=\"slot Attribute Styling removed\"></a><code>slot</code> Attribute Styling <sup>removed</sup></h3><p>Content inserted via named <code>&lt;slot&gt;</code> no longer preserves the <code>slot</code> attribute. Use a wrapper element to style them, or for advanced use cases, modify the inserted content programmatically using <a href=\"render-function.html\">render functions</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find CSS selectors targeting named slots (e.g. <code>[slot=\"my-slot-name\"]</code>).</p>\n</div>\n\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"keep-alive-Attribute-replaced\"><a href=\"#keep-alive-Attribute-replaced\" class=\"headerlink\" title=\"keep-alive Attribute replaced\"></a><code>keep-alive</code> Attribute <sup>replaced</sup></h3><p><code>keep-alive</code> is no longer a special attribute, but rather a wrapper component, similar to <code>&lt;transition&gt;</code>. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This makes it possible to use <code>&lt;keep-alive&gt;</code> on multiple conditional children:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">todo-list</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"todos.length &gt; 0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-list</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">no-todos-gif</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">no-todos-gif</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When <code>&lt;keep-alive&gt;</code> has multiple children, they should eventually evaluate to a single child. Any child other than the first one will simply be ignored.</p>\n\n<p>When used together with <code>&lt;transition&gt;</code>, make sure to nest it inside:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find <code>keep-alive</code> attributes.</p>\n</div>\n\n<h2 id=\"Interpolation\"><a href=\"#Interpolation\" class=\"headerlink\" title=\"Interpolation\"></a>Interpolation</h2><h3 id=\"Interpolation-within-Attributes-removed\"><a href=\"#Interpolation-within-Attributes-removed\" class=\"headerlink\" title=\"Interpolation within Attributes removed\"></a>Interpolation within Attributes <sup>removed</sup></h3><p>Interpolation within attributes is no longer valid. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-&#123;&#123; size &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Should either be updated to use an inline expression:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"'btn btn-' + size\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Or a data/computed property:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"buttonClasses\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">buttonClasses</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'btn btn-'</span> + size</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of interpolation used within attributes.</p>\n</div>\n\n<h3 id=\"HTML-Interpolation-removed\"><a href=\"#HTML-Interpolation-removed\" class=\"headerlink\" title=\"HTML Interpolation removed\"></a>HTML Interpolation <sup>removed</sup></h3><p>HTML interpolations (<code>{{{ foo }}}</code>) have been removed in favor of the <a href=\"../api/#v-html\"><code>v-html</code> directive</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find HTML interpolations.</p>\n</div>\n\n<h3 id=\"One-Time-Bindings-replaced\"><a href=\"#One-Time-Bindings-replaced\" class=\"headerlink\" title=\"One-Time Bindings replaced\"></a>One-Time Bindings <sup>replaced</sup></h3><p>One time bindings (<code>{{* foo }}</code>) have been replaced by the new <a href=\"../api/#v-once\"><code>v-once</code> directive</a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find one-time bindings.</p>\n</div>\n\n<h2 id=\"Reactivity\"><a href=\"#Reactivity\" class=\"headerlink\" title=\"Reactivity\"></a>Reactivity</h2><h3 id=\"vm-watch-changed\"><a href=\"#vm-watch-changed\" class=\"headerlink\" title=\"vm.$watch changed\"></a><code>vm.$watch</code> <sup>changed</sup></h3><p>Watchers created via <code>vm.$watch</code> are now fired before the associated component rerenders. This gives you the chance to further update state before the component rerender, thus avoiding unnecessary updates. For example, you can watch a component prop and update the component’s own data when the prop changes.</p>\n<p>If you were previously relying on <code>vm.$watch</code> to do something with the DOM after a component updates, you can instead do so in the <code>updated</code> lifecycle hook.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite, if you have one. The <strong>failed tests</strong> should alert to you to the fact that a watcher was relying on the old behavior.</p>\n</div>\n\n<h3 id=\"vm-set-changed\"><a href=\"#vm-set-changed\" class=\"headerlink\" title=\"vm.$set changed\"></a><code>vm.$set</code> <sup>changed</sup></h3><p><code>vm.$set</code> is now just an alias for <a href=\"../api/#Vue-set\"><code>Vue.set</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n\n<h3 id=\"vm-delete-changed\"><a href=\"#vm-delete-changed\" class=\"headerlink\" title=\"vm.$delete changed\"></a><code>vm.$delete</code> <sup>changed</sup></h3><p><code>vm.$delete</code> is now just an alias for <a href=\"../api/#Vue-delete\"><code>Vue.delete</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of the obsolete usage.</p>\n</div>\n\n<h3 id=\"Array-prototype-set-removed\"><a href=\"#Array-prototype-set-removed\" class=\"headerlink\" title=\"Array.prototype.$set removed\"></a><code>Array.prototype.$set</code> <sup>removed</sup></h3><p>Use <code>Vue.set</code> instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$set</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n\n<h3 id=\"Array-prototype-remove-removed\"><a href=\"#Array-prototype-remove-removed\" class=\"headerlink\" title=\"Array.prototype.$remove removed\"></a><code>Array.prototype.$remove</code> <sup>removed</sup></h3><p>Use <code>Array.prototype.splice</code> instead. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">removeTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">todo</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.todos.indexOf(todo)</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Or better yet, just pass removal methods an index:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"attr\">removeTodo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.todos.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>.$remove</code> on an array. If you miss any, you should see <strong>console errors</strong> from the missing method.</p>\n</div>\n\n<h3 id=\"Vue-set-and-Vue-delete-on-Vue-instances-removed\"><a href=\"#Vue-set-and-Vue-delete-on-Vue-instances-removed\" class=\"headerlink\" title=\"Vue.set and Vue.delete on Vue instances removed\"></a><code>Vue.set</code> and <code>Vue.delete</code> on Vue instances <sup>removed</sup></h3><p><code>Vue.set</code> and <code>Vue.delete</code> can no longer work on Vue instances. It is now mandatory to properly declare all top-level reactive properties in the data option. If you’d like to delete properties on a Vue instance or its <code>$data</code>, just set it to null.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.set</code> or <code>Vue.delete</code> on a Vue instance. If you miss any, they'll trigger <strong>console warnings</strong>.</p>\n</div>\n\n<h3 id=\"Replacing-vm-data-removed\"><a href=\"#Replacing-vm-data-removed\" class=\"headerlink\" title=\"Replacing vm.$data removed\"></a>Replacing <code>vm.$data</code> <sup>removed</sup></h3><p>It is now prohibited to replace a component instance’s root $data. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of overwriting <code>vm.$data</code>. If you miss any, <strong>console warnings</strong> will be emitted.</p>\n</div>\n\n<h3 id=\"vm-get-removed\"><a href=\"#vm-get-removed\" class=\"headerlink\" title=\"vm.$get removed\"></a><code>vm.$get</code> <sup>removed</sup></h3><p>Just retrieve reactive data directly.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$get</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"DOM-Focused-Instance-Methods\"><a href=\"#DOM-Focused-Instance-Methods\" class=\"headerlink\" title=\"DOM-Focused Instance Methods\"></a>DOM-Focused Instance Methods</h2><h3 id=\"vm-appendTo-removed\"><a href=\"#vm-appendTo-removed\" class=\"headerlink\" title=\"vm.$appendTo removed\"></a><code>vm.$appendTo</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.appendChild(vm.$el)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$appendTo</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-before-removed\"><a href=\"#vm-before-removed\" class=\"headerlink\" title=\"vm.$before removed\"></a><code>vm.$before</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.insertBefore(vm.$el, myElement)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$before</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-after-removed\"><a href=\"#vm-after-removed\" class=\"headerlink\" title=\"vm.$after removed\"></a><code>vm.$after</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.insertBefore(vm.$el, myElement.nextSibling)</div></pre></td></tr></table></figure>\n<p>Or if <code>myElement</code> is the last child:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">myElement.parentNode.appendChild(vm.$el)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$after</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-remove-removed\"><a href=\"#vm-remove-removed\" class=\"headerlink\" title=\"vm.$remove removed\"></a><code>vm.$remove</code> <sup>removed</sup></h3><p>Use the native DOM API:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$el.remove()</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$remove</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Meta-Instance-Methods\"><a href=\"#Meta-Instance-Methods\" class=\"headerlink\" title=\"Meta Instance Methods\"></a>Meta Instance Methods</h2><h3 id=\"vm-eval-removed\"><a href=\"#vm-eval-removed\" class=\"headerlink\" title=\"vm.$eval removed\"></a><code>vm.$eval</code> <sup>removed</sup></h3><p>No real use. If you do happen to rely on this feature somehow and aren’t sure how to work around it, post on <a href=\"http://forum.vuejs.org/\">the forum</a> for ideas.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$eval</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-interpolate-removed\"><a href=\"#vm-interpolate-removed\" class=\"headerlink\" title=\"vm.$interpolate removed\"></a><code>vm.$interpolate</code> <sup>removed</sup></h3><p>No real use. If you do happen to rely on this feature somehow and aren’t sure how to work around it, post on <a href=\"http://forum.vuejs.org/\">the forum</a> for ideas.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$interpolate</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h3 id=\"vm-log-removed\"><a href=\"#vm-log-removed\" class=\"headerlink\" title=\"vm.$log removed\"></a><code>vm.$log</code> <sup>removed</sup></h3><p>Use the <a href=\"https://github.com/vuejs/vue-devtools\">Vue Devtools</a> for the optimal debugging experience.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>vm.$log</code>. If you miss any, you'll see <strong>console errors</strong>.</p>\n</div>\n\n<h2 id=\"Instance-DOM-Options\"><a href=\"#Instance-DOM-Options\" class=\"headerlink\" title=\"Instance DOM Options\"></a>Instance DOM Options</h2><h3 id=\"replace-false-removed\"><a href=\"#replace-false-removed\" class=\"headerlink\" title=\"replace: false removed\"></a><code>replace: false</code> <sup>removed</sup></h3><p>Components now always replace the element they’re bound to. To simulate the behavior of <code>replace: false</code>, you can wrap your root component with an element similar to the one you’re replacing. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div id=\"app\"&gt; ... &lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Or with a render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</div><div class=\"line\">    h(<span class=\"string\">'div'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;, <span class=\"comment\">/* ... */</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>replace: false</code>.</p>\n</div>\n\n<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><h3 id=\"Vue-config-debug-removed\"><a href=\"#Vue-config-debug-removed\" class=\"headerlink\" title=\"Vue.config.debug removed\"></a><code>Vue.config.debug</code> <sup>removed</sup></h3><p>No longer necessary, since warnings come with stack traces by default now.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.debug</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-async-removed\"><a href=\"#Vue-config-async-removed\" class=\"headerlink\" title=\"Vue.config.async removed\"></a><code>Vue.config.async</code> <sup>removed</sup></h3><p>Async is now required for rendering performance.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.async</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-delimiters-replaced\"><a href=\"#Vue-config-delimiters-replaced\" class=\"headerlink\" title=\"Vue.config.delimiters replaced\"></a><code>Vue.config.delimiters</code> <sup>replaced</sup></h3><p>This has been reworked as a <a href=\"../api/#delimiters\">component-level option</a>. This allows you to use alternative delimiters within your app without breaking 3rd-party components.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.delimiters</code>.</p>\n</div>\n\n<h3 id=\"Vue-config-unsafeDelimiters-removed\"><a href=\"#Vue-config-unsafeDelimiters-removed\" class=\"headerlink\" title=\"Vue.config.unsafeDelimiters removed\"></a><code>Vue.config.unsafeDelimiters</code> <sup>removed</sup></h3><p>HTML interpolation has been <a href=\"#HTML-Interpolation-removed\">removed in favor of <code>v-html</code></a>.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.config.unsafeDelimiters</code>. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</p>\n</div>\n\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend-with-el-removed\"><a href=\"#Vue-extend-with-el-removed\" class=\"headerlink\" title=\"Vue.extend with el removed\"></a><code>Vue.extend</code> with <code>el</code> <sup>removed</sup></h3><p>The el option can no longer be used in <code>Vue.extend</code>. It’s only valid as an instance creation option.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run your end-to-end test suite or app after upgrading and look for <strong>console warnings</strong> about the <code>el</code> option with <code>Vue.extend</code>.</p>\n</div>\n\n<h3 id=\"Vue-elementDirective-removed\"><a href=\"#Vue-elementDirective-removed\" class=\"headerlink\" title=\"Vue.elementDirective removed\"></a><code>Vue.elementDirective</code> <sup>removed</sup></h3><p>Use components instead.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.elementDirective</code>.</p>\n</div>\n\n<h3 id=\"Vue-partial-removed\"><a href=\"#Vue-partial-removed\" class=\"headerlink\" title=\"Vue.partial removed\"></a><code>Vue.partial</code> <sup>removed</sup></h3><p>Partials have been removed in favor of more explicit data flow between components, using props. Unless you’re using a partial in a performance-critical area, the recommendation is to simply use a <a href=\"components.html\">normal component</a> instead. If you were dynamically binding the <code>name</code> of a partial, you can use a <a href=\"components.html#Dynamic-Components\">dynamic component</a>.</p>\n<p>If you happen to be using partials in a performance-critical part of your app, then you should upgrade to <a href=\"render-function.html#Functional-Components\">functional components</a>. They must be in a plain JS/JSX file (rather than in a <code>.vue</code> file) and are stateless and instanceless, just like partials. This makes rendering extremely fast.</p>\n<p>A benefit of functional components over partials is that they can be much more dynamic, because they grant you access to the full power of JavaScript. There is a cost to this power however. If you’ve never used a component framework with render functions before, they may take a bit longer to learn.</p>\n\n<div class=\"upgrade-path\">\n  <h4>Upgrade Path</h4>\n  <p>Run the <a href=\"https://github.com/vuejs/vue-migration-helper\">migration helper</a> on your codebase to find examples of <code>Vue.partial</code>.</p>\n</div>\n\n"},{"title":"Reactivity in Depth","type":"guide","order":12,"_content":"\nWe've covered most of the basics - now it's time to take a deep dive! One of Vue's most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very simple and intuitive, but it's also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue's reactivity system.\n\n## How Changes Are Tracked\n\nWhen you pass a plain JavaScript object to a Vue instance as its `data` option, Vue will walk through all of its properties and convert them to getter/setters using [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). This is an ES5-only and un-shimmable feature, which is why Vue doesn't support IE8 and below.\n\nThe getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install [vue-devtools](https://github.com/vuejs/vue-devtools) for a more inspection-friendly interface.\n\nEvery component instance has a corresponding **watcher** instance, which records any properties \"touched\" during the component's render as dependencies. Later on when a dependency's setter is triggered, it notifies the watcher, which in turn causes the component to re-render.\n\n![Reactivity Cycle](/images/data.png)\n\n## Change Detection Caveats\n\nDue to the limitations of modern JavaScript (and the abandonment of `Object.observe`), Vue **cannot detect property addition or deletion**. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the `data` object in order for Vue to convert it and make it reactive. For example:\n\n``` js\nvar vm = new Vue({\n  data: {\n    a: 1\n  }\n})\n// `vm.a` is now reactive\n\nvm.b = 2\n// `vm.b` is NOT reactive\n```\n\nVue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it's possible to add reactive properties to a nested object using the `Vue.set(object, key, value)` method:\n\n``` js\nVue.set(vm.someObject, 'b', 2)\n```\n\nYou can also use the `vm.$set` instance method, which is just an alias to the global `Vue.set`:\n\n``` js\nthis.$set(this.someObject, 'b', 2)\n```\n\nSometimes you may want to assign a number of properties to an existing object, for example using `Object.assign()` or `_.extend()`. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:\n\n``` js\n// instead of `Object.assign(this.someObject, { a: 1, b: 2 })`\nthis.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })\n```\n\nThere are also a few array-related caveats, which were discussed earlier in the [list rendering section](list.html#Caveats).\n\n## Declaring Reactive Properties\n\nSince Vue doesn't allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even just with an empty value:\n\n``` js\nvar vm = new Vue({\n  data: {\n    // declare message with an empty value\n    message: ''\n  },\n  template: '<div>{{ message }}</div>'\n})\n// set `message` later\nvm.message = 'Hello!'\n```\n\nIf you don't declare `message` in the data option, Vue will warn you that the render function is trying to access a property that doesn't exist.\n\nThere are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the `data` object is like the schema for your component's state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.\n\n## Async Update Queue\n\nIn case you haven't noticed yet, Vue performs DOM updates **asynchronously**. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop \"tick\", Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native `Promise.then` and `MutationObserver` for the asynchronous queuing and falls back to `setTimeout(fn, 0)`.\n\nFor example, when you set `vm.someData = 'new value'`, the component will not re-render immediately. It will update in the next \"tick\", when the queue is flushed. Most of the time we don't need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a \"data-driven\" fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use `Vue.nextTick(callback)` immediately after the data is changed. The callback will be called after the DOM has been updated. For example:\n\n``` html\n<div id=\"example\">{{ message }}</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: '123'\n  }\n})\nvm.message = 'new message' // change data\nvm.$el.textContent === 'new message' // false\nVue.nextTick(function () {\n  vm.$el.textContent === 'new message' // true\n})\n```\n\nThere is also the `vm.$nextTick()` instance method, which is especially handy inside components, because it doesn't need global `Vue` and its callback's `this` context will be automatically bound to the current Vue instance:\n\n``` js\nVue.component('example', {\n  template: '<span>{{ message }}</span>',\n  data: function () {\n    return {\n      message: 'not updated'\n    }\n  },\n  methods: {\n    updateMessage: function () {\n      this.message = 'updated'\n      console.log(this.$el.textContent) // => 'not updated'\n      this.$nextTick(function () {\n        console.log(this.$el.textContent) // => 'updated'\n      })\n    }\n  }\n})\n```\n","source":"v2/guide/reactivity.md","raw":"---\ntitle: Reactivity in Depth\ntype: guide\norder: 12\n---\n\nWe've covered most of the basics - now it's time to take a deep dive! One of Vue's most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very simple and intuitive, but it's also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue's reactivity system.\n\n## How Changes Are Tracked\n\nWhen you pass a plain JavaScript object to a Vue instance as its `data` option, Vue will walk through all of its properties and convert them to getter/setters using [Object.defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). This is an ES5-only and un-shimmable feature, which is why Vue doesn't support IE8 and below.\n\nThe getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install [vue-devtools](https://github.com/vuejs/vue-devtools) for a more inspection-friendly interface.\n\nEvery component instance has a corresponding **watcher** instance, which records any properties \"touched\" during the component's render as dependencies. Later on when a dependency's setter is triggered, it notifies the watcher, which in turn causes the component to re-render.\n\n![Reactivity Cycle](/images/data.png)\n\n## Change Detection Caveats\n\nDue to the limitations of modern JavaScript (and the abandonment of `Object.observe`), Vue **cannot detect property addition or deletion**. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the `data` object in order for Vue to convert it and make it reactive. For example:\n\n``` js\nvar vm = new Vue({\n  data: {\n    a: 1\n  }\n})\n// `vm.a` is now reactive\n\nvm.b = 2\n// `vm.b` is NOT reactive\n```\n\nVue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it's possible to add reactive properties to a nested object using the `Vue.set(object, key, value)` method:\n\n``` js\nVue.set(vm.someObject, 'b', 2)\n```\n\nYou can also use the `vm.$set` instance method, which is just an alias to the global `Vue.set`:\n\n``` js\nthis.$set(this.someObject, 'b', 2)\n```\n\nSometimes you may want to assign a number of properties to an existing object, for example using `Object.assign()` or `_.extend()`. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:\n\n``` js\n// instead of `Object.assign(this.someObject, { a: 1, b: 2 })`\nthis.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })\n```\n\nThere are also a few array-related caveats, which were discussed earlier in the [list rendering section](list.html#Caveats).\n\n## Declaring Reactive Properties\n\nSince Vue doesn't allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even just with an empty value:\n\n``` js\nvar vm = new Vue({\n  data: {\n    // declare message with an empty value\n    message: ''\n  },\n  template: '<div>{{ message }}</div>'\n})\n// set `message` later\nvm.message = 'Hello!'\n```\n\nIf you don't declare `message` in the data option, Vue will warn you that the render function is trying to access a property that doesn't exist.\n\nThere are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the `data` object is like the schema for your component's state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.\n\n## Async Update Queue\n\nIn case you haven't noticed yet, Vue performs DOM updates **asynchronously**. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop \"tick\", Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native `Promise.then` and `MutationObserver` for the asynchronous queuing and falls back to `setTimeout(fn, 0)`.\n\nFor example, when you set `vm.someData = 'new value'`, the component will not re-render immediately. It will update in the next \"tick\", when the queue is flushed. Most of the time we don't need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a \"data-driven\" fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use `Vue.nextTick(callback)` immediately after the data is changed. The callback will be called after the DOM has been updated. For example:\n\n``` html\n<div id=\"example\">{{ message }}</div>\n```\n\n``` js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: '123'\n  }\n})\nvm.message = 'new message' // change data\nvm.$el.textContent === 'new message' // false\nVue.nextTick(function () {\n  vm.$el.textContent === 'new message' // true\n})\n```\n\nThere is also the `vm.$nextTick()` instance method, which is especially handy inside components, because it doesn't need global `Vue` and its callback's `this` context will be automatically bound to the current Vue instance:\n\n``` js\nVue.component('example', {\n  template: '<span>{{ message }}</span>',\n  data: function () {\n    return {\n      message: 'not updated'\n    }\n  },\n  methods: {\n    updateMessage: function () {\n      this.message = 'updated'\n      console.log(this.$el.textContent) // => 'not updated'\n      this.$nextTick(function () {\n        console.log(this.$el.textContent) // => 'updated'\n      })\n    }\n  }\n})\n```\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/reactivity.html","comments":1,"layout":"page","_id":"civ8jcjou001991m1p2y40hma","content":"<p>We’ve covered most of the basics - now it’s time to take a deep dive! One of Vue’s most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very simple and intuitive, but it’s also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue’s reactivity system.</p>\n<h2 id=\"How-Changes-Are-Tracked\"><a href=\"#How-Changes-Are-Tracked\" class=\"headerlink\" title=\"How Changes Are Tracked\"></a>How Changes Are Tracked</h2><p>When you pass a plain JavaScript object to a Vue instance as its <code>data</code> option, Vue will walk through all of its properties and convert them to getter/setters using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Object.defineProperty</a>. This is an ES5-only and un-shimmable feature, which is why Vue doesn’t support IE8 and below.</p>\n<p>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a> for a more inspection-friendly interface.</p>\n<p>Every component instance has a corresponding <strong>watcher</strong> instance, which records any properties “touched” during the component’s render as dependencies. Later on when a dependency’s setter is triggered, it notifies the watcher, which in turn causes the component to re-render.</p>\n<p><img src=\"/images/data.png\" alt=\"Reactivity Cycle\"></p>\n<h2 id=\"Change-Detection-Caveats\"><a href=\"#Change-Detection-Caveats\" class=\"headerlink\" title=\"Change Detection Caveats\"></a>Change Detection Caveats</h2><p>Due to the limitations of modern JavaScript (and the abandonment of <code>Object.observe</code>), Vue <strong>cannot detect property addition or deletion</strong>. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the <code>data</code> object in order for Vue to convert it and make it reactive. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// `vm.a` is now reactive</span></div><div class=\"line\"></div><div class=\"line\">vm.b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// `vm.b` is NOT reactive</span></div></pre></td></tr></table></figure>\n<p>Vue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it’s possible to add reactive properties to a nested object using the <code>Vue.set(object, key, value)</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.set(vm.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>You can also use the <code>vm.$set</code> instance method, which is just an alias to the global <code>Vue.set</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>Sometimes you may want to assign a number of properties to an existing object, for example using <code>Object.assign()</code> or <code>_.extend()</code>. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// instead of `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></div><div class=\"line\"><span class=\"keyword\">this</span>.someObject = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.someObject, &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;)</div></pre></td></tr></table></figure>\n<p>There are also a few array-related caveats, which were discussed earlier in the <a href=\"list.html#Caveats\">list rendering section</a>.</p>\n<h2 id=\"Declaring-Reactive-Properties\"><a href=\"#Declaring-Reactive-Properties\" class=\"headerlink\" title=\"Declaring Reactive Properties\"></a>Declaring Reactive Properties</h2><p>Since Vue doesn’t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even just with an empty value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// declare message with an empty value</span></div><div class=\"line\">    message: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// set `message` later</span></div><div class=\"line\">vm.message = <span class=\"string\">'Hello!'</span></div></pre></td></tr></table></figure>\n<p>If you don’t declare <code>message</code> in the data option, Vue will warn you that the render function is trying to access a property that doesn’t exist.</p>\n<p>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the <code>data</code> object is like the schema for your component’s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</p>\n<h2 id=\"Async-Update-Queue\"><a href=\"#Async-Update-Queue\" class=\"headerlink\" title=\"Async Update Queue\"></a>Async Update Queue</h2><p>In case you haven’t noticed yet, Vue performs DOM updates <strong>asynchronously</strong>. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop “tick”, Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native <code>Promise.then</code> and <code>MutationObserver</code> for the asynchronous queuing and falls back to <code>setTimeout(fn, 0)</code>.</p>\n<p>For example, when you set <code>vm.someData = &#39;new value&#39;</code>, the component will not re-render immediately. It will update in the next “tick”, when the queue is flushed. Most of the time we don’t need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a “data-driven” fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use <code>Vue.nextTick(callback)</code> immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'123'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.message = <span class=\"string\">'new message'</span> <span class=\"comment\">// change data</span></div><div class=\"line\">vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// false</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>There is also the <code>vm.$nextTick()</code> instance method, which is especially handy inside components, because it doesn’t need global <code>Vue</code> and its callback’s <code>this</code> context will be automatically bound to the current Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">'not updated'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'updated'</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'not updated'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'updated'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>We’ve covered most of the basics - now it’s time to take a deep dive! One of Vue’s most distinct features is the unobtrusive reactivity system. Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very simple and intuitive, but it’s also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue’s reactivity system.</p>\n<h2 id=\"How-Changes-Are-Tracked\"><a href=\"#How-Changes-Are-Tracked\" class=\"headerlink\" title=\"How Changes Are Tracked\"></a>How Changes Are Tracked</h2><p>When you pass a plain JavaScript object to a Vue instance as its <code>data</code> option, Vue will walk through all of its properties and convert them to getter/setters using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a>. This is an ES5-only and un-shimmable feature, which is why Vue doesn’t support IE8 and below.</p>\n<p>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a> for a more inspection-friendly interface.</p>\n<p>Every component instance has a corresponding <strong>watcher</strong> instance, which records any properties “touched” during the component’s render as dependencies. Later on when a dependency’s setter is triggered, it notifies the watcher, which in turn causes the component to re-render.</p>\n<p><img src=\"/images/data.png\" alt=\"Reactivity Cycle\"></p>\n<h2 id=\"Change-Detection-Caveats\"><a href=\"#Change-Detection-Caveats\" class=\"headerlink\" title=\"Change Detection Caveats\"></a>Change Detection Caveats</h2><p>Due to the limitations of modern JavaScript (and the abandonment of <code>Object.observe</code>), Vue <strong>cannot detect property addition or deletion</strong>. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the <code>data</code> object in order for Vue to convert it and make it reactive. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// `vm.a` is now reactive</span></div><div class=\"line\"></div><div class=\"line\">vm.b = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// `vm.b` is NOT reactive</span></div></pre></td></tr></table></figure>\n<p>Vue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it’s possible to add reactive properties to a nested object using the <code>Vue.set(object, key, value)</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.set(vm.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>You can also use the <code>vm.$set</code> instance method, which is just an alias to the global <code>Vue.set</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>Sometimes you may want to assign a number of properties to an existing object, for example using <code>Object.assign()</code> or <code>_.extend()</code>. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// instead of `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></div><div class=\"line\"><span class=\"keyword\">this</span>.someObject = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.someObject, &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;)</div></pre></td></tr></table></figure>\n<p>There are also a few array-related caveats, which were discussed earlier in the <a href=\"list.html#Caveats\">list rendering section</a>.</p>\n<h2 id=\"Declaring-Reactive-Properties\"><a href=\"#Declaring-Reactive-Properties\" class=\"headerlink\" title=\"Declaring Reactive Properties\"></a>Declaring Reactive Properties</h2><p>Since Vue doesn’t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even just with an empty value:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// declare message with an empty value</span></div><div class=\"line\">    message: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// set `message` later</span></div><div class=\"line\">vm.message = <span class=\"string\">'Hello!'</span></div></pre></td></tr></table></figure>\n<p>If you don’t declare <code>message</code> in the data option, Vue will warn you that the render function is trying to access a property that doesn’t exist.</p>\n<p>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the <code>data</code> object is like the schema for your component’s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</p>\n<h2 id=\"Async-Update-Queue\"><a href=\"#Async-Update-Queue\" class=\"headerlink\" title=\"Async Update Queue\"></a>Async Update Queue</h2><p>In case you haven’t noticed yet, Vue performs DOM updates <strong>asynchronously</strong>. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop “tick”, Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native <code>Promise.then</code> and <code>MutationObserver</code> for the asynchronous queuing and falls back to <code>setTimeout(fn, 0)</code>.</p>\n<p>For example, when you set <code>vm.someData = &#39;new value&#39;</code>, the component will not re-render immediately. It will update in the next “tick”, when the queue is flushed. Most of the time we don’t need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a “data-driven” fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use <code>Vue.nextTick(callback)</code> immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'123'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.message = <span class=\"string\">'new message'</span> <span class=\"comment\">// change data</span></div><div class=\"line\">vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// false</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>There is also the <code>vm.$nextTick()</code> instance method, which is especially handy inside components, because it doesn’t need global <code>Vue</code> and its callback’s <code>this</code> context will be automatically bound to the current Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">'not updated'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'updated'</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'not updated'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'updated'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Render Functions","type":"guide","order":15,"_content":"\n## Basics\n\nVue recommends using templates to build your HTML in the vast majority of cases. There are situations however, where you really need the full programmatic power of JavaScript. That's where you can use the **render  function**, a closer-to-the-compiler alternative to templates.\n\nLet's dive into a simple example where a `render` function would be practical. Say you want to generate anchored headings:\n\n``` html\n<h1>\n  <a name=\"hello-world\" href=\"#hello-world\">\n    Hello world!\n  </a>\n</h1>\n```\n\nFor the HTML above, you decide you want this component interface:\n\n``` html\n<anchored-heading :level=\"1\">Hello world!</anchored-heading>\n```\n\nWhen you get started with a component that just generates a heading based on the `level` prop, you quickly arrive at this:\n\n``` html\n<script type=\"text/x-template\" id=\"anchored-heading-template\">\n  <div>\n    <h1 v-if=\"level === 1\">\n      <slot></slot>\n    </h1>\n    <h2 v-if=\"level === 2\">\n      <slot></slot>\n    </h2>\n    <h3 v-if=\"level === 3\">\n      <slot></slot>\n    </h3>\n    <h4 v-if=\"level === 4\">\n      <slot></slot>\n    </h4>\n    <h5 v-if=\"level === 5\">\n      <slot></slot>\n    </h5>\n    <h6 v-if=\"level === 6\">\n      <slot></slot>\n    </h6>\n  </div>\n</script>\n```\n\n``` js\nVue.component('anchored-heading', {\n  template: '#anchored-heading-template',\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nThat template doesn't feel great. It's not only verbose, but we're duplicating `<slot></slot>` for every heading level and will have to do the same when we add the anchor element. The whole thing is also wrapped in a useless `div` because components must contain exactly one root node.\n\nWhile templates work great for most components, it's clear that this isn't one of them. So let's try rewriting it with a `render` function:\n\n``` js\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // tag name\n      this.$slots.default // array of children\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nMuch simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a `slot` attribute into a component, like the `Hello world!` inside of `anchored-heading`, those children are stored on the component instance at `$slots.default`. If you haven't already, **it's recommended to read through the [instance properties API](../api/#vm-slots) before diving into render functions.**\n\n## `createElement` Arguments\n\nThe second thing you'll have to become familiar with is how to use template features in the `createElement` function. Here are the arguments that `createElement` accepts:\n\n``` js\n// @returns {VNode}\ncreateElement(\n  // {String | Object | Function}\n  // An HTML tag name, component options, or function\n  // returning one of these. Required.\n  'div',\n\n  // {Object}\n  // A data object corresponding to the attributes\n  // you would use in a template. Optional.\n  {\n    // (see details in the next section below)\n  },\n\n  // {String | Array}\n  // Children VNodes. Optional.\n  [\n    createElement('h1', 'hello world'),\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foo'\n      }\n    }),\n    'bar'\n  ]\n)\n```\n\n### The Data Object In-Depth\n\nOne thing to note: similar to how `v-bind:class` and `v-bind:style` have special treatment in templates, they have their own top-level fields in VNode data objects.\n\n``` js\n{\n  // Same API as `v-bind:class`\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // Same API as `v-bind:style`\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // Normal HTML attributes\n  attrs: {\n    id: 'foo'\n  },\n  // Component props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM properties\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // Event handlers are nested under \"on\", though\n  // modifiers such as in v-on:keyup.enter are not\n  // supported. You'll have to manually check the\n  // keyCode in the handler instead.\n  on: {\n    click: this.clickHandler\n  },\n  // For components only. Allows you to listen to\n  // native events, rather than events emitted from\n  // the component using vm.$emit.\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // Custom directives. Note that the binding's\n  // oldValue cannot be set, as Vue keeps track\n  // of it for you.\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // The name of a slot if the child of a component\n  slot: 'name-of-slot'\n  // Other special top-level properties\n  key: 'myKey',\n  ref: 'myRef'\n}\n```\n\n### Complete Example\n\nWith this knowledge, we can now finish the component we started:\n\n``` js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n### Constraints\n\n#### VNodes Must Be Unique\n\nAll VNodes in the component tree must be unique. That means the following render function is invalid:\n\n``` js\nrender: function (createElement) {\n  var myParagraphVNode = createElement('p', 'hi')\n  return createElement('div', [\n    // Yikes - duplicate VNodes!\n    myParagraphVNode, myParagraphVNode\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n``` js\nrender: function (createElement) {\n  return createElement('div',\n    Array.apply(null, { length: 20 }).map(function () {\n      return createElement('p', 'hi')\n    })\n  )\n}\n```\n\n## Replacing Template Features with Plain JavaScript\n\nWherever something can be easily accomplished in plain JavaScript, Vue render functions do not provide a proprietary alternative. For example, in a template using `v-if` and `v-for`:\n\n``` html\n<ul v-if=\"items.length\">\n  <li v-for=\"item in items\">{{ item.name }}</li>\n</ul>\n<p v-else>No items found.</p>\n```\n\nThis could be rewritten with JavaScript's `if`/`else` and `map` in a render function:\n\n``` js\nrender: function (createElement) {\n  if (this.items.length) {\n    return createElement('ul', this.items.map(function (item) {\n      return createElement('li', item.name)\n    }))\n  } else {\n    return createElement('p', 'No items found.')\n  }\n}\n```\n\n## JSX\n\nIf you're writing a lot of `render` functions, it might feel painful to write something like this:\n\n``` js\ncreateElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)\n```\n\nEspecially when the template version is so simple in comparison:\n\n``` html\n<anchored-heading :level=\"1\">\n  <span>Hello</span> world!\n</anchored-heading>\n```\n\nThat's why there's a [Babel plugin](https://github.com/vuejs/babel-plugin-transform-vue-jsx) to use JSX with Vue, getting us back to a syntax that's closer to templates:\n\n``` js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n<p class=\"tip\">Aliasing `createElement` to `h` is a common convention you'll see in the Vue ecosystem and is actually required for JSX. If `h` is not available in the scope, your app will throw an error.</p>\n\nFor more on how JSX maps to JavaScript, see the [usage docs](https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage).\n\n## Functional Components\n\nThe anchored heading component we created earlier is relatively simple. It doesn't manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it's just a function with some props.\n\nIn cases like this, we can mark components as `functional`, which means that they're stateless (no `data`) and instanceless (no `this` context). A **functional component** looks like this:\n\n``` js\nVue.component('my-component', {\n  functional: true,\n  // To compensate for the lack of an instance,\n  // we are now provided a 2nd context argument.\n  render: function (createElement, context) {\n    // ...\n  },\n  // Props are optional\n  props: {\n    // ...\n  }\n})\n```\n\nEverything the component needs is passed through `context`, which is an object containing:\n\n- `props`: An object of the provided props\n- `children`: An array of the VNode children\n- `slots`: A function returning a slots object\n- `data`: The entire data object passed to the component\n- `parent`: A reference to the parent component\n\nAfter adding `functional: true`, updating the render function of our anchored heading component would simply require adding the `context` argument, updating `this.$slots.default` to `context.children`, then updating `this.level` to `context.props.level`.\n\nSince functional components are just functions, they're much cheaper to render. They're also very useful as wrapper components. For example, when you need to:\n\n- Programmatically choose one of several other components to delegate to\n- Manipulate children, props, or data before passing them on to a child component\n\nHere's an example of a `smart-list` component that delegates to more specific components, depending on the props passed to it:\n\n``` js\nvar EmptyList = { /* ... */ }\nvar TableList = { /* ... */ }\nvar OrderedList = { /* ... */ }\nvar UnorderedList = { /* ... */ }\n\nVue.component('smart-list', {\n  functional: true,\n  render: function (createElement, context) {\n    function appropriateListComponent () {\n      var items = context.props.items\n\n      if (items.length === 0)           return EmptyList\n      if (typeof items[0] === 'object') return TableList\n      if (context.props.isOrdered)      return OrderedList\n\n      return UnorderedList\n    }\n\n    return createElement(\n      appropriateListComponent(),\n      context.data,\n      context.children\n    )\n  },\n  props: {\n    items: {\n      type: Array,\n      required: true\n    },\n    isOrdered: Boolean\n  }\n})\n```\n\n### `slots()` vs `children`\n\nYou may wonder why we need both `slots()` and `children`. Wouldn't `slots().default` be the same as `children`? In some cases, yes - but what if you have a functional component with the following children?\n\n``` html\n<my-functional-component>\n  <p slot=\"foo\">\n    first\n  </p>\n  <p>second</p>\n</my-functional-component>\n```\n\nFor this component, `children` will give you both paragraphs, `slots().default` will give you only the second, and `slots().foo` will give you only the first. Having both `children` and `slots()` therefore allows you to choose whether this component knows about a slot system or perhaps delegates that responsibility to another component by simply passing along `children`.\n\n## Template Compilation\n\nYou may be interested to know that Vue's templates actually compile to render functions. This is an implementation detail you usually don't need to know about, but if you'd like to see how specific template features are compiled, you may find it interesting. Below is a little demo using `Vue.compile` to live-compile a template string:\n\n{% raw %}\n<div id=\"vue-compile-demo\" class=\"demo\">\n  <textarea v-model=\"templateText\" rows=\"10\"></textarea>\n  <div v-if=\"typeof result === 'object'\">\n    <label>render:</label>\n    <pre><code>{{ result.render }}</code></pre>\n    <label>staticRenderFns:</label>\n    <pre v-for=\"(fn, index) in result.staticRenderFns\"><code>_m({{ index }}): {{ fn }}</code></pre>\n  </div>\n  <div v-else>\n    <label>Compilation Error:</label>\n    <pre><code>{{ result }}</code></pre>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#vue-compile-demo',\n  data: {\n    templateText: '\\\n<div>\\n\\\n  <h1>I\\'m a template!</h1>\\n\\\n  <p v-if=\"message\">\\n\\\n    {{ message }}\\n\\\n  </p>\\n\\\n  <p v-else>\\n\\\n    No message.\\n\\\n  </p>\\n\\\n</div>\\\n    ',\n  },\n  computed: {\n    result: function () {\n      if (!this.templateText) {\n        return 'Enter a valid template above'\n      }\n      try {\n        var result = Vue.compile(this.templateText.replace(/\\s{2,}/g, ''))\n        return {\n          render: this.formatFunction(result.render),\n          staticRenderFns: result.staticRenderFns.map(this.formatFunction)\n        }\n      } catch (error) {\n        return error.message\n      }\n    }\n  },\n  methods: {\n    formatFunction: function (fn) {\n      return fn.toString().replace(/(\\{\\n)(\\S)/, '$1  $2')\n    }\n  }\n})\nconsole.error = function (error) {\n  throw new Error(error)\n}\n</script>\n<style>\n#vue-compile-demo pre {\n  padding: 10px;\n  overflow-x: auto;\n}\n#vue-compile-demo code {\n  white-space: pre;\n  padding: 0\n}\n#vue-compile-demo textarea {\n  width: 100%;\n\n}\n</style>\n{% endraw %}\n","source":"v2/guide/render-function.md","raw":"---\ntitle: Render Functions\ntype: guide\norder: 15\n---\n\n## Basics\n\nVue recommends using templates to build your HTML in the vast majority of cases. There are situations however, where you really need the full programmatic power of JavaScript. That's where you can use the **render  function**, a closer-to-the-compiler alternative to templates.\n\nLet's dive into a simple example where a `render` function would be practical. Say you want to generate anchored headings:\n\n``` html\n<h1>\n  <a name=\"hello-world\" href=\"#hello-world\">\n    Hello world!\n  </a>\n</h1>\n```\n\nFor the HTML above, you decide you want this component interface:\n\n``` html\n<anchored-heading :level=\"1\">Hello world!</anchored-heading>\n```\n\nWhen you get started with a component that just generates a heading based on the `level` prop, you quickly arrive at this:\n\n``` html\n<script type=\"text/x-template\" id=\"anchored-heading-template\">\n  <div>\n    <h1 v-if=\"level === 1\">\n      <slot></slot>\n    </h1>\n    <h2 v-if=\"level === 2\">\n      <slot></slot>\n    </h2>\n    <h3 v-if=\"level === 3\">\n      <slot></slot>\n    </h3>\n    <h4 v-if=\"level === 4\">\n      <slot></slot>\n    </h4>\n    <h5 v-if=\"level === 5\">\n      <slot></slot>\n    </h5>\n    <h6 v-if=\"level === 6\">\n      <slot></slot>\n    </h6>\n  </div>\n</script>\n```\n\n``` js\nVue.component('anchored-heading', {\n  template: '#anchored-heading-template',\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nThat template doesn't feel great. It's not only verbose, but we're duplicating `<slot></slot>` for every heading level and will have to do the same when we add the anchor element. The whole thing is also wrapped in a useless `div` because components must contain exactly one root node.\n\nWhile templates work great for most components, it's clear that this isn't one of them. So let's try rewriting it with a `render` function:\n\n``` js\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // tag name\n      this.$slots.default // array of children\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nMuch simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a `slot` attribute into a component, like the `Hello world!` inside of `anchored-heading`, those children are stored on the component instance at `$slots.default`. If you haven't already, **it's recommended to read through the [instance properties API](../api/#vm-slots) before diving into render functions.**\n\n## `createElement` Arguments\n\nThe second thing you'll have to become familiar with is how to use template features in the `createElement` function. Here are the arguments that `createElement` accepts:\n\n``` js\n// @returns {VNode}\ncreateElement(\n  // {String | Object | Function}\n  // An HTML tag name, component options, or function\n  // returning one of these. Required.\n  'div',\n\n  // {Object}\n  // A data object corresponding to the attributes\n  // you would use in a template. Optional.\n  {\n    // (see details in the next section below)\n  },\n\n  // {String | Array}\n  // Children VNodes. Optional.\n  [\n    createElement('h1', 'hello world'),\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foo'\n      }\n    }),\n    'bar'\n  ]\n)\n```\n\n### The Data Object In-Depth\n\nOne thing to note: similar to how `v-bind:class` and `v-bind:style` have special treatment in templates, they have their own top-level fields in VNode data objects.\n\n``` js\n{\n  // Same API as `v-bind:class`\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // Same API as `v-bind:style`\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // Normal HTML attributes\n  attrs: {\n    id: 'foo'\n  },\n  // Component props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM properties\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // Event handlers are nested under \"on\", though\n  // modifiers such as in v-on:keyup.enter are not\n  // supported. You'll have to manually check the\n  // keyCode in the handler instead.\n  on: {\n    click: this.clickHandler\n  },\n  // For components only. Allows you to listen to\n  // native events, rather than events emitted from\n  // the component using vm.$emit.\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // Custom directives. Note that the binding's\n  // oldValue cannot be set, as Vue keeps track\n  // of it for you.\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // The name of a slot if the child of a component\n  slot: 'name-of-slot'\n  // Other special top-level properties\n  key: 'myKey',\n  ref: 'myRef'\n}\n```\n\n### Complete Example\n\nWith this knowledge, we can now finish the component we started:\n\n``` js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n### Constraints\n\n#### VNodes Must Be Unique\n\nAll VNodes in the component tree must be unique. That means the following render function is invalid:\n\n``` js\nrender: function (createElement) {\n  var myParagraphVNode = createElement('p', 'hi')\n  return createElement('div', [\n    // Yikes - duplicate VNodes!\n    myParagraphVNode, myParagraphVNode\n  ])\n}\n```\n\nIf you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:\n\n``` js\nrender: function (createElement) {\n  return createElement('div',\n    Array.apply(null, { length: 20 }).map(function () {\n      return createElement('p', 'hi')\n    })\n  )\n}\n```\n\n## Replacing Template Features with Plain JavaScript\n\nWherever something can be easily accomplished in plain JavaScript, Vue render functions do not provide a proprietary alternative. For example, in a template using `v-if` and `v-for`:\n\n``` html\n<ul v-if=\"items.length\">\n  <li v-for=\"item in items\">{{ item.name }}</li>\n</ul>\n<p v-else>No items found.</p>\n```\n\nThis could be rewritten with JavaScript's `if`/`else` and `map` in a render function:\n\n``` js\nrender: function (createElement) {\n  if (this.items.length) {\n    return createElement('ul', this.items.map(function (item) {\n      return createElement('li', item.name)\n    }))\n  } else {\n    return createElement('p', 'No items found.')\n  }\n}\n```\n\n## JSX\n\nIf you're writing a lot of `render` functions, it might feel painful to write something like this:\n\n``` js\ncreateElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)\n```\n\nEspecially when the template version is so simple in comparison:\n\n``` html\n<anchored-heading :level=\"1\">\n  <span>Hello</span> world!\n</anchored-heading>\n```\n\nThat's why there's a [Babel plugin](https://github.com/vuejs/babel-plugin-transform-vue-jsx) to use JSX with Vue, getting us back to a syntax that's closer to templates:\n\n``` js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n<p class=\"tip\">Aliasing `createElement` to `h` is a common convention you'll see in the Vue ecosystem and is actually required for JSX. If `h` is not available in the scope, your app will throw an error.</p>\n\nFor more on how JSX maps to JavaScript, see the [usage docs](https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage).\n\n## Functional Components\n\nThe anchored heading component we created earlier is relatively simple. It doesn't manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it's just a function with some props.\n\nIn cases like this, we can mark components as `functional`, which means that they're stateless (no `data`) and instanceless (no `this` context). A **functional component** looks like this:\n\n``` js\nVue.component('my-component', {\n  functional: true,\n  // To compensate for the lack of an instance,\n  // we are now provided a 2nd context argument.\n  render: function (createElement, context) {\n    // ...\n  },\n  // Props are optional\n  props: {\n    // ...\n  }\n})\n```\n\nEverything the component needs is passed through `context`, which is an object containing:\n\n- `props`: An object of the provided props\n- `children`: An array of the VNode children\n- `slots`: A function returning a slots object\n- `data`: The entire data object passed to the component\n- `parent`: A reference to the parent component\n\nAfter adding `functional: true`, updating the render function of our anchored heading component would simply require adding the `context` argument, updating `this.$slots.default` to `context.children`, then updating `this.level` to `context.props.level`.\n\nSince functional components are just functions, they're much cheaper to render. They're also very useful as wrapper components. For example, when you need to:\n\n- Programmatically choose one of several other components to delegate to\n- Manipulate children, props, or data before passing them on to a child component\n\nHere's an example of a `smart-list` component that delegates to more specific components, depending on the props passed to it:\n\n``` js\nvar EmptyList = { /* ... */ }\nvar TableList = { /* ... */ }\nvar OrderedList = { /* ... */ }\nvar UnorderedList = { /* ... */ }\n\nVue.component('smart-list', {\n  functional: true,\n  render: function (createElement, context) {\n    function appropriateListComponent () {\n      var items = context.props.items\n\n      if (items.length === 0)           return EmptyList\n      if (typeof items[0] === 'object') return TableList\n      if (context.props.isOrdered)      return OrderedList\n\n      return UnorderedList\n    }\n\n    return createElement(\n      appropriateListComponent(),\n      context.data,\n      context.children\n    )\n  },\n  props: {\n    items: {\n      type: Array,\n      required: true\n    },\n    isOrdered: Boolean\n  }\n})\n```\n\n### `slots()` vs `children`\n\nYou may wonder why we need both `slots()` and `children`. Wouldn't `slots().default` be the same as `children`? In some cases, yes - but what if you have a functional component with the following children?\n\n``` html\n<my-functional-component>\n  <p slot=\"foo\">\n    first\n  </p>\n  <p>second</p>\n</my-functional-component>\n```\n\nFor this component, `children` will give you both paragraphs, `slots().default` will give you only the second, and `slots().foo` will give you only the first. Having both `children` and `slots()` therefore allows you to choose whether this component knows about a slot system or perhaps delegates that responsibility to another component by simply passing along `children`.\n\n## Template Compilation\n\nYou may be interested to know that Vue's templates actually compile to render functions. This is an implementation detail you usually don't need to know about, but if you'd like to see how specific template features are compiled, you may find it interesting. Below is a little demo using `Vue.compile` to live-compile a template string:\n\n{% raw %}\n<div id=\"vue-compile-demo\" class=\"demo\">\n  <textarea v-model=\"templateText\" rows=\"10\"></textarea>\n  <div v-if=\"typeof result === 'object'\">\n    <label>render:</label>\n    <pre><code>{{ result.render }}</code></pre>\n    <label>staticRenderFns:</label>\n    <pre v-for=\"(fn, index) in result.staticRenderFns\"><code>_m({{ index }}): {{ fn }}</code></pre>\n  </div>\n  <div v-else>\n    <label>Compilation Error:</label>\n    <pre><code>{{ result }}</code></pre>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#vue-compile-demo',\n  data: {\n    templateText: '\\\n<div>\\n\\\n  <h1>I\\'m a template!</h1>\\n\\\n  <p v-if=\"message\">\\n\\\n    {{ message }}\\n\\\n  </p>\\n\\\n  <p v-else>\\n\\\n    No message.\\n\\\n  </p>\\n\\\n</div>\\\n    ',\n  },\n  computed: {\n    result: function () {\n      if (!this.templateText) {\n        return 'Enter a valid template above'\n      }\n      try {\n        var result = Vue.compile(this.templateText.replace(/\\s{2,}/g, ''))\n        return {\n          render: this.formatFunction(result.render),\n          staticRenderFns: result.staticRenderFns.map(this.formatFunction)\n        }\n      } catch (error) {\n        return error.message\n      }\n    }\n  },\n  methods: {\n    formatFunction: function (fn) {\n      return fn.toString().replace(/(\\{\\n)(\\S)/, '$1  $2')\n    }\n  }\n})\nconsole.error = function (error) {\n  throw new Error(error)\n}\n</script>\n<style>\n#vue-compile-demo pre {\n  padding: 10px;\n  overflow-x: auto;\n}\n#vue-compile-demo code {\n  white-space: pre;\n  padding: 0\n}\n#vue-compile-demo textarea {\n  width: 100%;\n\n}\n</style>\n{% endraw %}\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/render-function.html","comments":1,"layout":"page","_id":"civ8jcjou001a91m11m70e7tr","content":"<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><p>Vue recommends using templates to build your HTML in the vast majority of cases. There are situations however, where you really need the full programmatic power of JavaScript. That’s where you can use the <strong>render  function</strong>, a closer-to-the-compiler alternative to templates.</p>\n<p>Let’s dive into a simple example where a <code>render</code> function would be practical. Say you want to generate anchored headings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello-world\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#hello-world\"</span>&gt;</span></div><div class=\"line\">    Hello world!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For the HTML above, you decide you want this component interface:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">anchored-heading</span> <span class=\"attr\">:level</span>=<span class=\"string\">\"1\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">anchored-heading</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you get started with a component that just generates a heading based on the <code>level</code> prop, you quickly arrive at this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anchored-heading-template\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 4\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h5</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 5\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'#anchored-heading-template'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That template doesn’t feel great. It’s not only verbose, but we’re duplicating <code>&lt;slot&gt;&lt;/slot&gt;</code> for every heading level and will have to do the same when we add the anchor element. The whole thing is also wrapped in a useless <code>div</code> because components must contain exactly one root node.</p>\n<p>While templates work great for most components, it’s clear that this isn’t one of them. So let’s try rewriting it with a <code>render</code> function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,   <span class=\"comment\">// tag name</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$slots.default <span class=\"comment\">// array of children</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Much simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a <code>slot</code> attribute into a component, like the <code>Hello world!</code> inside of <code>anchored-heading</code>, those children are stored on the component instance at <code>$slots.default</code>. If you haven’t already, <strong>it’s recommended to read through the <a href=\"../api/#vm-slots\">instance properties API</a> before diving into render functions.</strong></p>\n<h2 id=\"createElement-Arguments\"><a href=\"#createElement-Arguments\" class=\"headerlink\" title=\"createElement Arguments\"></a><code>createElement</code> Arguments</h2><p>The second thing you’ll have to become familiar with is how to use template features in the <code>createElement</code> function. Here are the arguments that <code>createElement</code> accepts:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// @returns &#123;VNode&#125;</span></div><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Object | Function&#125;</span></div><div class=\"line\">  <span class=\"comment\">// An HTML tag name, component options, or function</span></div><div class=\"line\">  <span class=\"comment\">// returning one of these. Required.</span></div><div class=\"line\">  <span class=\"string\">'div'</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// &#123;Object&#125;</span></div><div class=\"line\">  <span class=\"comment\">// A data object corresponding to the attributes</span></div><div class=\"line\">  <span class=\"comment\">// you would use in a template. Optional.</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// (see details in the next section below)</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// &#123;String | Array&#125;</span></div><div class=\"line\">  <span class=\"comment\">// Children VNodes. Optional.</span></div><div class=\"line\">  [</div><div class=\"line\">    createElement(<span class=\"string\">'h1'</span>, <span class=\"string\">'hello world'</span>),</div><div class=\"line\">    createElement(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">someProp</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"string\">'bar'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"The-Data-Object-In-Depth\"><a href=\"#The-Data-Object-In-Depth\" class=\"headerlink\" title=\"The Data Object In-Depth\"></a>The Data Object In-Depth</h3><p>One thing to note: similar to how <code>v-bind:class</code> and <code>v-bind:style</code> have special treatment in templates, they have their own top-level fields in VNode data objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Same API as `v-bind:class`</span></div><div class=\"line\">  <span class=\"string\">'class'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Same API as `v-bind:style`</span></div><div class=\"line\">  style: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'14px'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Normal HTML attributes</span></div><div class=\"line\">  attrs: &#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Component props</span></div><div class=\"line\">  props: &#123;</div><div class=\"line\">    <span class=\"attr\">myProp</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// DOM properties</span></div><div class=\"line\">  domProps: &#123;</div><div class=\"line\">    <span class=\"attr\">innerHTML</span>: <span class=\"string\">'baz'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Event handlers are nested under \"on\", though</span></div><div class=\"line\">  <span class=\"comment\">// modifiers such as in v-on:keyup.enter are not</span></div><div class=\"line\">  <span class=\"comment\">// supported. You'll have to manually check the</span></div><div class=\"line\">  <span class=\"comment\">// keyCode in the handler instead.</span></div><div class=\"line\">  on: &#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"keyword\">this</span>.clickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// For components only. Allows you to listen to</span></div><div class=\"line\">  <span class=\"comment\">// native events, rather than events emitted from</span></div><div class=\"line\">  <span class=\"comment\">// the component using vm.$emit.</span></div><div class=\"line\">  nativeOn: &#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"keyword\">this</span>.nativeClickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Custom directives. Note that the binding's</span></div><div class=\"line\">  <span class=\"comment\">// oldValue cannot be set, as Vue keeps track</span></div><div class=\"line\">  <span class=\"comment\">// of it for you.</span></div><div class=\"line\">  directives: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'my-custom-directive'</span>,</div><div class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">'2'</span></div><div class=\"line\">      expression: <span class=\"string\">'1 + 1'</span>,</div><div class=\"line\">      <span class=\"attr\">arg</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">      <span class=\"attr\">modifiers</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">bar</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">// The name of a slot if the child of a component</span></div><div class=\"line\">  slot: <span class=\"string\">'name-of-slot'</span></div><div class=\"line\">  <span class=\"comment\">// Other special top-level properties</span></div><div class=\"line\">  key: <span class=\"string\">'myKey'</span>,</div><div class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"string\">'myRef'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Complete-Example\"><a href=\"#Complete-Example\" class=\"headerlink\" title=\"Complete Example\"></a>Complete Example</h3><p>With this knowledge, we can now finish the component we started:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.children</div><div class=\"line\">      ? getChildrenTextContent(node.children)</div><div class=\"line\">      : node.text</div><div class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// create kebabCase id</span></div><div class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</div><div class=\"line\">      [</div><div class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</div><div class=\"line\">          <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: headingId,</div><div class=\"line\">            <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + headingId</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      ]</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><h4 id=\"VNodes-Must-Be-Unique\"><a href=\"#VNodes-Must-Be-Unique\" class=\"headerlink\" title=\"VNodes Must Be Unique\"></a>VNodes Must Be Unique</h4><p>All VNodes in the component tree must be unique. That means the following render function is invalid:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myParagraphVNode = createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">    <span class=\"comment\">// Yikes - duplicate VNodes!</span></div><div class=\"line\">    myParagraphVNode, myParagraphVNode</div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>,</div><div class=\"line\">    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">20</span> &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Replacing-Template-Features-with-Plain-JavaScript\"><a href=\"#Replacing-Template-Features-with-Plain-JavaScript\" class=\"headerlink\" title=\"Replacing Template Features with Plain JavaScript\"></a>Replacing Template Features with Plain JavaScript</h2><p>Wherever something can be easily accomplished in plain JavaScript, Vue render functions do not provide a proprietary alternative. For example, in a template using <code>v-if</code> and <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This could be rewritten with JavaScript’s <code>if</code>/<code>else</code> and <code>map</code> in a render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'ul'</span>, <span class=\"keyword\">this</span>.items.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'li'</span>, item.name)</div><div class=\"line\">    &#125;))</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'No items found.'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>If you’re writing a lot of <code>render</code> functions, it might feel painful to write something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">level</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, [</div><div class=\"line\">    createElement(<span class=\"string\">'span'</span>, <span class=\"string\">'Hello'</span>),</div><div class=\"line\">    <span class=\"string\">' world!'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>Especially when the template version is so simple in comparison:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">anchored-heading</span> <span class=\"attr\">:level</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> world!</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">anchored-heading</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>That’s why there’s a <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\" target=\"_blank\" rel=\"external\">Babel plugin</a> to use JSX with Vue, getting us back to a syntax that’s closer to templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">AnchoredHeading</span> <span class=\"attr\">level</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> world!</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">AnchoredHeading</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Aliasing <code>createElement</code> to <code>h</code> is a common convention you’ll see in the Vue ecosystem and is actually required for JSX. If <code>h</code> is not available in the scope, your app will throw an error.</p>\n\n<p>For more on how JSX maps to JavaScript, see the <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage\" target=\"_blank\" rel=\"external\">usage docs</a>.</p>\n<h2 id=\"Functional-Components\"><a href=\"#Functional-Components\" class=\"headerlink\" title=\"Functional Components\"></a>Functional Components</h2><p>The anchored heading component we created earlier is relatively simple. It doesn’t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it’s just a function with some props.</p>\n<p>In cases like this, we can mark components as <code>functional</code>, which means that they’re stateless (no <code>data</code>) and instanceless (no <code>this</code> context). A <strong>functional component</strong> looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"comment\">// To compensate for the lack of an instance,</span></div><div class=\"line\">  <span class=\"comment\">// we are now provided a 2nd context argument.</span></div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Props are optional</span></div><div class=\"line\">  props: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Everything the component needs is passed through <code>context</code>, which is an object containing:</p>\n<ul>\n<li><code>props</code>: An object of the provided props</li>\n<li><code>children</code>: An array of the VNode children</li>\n<li><code>slots</code>: A function returning a slots object</li>\n<li><code>data</code>: The entire data object passed to the component</li>\n<li><code>parent</code>: A reference to the parent component</li>\n</ul>\n<p>After adding <code>functional: true</code>, updating the render function of our anchored heading component would simply require adding the <code>context</code> argument, updating <code>this.$slots.default</code> to <code>context.children</code>, then updating <code>this.level</code> to <code>context.props.level</code>.</p>\n<p>Since functional components are just functions, they’re much cheaper to render. They’re also very useful as wrapper components. For example, when you need to:</p>\n<ul>\n<li>Programmatically choose one of several other components to delegate to</li>\n<li>Manipulate children, props, or data before passing them on to a child component</li>\n</ul>\n<p>Here’s an example of a <code>smart-list</code> component that delegates to more specific components, depending on the props passed to it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EmptyList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> TableList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> OrderedList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> UnorderedList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'smart-list'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appropriateListComponent</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> items = context.props.items</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (items.length === <span class=\"number\">0</span>)           <span class=\"keyword\">return</span> EmptyList</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> items[<span class=\"number\">0</span>] === <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> TableList</div><div class=\"line\">      <span class=\"keyword\">if</span> (context.props.isOrdered)      <span class=\"keyword\">return</span> OrderedList</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> UnorderedList</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      appropriateListComponent(),</div><div class=\"line\">      context.data,</div><div class=\"line\">      context.children</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Array</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">isOrdered</span>: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"slots-vs-children\"><a href=\"#slots-vs-children\" class=\"headerlink\" title=\"slots() vs children\"></a><code>slots()</code> vs <code>children</code></h3><p>You may wonder why we need both <code>slots()</code> and <code>children</code>. Wouldn’t <code>slots().default</code> be the same as <code>children</code>? In some cases, yes - but what if you have a functional component with the following children?</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-functional-component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div><div class=\"line\">    first</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>second<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-functional-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For this component, <code>children</code> will give you both paragraphs, <code>slots().default</code> will give you only the second, and <code>slots().foo</code> will give you only the first. Having both <code>children</code> and <code>slots()</code> therefore allows you to choose whether this component knows about a slot system or perhaps delegates that responsibility to another component by simply passing along <code>children</code>.</p>\n<h2 id=\"Template-Compilation\"><a href=\"#Template-Compilation\" class=\"headerlink\" title=\"Template Compilation\"></a>Template Compilation</h2><p>You may be interested to know that Vue’s templates actually compile to render functions. This is an implementation detail you usually don’t need to know about, but if you’d like to see how specific template features are compiled, you may find it interesting. Below is a little demo using <code>Vue.compile</code> to live-compile a template string:</p>\n\n<div id=\"vue-compile-demo\" class=\"demo\">\n  <textarea v-model=\"templateText\" rows=\"10\"></textarea>\n  <div v-if=\"typeof result === 'object'\">\n    <label>render:</label>\n    <pre><code>{{ result.render }}</code></pre>\n    <label>staticRenderFns:</label>\n    <pre v-for=\"(fn, index) in result.staticRenderFns\"><code>_m({{ index }}): {{ fn }}</code></pre>\n  </div>\n  <div v-else=\"\">\n    <label>Compilation Error:</label>\n    <pre><code>{{ result }}</code></pre>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#vue-compile-demo',\n  data: {\n    templateText: '\\\n<div>\\n\\\n  <h1>I\\'m a template!</h1>\\n\\\n  <p v-if=\"message\">\\n\\\n    {{ message }}\\n\\\n  </p>\\n\\\n  <p v-else>\\n\\\n    No message.\\n\\\n  </p>\\n\\\n</div>\\\n    ',\n  },\n  computed: {\n    result: function () {\n      if (!this.templateText) {\n        return 'Enter a valid template above'\n      }\n      try {\n        var result = Vue.compile(this.templateText.replace(/\\s{2,}/g, ''))\n        return {\n          render: this.formatFunction(result.render),\n          staticRenderFns: result.staticRenderFns.map(this.formatFunction)\n        }\n      } catch (error) {\n        return error.message\n      }\n    }\n  },\n  methods: {\n    formatFunction: function (fn) {\n      return fn.toString().replace(/(\\{\\n)(\\S)/, '$1  $2')\n    }\n  }\n})\nconsole.error = function (error) {\n  throw new Error(error)\n}\n</script>\n<style>\n#vue-compile-demo pre {\n  padding: 10px;\n  overflow-x: auto;\n}\n#vue-compile-demo code {\n  white-space: pre;\n  padding: 0\n}\n#vue-compile-demo textarea {\n  width: 100%;\n\n}\n</style>\n\n","excerpt":"","more":"<h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><p>Vue recommends using templates to build your HTML in the vast majority of cases. There are situations however, where you really need the full programmatic power of JavaScript. That’s where you can use the <strong>render  function</strong>, a closer-to-the-compiler alternative to templates.</p>\n<p>Let’s dive into a simple example where a <code>render</code> function would be practical. Say you want to generate anchored headings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello-world\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#hello-world\"</span>&gt;</span></div><div class=\"line\">    Hello world!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For the HTML above, you decide you want this component interface:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">anchored-heading</span> <span class=\"attr\">:level</span>=<span class=\"string\">\"1\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">anchored-heading</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you get started with a component that just generates a heading based on the <code>level</code> prop, you quickly arrive at this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anchored-heading-template\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 1\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 2\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 3\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 4\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h5</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 5\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"level === 6\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'#anchored-heading-template'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That template doesn’t feel great. It’s not only verbose, but we’re duplicating <code>&lt;slot&gt;&lt;/slot&gt;</code> for every heading level and will have to do the same when we add the anchor element. The whole thing is also wrapped in a useless <code>div</code> because components must contain exactly one root node.</p>\n<p>While templates work great for most components, it’s clear that this isn’t one of them. So let’s try rewriting it with a <code>render</code> function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,   <span class=\"comment\">// tag name</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$slots.default <span class=\"comment\">// array of children</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Much simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a <code>slot</code> attribute into a component, like the <code>Hello world!</code> inside of <code>anchored-heading</code>, those children are stored on the component instance at <code>$slots.default</code>. If you haven’t already, <strong>it’s recommended to read through the <a href=\"../api/#vm-slots\">instance properties API</a> before diving into render functions.</strong></p>\n<h2 id=\"createElement-Arguments\"><a href=\"#createElement-Arguments\" class=\"headerlink\" title=\"createElement Arguments\"></a><code>createElement</code> Arguments</h2><p>The second thing you’ll have to become familiar with is how to use template features in the <code>createElement</code> function. Here are the arguments that <code>createElement</code> accepts:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// @returns &#123;VNode&#125;</span></div><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Object | Function&#125;</span></div><div class=\"line\">  <span class=\"comment\">// An HTML tag name, component options, or function</span></div><div class=\"line\">  <span class=\"comment\">// returning one of these. Required.</span></div><div class=\"line\">  <span class=\"string\">'div'</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// &#123;Object&#125;</span></div><div class=\"line\">  <span class=\"comment\">// A data object corresponding to the attributes</span></div><div class=\"line\">  <span class=\"comment\">// you would use in a template. Optional.</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// (see details in the next section below)</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// &#123;String | Array&#125;</span></div><div class=\"line\">  <span class=\"comment\">// Children VNodes. Optional.</span></div><div class=\"line\">  [</div><div class=\"line\">    createElement(<span class=\"string\">'h1'</span>, <span class=\"string\">'hello world'</span>),</div><div class=\"line\">    createElement(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">someProp</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"string\">'bar'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"The-Data-Object-In-Depth\"><a href=\"#The-Data-Object-In-Depth\" class=\"headerlink\" title=\"The Data Object In-Depth\"></a>The Data Object In-Depth</h3><p>One thing to note: similar to how <code>v-bind:class</code> and <code>v-bind:style</code> have special treatment in templates, they have their own top-level fields in VNode data objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Same API as `v-bind:class`</span></div><div class=\"line\">  <span class=\"string\">'class'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Same API as `v-bind:style`</span></div><div class=\"line\">  style: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>,</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'14px'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Normal HTML attributes</span></div><div class=\"line\">  attrs: &#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Component props</span></div><div class=\"line\">  props: &#123;</div><div class=\"line\">    <span class=\"attr\">myProp</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// DOM properties</span></div><div class=\"line\">  domProps: &#123;</div><div class=\"line\">    <span class=\"attr\">innerHTML</span>: <span class=\"string\">'baz'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Event handlers are nested under \"on\", though</span></div><div class=\"line\">  <span class=\"comment\">// modifiers such as in v-on:keyup.enter are not</span></div><div class=\"line\">  <span class=\"comment\">// supported. You'll have to manually check the</span></div><div class=\"line\">  <span class=\"comment\">// keyCode in the handler instead.</span></div><div class=\"line\">  on: &#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"keyword\">this</span>.clickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// For components only. Allows you to listen to</span></div><div class=\"line\">  <span class=\"comment\">// native events, rather than events emitted from</span></div><div class=\"line\">  <span class=\"comment\">// the component using vm.$emit.</span></div><div class=\"line\">  nativeOn: &#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"keyword\">this</span>.nativeClickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Custom directives. Note that the binding's</span></div><div class=\"line\">  <span class=\"comment\">// oldValue cannot be set, as Vue keeps track</span></div><div class=\"line\">  <span class=\"comment\">// of it for you.</span></div><div class=\"line\">  directives: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">'my-custom-directive'</span>,</div><div class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">'2'</span></div><div class=\"line\">      expression: <span class=\"string\">'1 + 1'</span>,</div><div class=\"line\">      <span class=\"attr\">arg</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">      <span class=\"attr\">modifiers</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">bar</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">// The name of a slot if the child of a component</span></div><div class=\"line\">  slot: <span class=\"string\">'name-of-slot'</span></div><div class=\"line\">  <span class=\"comment\">// Other special top-level properties</span></div><div class=\"line\">  key: <span class=\"string\">'myKey'</span>,</div><div class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"string\">'myRef'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Complete-Example\"><a href=\"#Complete-Example\" class=\"headerlink\" title=\"Complete Example\"></a>Complete Example</h3><p>With this knowledge, we can now finish the component we started:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.children</div><div class=\"line\">      ? getChildrenTextContent(node.children)</div><div class=\"line\">      : node.text</div><div class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// create kebabCase id</span></div><div class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</div><div class=\"line\">      [</div><div class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</div><div class=\"line\">          <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: headingId,</div><div class=\"line\">            <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + headingId</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      ]</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><h4 id=\"VNodes-Must-Be-Unique\"><a href=\"#VNodes-Must-Be-Unique\" class=\"headerlink\" title=\"VNodes Must Be Unique\"></a>VNodes Must Be Unique</h4><p>All VNodes in the component tree must be unique. That means the following render function is invalid:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> myParagraphVNode = createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">    <span class=\"comment\">// Yikes - duplicate VNodes!</span></div><div class=\"line\">    myParagraphVNode, myParagraphVNode</div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>,</div><div class=\"line\">    <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">20</span> &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Replacing-Template-Features-with-Plain-JavaScript\"><a href=\"#Replacing-Template-Features-with-Plain-JavaScript\" class=\"headerlink\" title=\"Replacing Template Features with Plain JavaScript\"></a>Replacing Template Features with Plain JavaScript</h2><p>Wherever something can be easily accomplished in plain JavaScript, Vue render functions do not provide a proprietary alternative. For example, in a template using <code>v-if</code> and <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>No items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This could be rewritten with JavaScript’s <code>if</code>/<code>else</code> and <code>map</code> in a render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'ul'</span>, <span class=\"keyword\">this</span>.items.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> createElement(<span class=\"string\">'li'</span>, item.name)</div><div class=\"line\">    &#125;))</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'p'</span>, <span class=\"string\">'No items found.'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><p>If you’re writing a lot of <code>render</code> functions, it might feel painful to write something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">level</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, [</div><div class=\"line\">    createElement(<span class=\"string\">'span'</span>, <span class=\"string\">'Hello'</span>),</div><div class=\"line\">    <span class=\"string\">' world!'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>Especially when the template version is so simple in comparison:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">anchored-heading</span> <span class=\"attr\">:level</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> world!</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">anchored-heading</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>That’s why there’s a <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">Babel plugin</a> to use JSX with Vue, getting us back to a syntax that’s closer to templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">AnchoredHeading</span> <span class=\"attr\">level</span>=<span class=\"string\">&#123;1&#125;</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> world!</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">AnchoredHeading</span>&gt;</span></span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Aliasing <code>createElement</code> to <code>h</code> is a common convention you’ll see in the Vue ecosystem and is actually required for JSX. If <code>h</code> is not available in the scope, your app will throw an error.</p>\n\n<p>For more on how JSX maps to JavaScript, see the <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage\">usage docs</a>.</p>\n<h2 id=\"Functional-Components\"><a href=\"#Functional-Components\" class=\"headerlink\" title=\"Functional Components\"></a>Functional Components</h2><p>The anchored heading component we created earlier is relatively simple. It doesn’t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it’s just a function with some props.</p>\n<p>In cases like this, we can mark components as <code>functional</code>, which means that they’re stateless (no <code>data</code>) and instanceless (no <code>this</code> context). A <strong>functional component</strong> looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"comment\">// To compensate for the lack of an instance,</span></div><div class=\"line\">  <span class=\"comment\">// we are now provided a 2nd context argument.</span></div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// Props are optional</span></div><div class=\"line\">  props: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Everything the component needs is passed through <code>context</code>, which is an object containing:</p>\n<ul>\n<li><code>props</code>: An object of the provided props</li>\n<li><code>children</code>: An array of the VNode children</li>\n<li><code>slots</code>: A function returning a slots object</li>\n<li><code>data</code>: The entire data object passed to the component</li>\n<li><code>parent</code>: A reference to the parent component</li>\n</ul>\n<p>After adding <code>functional: true</code>, updating the render function of our anchored heading component would simply require adding the <code>context</code> argument, updating <code>this.$slots.default</code> to <code>context.children</code>, then updating <code>this.level</code> to <code>context.props.level</code>.</p>\n<p>Since functional components are just functions, they’re much cheaper to render. They’re also very useful as wrapper components. For example, when you need to:</p>\n<ul>\n<li>Programmatically choose one of several other components to delegate to</li>\n<li>Manipulate children, props, or data before passing them on to a child component</li>\n</ul>\n<p>Here’s an example of a <code>smart-list</code> component that delegates to more specific components, depending on the props passed to it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EmptyList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> TableList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> OrderedList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> UnorderedList = &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\"></div><div class=\"line\">Vue.component(<span class=\"string\">'smart-list'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appropriateListComponent</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> items = context.props.items</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (items.length === <span class=\"number\">0</span>)           <span class=\"keyword\">return</span> EmptyList</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> items[<span class=\"number\">0</span>] === <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> TableList</div><div class=\"line\">      <span class=\"keyword\">if</span> (context.props.isOrdered)      <span class=\"keyword\">return</span> OrderedList</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> UnorderedList</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      appropriateListComponent(),</div><div class=\"line\">      context.data,</div><div class=\"line\">      context.children</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Array</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">isOrdered</span>: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"slots-vs-children\"><a href=\"#slots-vs-children\" class=\"headerlink\" title=\"slots() vs children\"></a><code>slots()</code> vs <code>children</code></h3><p>You may wonder why we need both <code>slots()</code> and <code>children</code>. Wouldn’t <code>slots().default</code> be the same as <code>children</code>? In some cases, yes - but what if you have a functional component with the following children?</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-functional-component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div><div class=\"line\">    first</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>second<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-functional-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For this component, <code>children</code> will give you both paragraphs, <code>slots().default</code> will give you only the second, and <code>slots().foo</code> will give you only the first. Having both <code>children</code> and <code>slots()</code> therefore allows you to choose whether this component knows about a slot system or perhaps delegates that responsibility to another component by simply passing along <code>children</code>.</p>\n<h2 id=\"Template-Compilation\"><a href=\"#Template-Compilation\" class=\"headerlink\" title=\"Template Compilation\"></a>Template Compilation</h2><p>You may be interested to know that Vue’s templates actually compile to render functions. This is an implementation detail you usually don’t need to know about, but if you’d like to see how specific template features are compiled, you may find it interesting. Below is a little demo using <code>Vue.compile</code> to live-compile a template string:</p>\n\n<div id=\"vue-compile-demo\" class=\"demo\">\n  <textarea v-model=\"templateText\" rows=\"10\"></textarea>\n  <div v-if=\"typeof result === 'object'\">\n    <label>render:</label>\n    <pre><code>{{ result.render }}</code></pre>\n    <label>staticRenderFns:</label>\n    <pre v-for=\"(fn, index) in result.staticRenderFns\"><code>_m({{ index }}): {{ fn }}</code></pre>\n  </div>\n  <div v-else>\n    <label>Compilation Error:</label>\n    <pre><code>{{ result }}</code></pre>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#vue-compile-demo',\n  data: {\n    templateText: '\\\n<div>\\n\\\n  <h1>I\\'m a template!</h1>\\n\\\n  <p v-if=\"message\">\\n\\\n    {{ message }}\\n\\\n  </p>\\n\\\n  <p v-else>\\n\\\n    No message.\\n\\\n  </p>\\n\\\n</div>\\\n    ',\n  },\n  computed: {\n    result: function () {\n      if (!this.templateText) {\n        return 'Enter a valid template above'\n      }\n      try {\n        var result = Vue.compile(this.templateText.replace(/\\s{2,}/g, ''))\n        return {\n          render: this.formatFunction(result.render),\n          staticRenderFns: result.staticRenderFns.map(this.formatFunction)\n        }\n      } catch (error) {\n        return error.message\n      }\n    }\n  },\n  methods: {\n    formatFunction: function (fn) {\n      return fn.toString().replace(/(\\{\\n)(\\S)/, '$1  $2')\n    }\n  }\n})\nconsole.error = function (error) {\n  throw new Error(error)\n}\n</script>\n<style>\n#vue-compile-demo pre {\n  padding: 10px;\n  overflow-x: auto;\n}\n#vue-compile-demo code {\n  white-space: pre;\n  padding: 0\n}\n#vue-compile-demo textarea {\n  width: 100%;\n\n}\n</style>\n\n"},{"title":"Routing","type":"guide","order":21,"_content":"\n## Official Router\n\nFor most Single Page Applications, it's recommended to use the officially-supported [vue-router library](https://github.com/vuejs/vue-router). For more details, see vue-router's [documentation](http://vuejs.github.io/vue-router/).\n\n## Simple Routing From Scratch\n\nIf you just need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:\n\n``` js\nconst NotFound = { template: '<p>Page not found</p>' }\nconst Home = { template: '<p>home page</p>' }\nconst About = { template: '<p>about page</p>' }\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nnew Vue({\n  el: '#app',\n  data: {\n    currentRoute: window.location.pathname\n  },\n  computed: {\n    ViewComponent () {\n      return routes[this.currentRoute] || NotFound\n    }\n  },\n  render (h) { return h(this.ViewComponent) }\n})\n```\n\nCombined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out [this example app](https://github.com/chrisvfritz/vue-2.0-simple-routing-example).\n\n## Integrating 3rd-Party Routers\n\nIf there's a 3rd-party router you prefer to use, such as [Page.js](https://github.com/visionmedia/page.js) or [Director](https://github.com/flatiron/director), integration is [similarly easy](https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs). Here's a [complete example](https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs) using Page.js.\n","source":"v2/guide/routing.md","raw":"---\ntitle: Routing\ntype: guide\norder: 21\n---\n\n## Official Router\n\nFor most Single Page Applications, it's recommended to use the officially-supported [vue-router library](https://github.com/vuejs/vue-router). For more details, see vue-router's [documentation](http://vuejs.github.io/vue-router/).\n\n## Simple Routing From Scratch\n\nIf you just need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:\n\n``` js\nconst NotFound = { template: '<p>Page not found</p>' }\nconst Home = { template: '<p>home page</p>' }\nconst About = { template: '<p>about page</p>' }\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nnew Vue({\n  el: '#app',\n  data: {\n    currentRoute: window.location.pathname\n  },\n  computed: {\n    ViewComponent () {\n      return routes[this.currentRoute] || NotFound\n    }\n  },\n  render (h) { return h(this.ViewComponent) }\n})\n```\n\nCombined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out [this example app](https://github.com/chrisvfritz/vue-2.0-simple-routing-example).\n\n## Integrating 3rd-Party Routers\n\nIf there's a 3rd-party router you prefer to use, such as [Page.js](https://github.com/visionmedia/page.js) or [Director](https://github.com/flatiron/director), integration is [similarly easy](https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs). Here's a [complete example](https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs) using Page.js.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/routing.html","comments":1,"layout":"page","_id":"civ8jcjov001b91m1ae5c0zt2","content":"<h2 id=\"Official-Router\"><a href=\"#Official-Router\" class=\"headerlink\" title=\"Official Router\"></a>Official Router</h2><p>For most Single Page Applications, it’s recommended to use the officially-supported <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router library</a>. For more details, see vue-router’s <a href=\"http://vuejs.github.io/vue-router/\" target=\"_blank\" rel=\"external\">documentation</a>.</p>\n<h2 id=\"Simple-Routing-From-Scratch\"><a href=\"#Simple-Routing-From-Scratch\" class=\"headerlink\" title=\"Simple Routing From Scratch\"></a>Simple Routing From Scratch</h2><p>If you just need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> NotFound = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;Page not found&lt;/p&gt;'</span> &#125;</div><div class=\"line\"><span class=\"keyword\">const</span> Home = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;home page&lt;/p&gt;'</span> &#125;</div><div class=\"line\"><span class=\"keyword\">const</span> About = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;about page&lt;/p&gt;'</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes = &#123;</div><div class=\"line\">  <span class=\"string\">'/'</span>: Home,</div><div class=\"line\">  <span class=\"string\">'/about'</span>: About</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentRoute</span>: <span class=\"built_in\">window</span>.location.pathname</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    ViewComponent () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> routes[<span class=\"keyword\">this</span>.currentRoute] || NotFound</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  render (h) &#123; <span class=\"keyword\">return</span> h(<span class=\"keyword\">this</span>.ViewComponent) &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Combined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example\" target=\"_blank\" rel=\"external\">this example app</a>.</p>\n<h2 id=\"Integrating-3rd-Party-Routers\"><a href=\"#Integrating-3rd-Party-Routers\" class=\"headerlink\" title=\"Integrating 3rd-Party Routers\"></a>Integrating 3rd-Party Routers</h2><p>If there’s a 3rd-party router you prefer to use, such as <a href=\"https://github.com/visionmedia/page.js\" target=\"_blank\" rel=\"external\">Page.js</a> or <a href=\"https://github.com/flatiron/director\" target=\"_blank\" rel=\"external\">Director</a>, integration is <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs\" target=\"_blank\" rel=\"external\">similarly easy</a>. Here’s a <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs\" target=\"_blank\" rel=\"external\">complete example</a> using Page.js.</p>\n","excerpt":"","more":"<h2 id=\"Official-Router\"><a href=\"#Official-Router\" class=\"headerlink\" title=\"Official Router\"></a>Official Router</h2><p>For most Single Page Applications, it’s recommended to use the officially-supported <a href=\"https://github.com/vuejs/vue-router\">vue-router library</a>. For more details, see vue-router’s <a href=\"http://vuejs.github.io/vue-router/\">documentation</a>.</p>\n<h2 id=\"Simple-Routing-From-Scratch\"><a href=\"#Simple-Routing-From-Scratch\" class=\"headerlink\" title=\"Simple Routing From Scratch\"></a>Simple Routing From Scratch</h2><p>If you just need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> NotFound = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;Page not found&lt;/p&gt;'</span> &#125;</div><div class=\"line\"><span class=\"keyword\">const</span> Home = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;home page&lt;/p&gt;'</span> &#125;</div><div class=\"line\"><span class=\"keyword\">const</span> About = &#123; <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;about page&lt;/p&gt;'</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes = &#123;</div><div class=\"line\">  <span class=\"string\">'/'</span>: Home,</div><div class=\"line\">  <span class=\"string\">'/about'</span>: About</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">currentRoute</span>: <span class=\"built_in\">window</span>.location.pathname</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    ViewComponent () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> routes[<span class=\"keyword\">this</span>.currentRoute] || NotFound</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  render (h) &#123; <span class=\"keyword\">return</span> h(<span class=\"keyword\">this</span>.ViewComponent) &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Combined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example\">this example app</a>.</p>\n<h2 id=\"Integrating-3rd-Party-Routers\"><a href=\"#Integrating-3rd-Party-Routers\" class=\"headerlink\" title=\"Integrating 3rd-Party Routers\"></a>Integrating 3rd-Party Routers</h2><p>If there’s a 3rd-party router you prefer to use, such as <a href=\"https://github.com/visionmedia/page.js\">Page.js</a> or <a href=\"https://github.com/flatiron/director\">Director</a>, integration is <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs\">similarly easy</a>. Here’s a <a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs\">complete example</a> using Page.js.</p>\n"},{"title":"Single File Components","type":"guide","order":19,"_content":"\n## Introduction\n\nIn many Vue projects, global components will be defined using `Vue.component`, followed by `new Vue({ el: '#container '})` to target a container element in the body of every page.\n\nThis can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:\n\n- **Global definitions** force unique names for every component\n- **String templates** lack syntax highlighting and require ugly slashes for multiline HTML\n- **No CSS support** means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out\n- **No build step** restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel\n\nAll of these are solved by **single-file components** with a `.vue` extension, made possible with build tools such as Webpack or Browserify.\n\nHere's a simple example of a file we'll call `Hello.vue`:\n\n<img src=\"/images/vue-component.png\" style=\"display: block; margin: 30px auto\">\n\nNow we get:\n\n- [Complete syntax highlighting](https://github.com/vuejs/awesome-vue#syntax-highlighting)\n- [CommonJS modules](https://webpack.github.io/docs/commonjs.html)\n- [Component-scoped CSS](https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md)\n\nAs promised, we can also use preprocessors such as Jade, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.\n\n<img src=\"/images/vue-component-with-preprocessors.png\" style=\"display: block; margin: 30px auto\">\n\nThese specific languages are just examples. You could just as easily use Buble, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive.\n\n<!-- TODO: include CSS modules once it's supported in vue-loader 9.x -->\n\n## Getting Started\n\n### For Users New to Module Build Systems in JavaScript\n\nWith `.vue` components, we're entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven't already:\n\n- **Node Package Manager (NPM)**: Read the [Getting Started guide](https://docs.npmjs.com/getting-started/what-is-npm) through section _10: Uninstalling global packages_.\n\n- **Modern JavaScript with ES2015/16**: Read through Babel's [Learn ES2015 guide](https://babeljs.io/docs/learn-es2015/). You don't have to memorize every feature right now, but keep this page as a reference you can come back to.\n\nAfter you've taken a day to dive into these resources, we recommend checking out the [webpack-simple](https://github.com/vuejs-templates/webpack-simple) template. Follow the instructions and you should have a Vue project with `.vue` components, ES2015 and hot-reloading running in no time!\n\nThe template uses [Webpack](https://webpack.github.io/), a module bundler that takes a number of \"modules\" and then bundle them into your final application. To learn more about Webpack itself, [this video](https://www.youtube.com/watch?v=WQue1AN93YU) offers a good intro. Once you get past the basics, you might also want to check out [this advanced Webpack course on Egghead.io](https://egghead.io/courses/using-webpack-for-production-javascript-applications).\n\nIn Webpack, each module can be transformed by a \"loader\" before being included in the bundle, and Vue offers the [vue-loader](https://github.com/vuejs/vue-loader) plugin to take care of translating `.vue` single-file components. The [webpack-simple](https://github.com/vuejs-templates/webpack-simple) template has already set up everything for you, but if you'd like to learn more about how `.vue` components work with Webpack, you can read [the docs for vue-loader](https://vue-loader.vuejs.org).\n\n### For Advanced Users\n\nWhether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing [github.com/vuejs-templates](https://github.com/vuejs-templates), picking a template that's right for you, then following the instructions in the README to generate a new project with [vue-cli](https://github.com/vuejs/vue-cli).\n","source":"v2/guide/single-file-components.md","raw":"---\ntitle: Single File Components\ntype: guide\norder: 19\n---\n\n## Introduction\n\nIn many Vue projects, global components will be defined using `Vue.component`, followed by `new Vue({ el: '#container '})` to target a container element in the body of every page.\n\nThis can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:\n\n- **Global definitions** force unique names for every component\n- **String templates** lack syntax highlighting and require ugly slashes for multiline HTML\n- **No CSS support** means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out\n- **No build step** restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel\n\nAll of these are solved by **single-file components** with a `.vue` extension, made possible with build tools such as Webpack or Browserify.\n\nHere's a simple example of a file we'll call `Hello.vue`:\n\n<img src=\"/images/vue-component.png\" style=\"display: block; margin: 30px auto\">\n\nNow we get:\n\n- [Complete syntax highlighting](https://github.com/vuejs/awesome-vue#syntax-highlighting)\n- [CommonJS modules](https://webpack.github.io/docs/commonjs.html)\n- [Component-scoped CSS](https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md)\n\nAs promised, we can also use preprocessors such as Jade, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.\n\n<img src=\"/images/vue-component-with-preprocessors.png\" style=\"display: block; margin: 30px auto\">\n\nThese specific languages are just examples. You could just as easily use Buble, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive.\n\n<!-- TODO: include CSS modules once it's supported in vue-loader 9.x -->\n\n## Getting Started\n\n### For Users New to Module Build Systems in JavaScript\n\nWith `.vue` components, we're entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven't already:\n\n- **Node Package Manager (NPM)**: Read the [Getting Started guide](https://docs.npmjs.com/getting-started/what-is-npm) through section _10: Uninstalling global packages_.\n\n- **Modern JavaScript with ES2015/16**: Read through Babel's [Learn ES2015 guide](https://babeljs.io/docs/learn-es2015/). You don't have to memorize every feature right now, but keep this page as a reference you can come back to.\n\nAfter you've taken a day to dive into these resources, we recommend checking out the [webpack-simple](https://github.com/vuejs-templates/webpack-simple) template. Follow the instructions and you should have a Vue project with `.vue` components, ES2015 and hot-reloading running in no time!\n\nThe template uses [Webpack](https://webpack.github.io/), a module bundler that takes a number of \"modules\" and then bundle them into your final application. To learn more about Webpack itself, [this video](https://www.youtube.com/watch?v=WQue1AN93YU) offers a good intro. Once you get past the basics, you might also want to check out [this advanced Webpack course on Egghead.io](https://egghead.io/courses/using-webpack-for-production-javascript-applications).\n\nIn Webpack, each module can be transformed by a \"loader\" before being included in the bundle, and Vue offers the [vue-loader](https://github.com/vuejs/vue-loader) plugin to take care of translating `.vue` single-file components. The [webpack-simple](https://github.com/vuejs-templates/webpack-simple) template has already set up everything for you, but if you'd like to learn more about how `.vue` components work with Webpack, you can read [the docs for vue-loader](https://vue-loader.vuejs.org).\n\n### For Advanced Users\n\nWhether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing [github.com/vuejs-templates](https://github.com/vuejs-templates), picking a template that's right for you, then following the instructions in the README to generate a new project with [vue-cli](https://github.com/vuejs/vue-cli).\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/single-file-components.html","comments":1,"layout":"page","_id":"civ8jcjov001c91m11ez0zbyw","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In many Vue projects, global components will be defined using <code>Vue.component</code>, followed by <code>new Vue({ el: &#39;#container &#39;})</code> to target a container element in the body of every page.</p>\n<p>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</p>\n<ul>\n<li><strong>Global definitions</strong> force unique names for every component</li>\n<li><strong>String templates</strong> lack syntax highlighting and require ugly slashes for multiline HTML</li>\n<li><strong>No CSS support</strong> means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</li>\n<li><strong>No build step</strong> restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</li>\n</ul>\n<p>All of these are solved by <strong>single-file components</strong> with a <code>.vue</code> extension, made possible with build tools such as Webpack or Browserify.</p>\n<p>Here’s a simple example of a file we’ll call <code>Hello.vue</code>:</p>\n<p><img src=\"/images/vue-component.png\" style=\"display: block; margin: 30px auto\"></p>\n<p>Now we get:</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/awesome-vue#syntax-highlighting\" target=\"_blank\" rel=\"external\">Complete syntax highlighting</a></li>\n<li><a href=\"https://webpack.github.io/docs/commonjs.html\" target=\"_blank\" rel=\"external\">CommonJS modules</a></li>\n<li><a href=\"https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md\" target=\"_blank\" rel=\"external\">Component-scoped CSS</a></li>\n</ul>\n<p>As promised, we can also use preprocessors such as Jade, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</p>\n<p><img src=\"/images/vue-component-with-preprocessors.png\" style=\"display: block; margin: 30px auto\"></p>\n<p>These specific languages are just examples. You could just as easily use Buble, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive.</p>\n<!-- TODO: include CSS modules once it's supported in vue-loader 9.x -->\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><h3 id=\"For-Users-New-to-Module-Build-Systems-in-JavaScript\"><a href=\"#For-Users-New-to-Module-Build-Systems-in-JavaScript\" class=\"headerlink\" title=\"For Users New to Module Build Systems in JavaScript\"></a>For Users New to Module Build Systems in JavaScript</h3><p>With <code>.vue</code> components, we’re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven’t already:</p>\n<ul>\n<li><p><strong>Node Package Manager (NPM)</strong>: Read the <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"external\">Getting Started guide</a> through section <em>10: Uninstalling global packages</em>.</p>\n</li>\n<li><p><strong>Modern JavaScript with ES2015/16</strong>: Read through Babel’s <a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"external\">Learn ES2015 guide</a>. You don’t have to memorize every feature right now, but keep this page as a reference you can come back to.</p>\n</li>\n</ul>\n<p>After you’ve taken a day to dive into these resources, we recommend checking out the <a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"external\">webpack-simple</a> template. Follow the instructions and you should have a Vue project with <code>.vue</code> components, ES2015 and hot-reloading running in no time!</p>\n<p>The template uses <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a>, a module bundler that takes a number of “modules” and then bundle them into your final application. To learn more about Webpack itself, <a href=\"https://www.youtube.com/watch?v=WQue1AN93YU\" target=\"_blank\" rel=\"external\">this video</a> offers a good intro. Once you get past the basics, you might also want to check out <a href=\"https://egghead.io/courses/using-webpack-for-production-javascript-applications\" target=\"_blank\" rel=\"external\">this advanced Webpack course on Egghead.io</a>.</p>\n<p>In Webpack, each module can be transformed by a “loader” before being included in the bundle, and Vue offers the <a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"external\">vue-loader</a> plugin to take care of translating <code>.vue</code> single-file components. The <a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"external\">webpack-simple</a> template has already set up everything for you, but if you’d like to learn more about how <code>.vue</code> components work with Webpack, you can read <a href=\"https://vue-loader.vuejs.org\" target=\"_blank\" rel=\"external\">the docs for vue-loader</a>.</p>\n<h3 id=\"For-Advanced-Users\"><a href=\"#For-Advanced-Users\" class=\"headerlink\" title=\"For Advanced Users\"></a>For Advanced Users</h3><p>Whether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"external\">github.com/vuejs-templates</a>, picking a template that’s right for you, then following the instructions in the README to generate a new project with <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">vue-cli</a>.</p>\n","excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In many Vue projects, global components will be defined using <code>Vue.component</code>, followed by <code>new Vue({ el: &#39;#container &#39;})</code> to target a container element in the body of every page.</p>\n<p>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</p>\n<ul>\n<li><strong>Global definitions</strong> force unique names for every component</li>\n<li><strong>String templates</strong> lack syntax highlighting and require ugly slashes for multiline HTML</li>\n<li><strong>No CSS support</strong> means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</li>\n<li><strong>No build step</strong> restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</li>\n</ul>\n<p>All of these are solved by <strong>single-file components</strong> with a <code>.vue</code> extension, made possible with build tools such as Webpack or Browserify.</p>\n<p>Here’s a simple example of a file we’ll call <code>Hello.vue</code>:</p>\n<p><img src=\"/images/vue-component.png\" style=\"display: block; margin: 30px auto\"></p>\n<p>Now we get:</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/awesome-vue#syntax-highlighting\">Complete syntax highlighting</a></li>\n<li><a href=\"https://webpack.github.io/docs/commonjs.html\">CommonJS modules</a></li>\n<li><a href=\"https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md\">Component-scoped CSS</a></li>\n</ul>\n<p>As promised, we can also use preprocessors such as Jade, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</p>\n<p><img src=\"/images/vue-component-with-preprocessors.png\" style=\"display: block; margin: 30px auto\"></p>\n<p>These specific languages are just examples. You could just as easily use Buble, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive.</p>\n<!-- TODO: include CSS modules once it's supported in vue-loader 9.x -->\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><h3 id=\"For-Users-New-to-Module-Build-Systems-in-JavaScript\"><a href=\"#For-Users-New-to-Module-Build-Systems-in-JavaScript\" class=\"headerlink\" title=\"For Users New to Module Build Systems in JavaScript\"></a>For Users New to Module Build Systems in JavaScript</h3><p>With <code>.vue</code> components, we’re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven’t already:</p>\n<ul>\n<li><p><strong>Node Package Manager (NPM)</strong>: Read the <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">Getting Started guide</a> through section <em>10: Uninstalling global packages</em>.</p>\n</li>\n<li><p><strong>Modern JavaScript with ES2015/16</strong>: Read through Babel’s <a href=\"https://babeljs.io/docs/learn-es2015/\">Learn ES2015 guide</a>. You don’t have to memorize every feature right now, but keep this page as a reference you can come back to.</p>\n</li>\n</ul>\n<p>After you’ve taken a day to dive into these resources, we recommend checking out the <a href=\"https://github.com/vuejs-templates/webpack-simple\">webpack-simple</a> template. Follow the instructions and you should have a Vue project with <code>.vue</code> components, ES2015 and hot-reloading running in no time!</p>\n<p>The template uses <a href=\"https://webpack.github.io/\">Webpack</a>, a module bundler that takes a number of “modules” and then bundle them into your final application. To learn more about Webpack itself, <a href=\"https://www.youtube.com/watch?v=WQue1AN93YU\">this video</a> offers a good intro. Once you get past the basics, you might also want to check out <a href=\"https://egghead.io/courses/using-webpack-for-production-javascript-applications\">this advanced Webpack course on Egghead.io</a>.</p>\n<p>In Webpack, each module can be transformed by a “loader” before being included in the bundle, and Vue offers the <a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a> plugin to take care of translating <code>.vue</code> single-file components. The <a href=\"https://github.com/vuejs-templates/webpack-simple\">webpack-simple</a> template has already set up everything for you, but if you’d like to learn more about how <code>.vue</code> components work with Webpack, you can read <a href=\"https://vue-loader.vuejs.org\">the docs for vue-loader</a>.</p>\n<h3 id=\"For-Advanced-Users\"><a href=\"#For-Advanced-Users\" class=\"headerlink\" title=\"For Advanced Users\"></a>For Advanced Users</h3><p>Whether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing <a href=\"https://github.com/vuejs-templates\">github.com/vuejs-templates</a>, picking a template that’s right for you, then following the instructions in the README to generate a new project with <a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>.</p>\n"},{"title":"Server-Side Rendering","type":"guide","order":24,"_content":"\n## Do You Need SSR?\n\nBefore diving into SSR, let's explore what it actually does for you and when you might need it.\n\n### SEO\n\nGoogle and Bing can index synchronous JavaScript applications just fine. _Synchronous_ being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish.\n\nThis means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary.\n\n### Clients with a Slow Internet\n\nUsers might come to your site from a remote area with slow Internet - or just with a bad cell connection. In these cases, you'll want to minimize the number and size of requests necessary for users to see basic content.\n\nYou can use [Webpack's code splitting](https://webpack.github.io/docs/code-splitting.html) to avoid forcing users to download your entire application to view a single page, but it still won't be as performant as downloading a single, pre-rendered HTML file.\n\n### Clients with an Old (or Simply No) JavaScript Engine\n\nFor some demographics or areas of the world, using a computer from 1998 to access the Internet might be the only option. While Vue only works with IE9+, you may still want to deliver basic content to those on older browsers - or to hipster hackers using [Lynx](http://lynx.browser.org/) in the terminal.\n\n### SSR vs Prerendering\n\nIf you're only investigating SSR to improve the SEO of a handful of marketing pages (e.g. `/`, `/about`, `/contact`, etc), then you probably want __prerendering__ instead. Rather than using a web server to compile HTML on-the-fly, prerendering simply generates static HTML files for specific routes at build time. The advantage is setting up prerendering is much simpler and allows you to keep your frontend as a fully static site.\n\nIf you're using Webpack, you can easily add prerendering with the [prerender-spa-plugin](https://github.com/chrisvfritz/prerender-spa-plugin). It's been extensively tested with Vue apps - and in fact, the creator is a member of the Vue core team.\n\n## Hello World\n\nIf you've gotten this far, you're ready to see SSR in action. It sounds complex, but a simple node script demoing the feature requires only 3 steps:\n\n``` js\n// Step 1: Create a Vue instance\nvar Vue = require('vue')\nvar app = new Vue({\n  render: function (h) {\n    return h('p', 'hello world')\n  }\n})\n\n// Step 2: Create a renderer\nvar renderer = require('vue-server-renderer').createRenderer()\n\n// Step 3: Render the Vue instance to HTML\nrenderer.renderToString(app, function (error, html) {\n  if (error) throw error\n  console.log(html)\n  // => <p server-rendered=\"true\">hello world</p>\n})\n```\n\nNot so scary, right? Of course, this example is much simpler than most applications. We don't yet have to worry about:\n\n- A Web Server\n- Response Streaming\n- Component Caching\n- A Build Process\n- Routing\n- Vuex State Hydration\n\nIn the rest of this guide, we'll walk through how to work with some of these features. Once you understand the basics, we'll then direct you to more detailed documentation and advanced examples to help you handle edge cases.\n\n## Simple SSR with the Express Web Server\n\nIt's kind of a stretch to call it \"server-side rendering\" when we don't actually have a web server, so let's fix that. We'll build a very simple SSR app, using only ES5 and without any build step or Vue plugins.\n\nWe'll start off with an app that just tells the user how many seconds they've been on the page:\n\n``` js\nnew Vue({\n  template: '<div>You have been here for {{ counter }} seconds.</div>',\n  data: {\n    counter: 0\n  },\n  created: function () {\n    var vm = this\n    setInterval(function () {\n      vm.counter += 1\n    }, 1000)\n  }\n})\n```\n\nTo adapt this for SSR, there are a few modifications we'll have to make, so that it will work both in the browser and within node:\n\n- When in the browser, add an instance of our app to the global context (i.e. `window`), so that we can mount it.\n- When in node, export a factory function so that we can create a fresh instance of the app for every request.\n\nAccomplishing this requires a little boilerplate:\n\n``` js\n// assets/app.js\n(function () { 'use strict'\n  var createApp = function () {\n    // ---------------------\n    // BEGIN NORMAL APP CODE\n    // ---------------------\n\n    // Main Vue instance must be returned and have a root\n    // node with the id \"app\", so that the client-side\n    // version can take over once it loads.\n    return new Vue({\n      template: '<div id=\"app\">You have been here for {{ counter }} seconds.</div>',\n      data: {\n        counter: 0\n      },\n      created: function () {\n        var vm = this\n        setInterval(function () {\n          vm.counter += 1\n        }, 1000)\n      }\n    })\n\n    // -------------------\n    // END NORMAL APP CODE\n    // -------------------\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = createApp\n  } else {\n    this.app = createApp()\n  }\n}).call(this)\n```\n\nNow that we have our application code, let's put together an `index.html` file:\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Vue App</title>\n  <script src=\"/assets/vue.js\"></script>\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"/assets/app.js\"></script>\n  <script>app.$mount('#app')</script>\n</body>\n</html>\n```\n\nAs long as the referenced `assets` directory contains the `app.js` file we created earlier, as well as a `vue.js` file with Vue, we should now have a working single-page application!\n\nThen to get it working with server-side rendering, there's just one more step - the web server:\n\n``` js\n// server.js\n'use strict'\n\nvar fs = require('fs')\nvar path = require('path')\n\n// Define global Vue for server-side app.js\nglobal.Vue = require('vue')\n\n// Get the HTML layout\nvar layout = fs.readFileSync('./index.html', 'utf8')\n\n// Create a renderer\nvar renderer = require('vue-server-renderer').createRenderer()\n\n// Create an express server\nvar express = require('express')\nvar server = express()\n\n// Serve files from the assets directory\nserver.use('/assets', express.static(\n  path.resolve(__dirname, 'assets')\n))\n\n// Handle all GET requests\nserver.get('*', function (request, response) {\n  // Render our Vue app to a string\n  renderer.renderToString(\n    // Create an app instance\n    require('./assets/app')(),\n    // Handle the rendered result\n    function (error, html) {\n      // If an error occurred while rendering...\n      if (error) {\n        // Log the error in the console\n        console.error(error)\n        // Tell the client something went wrong\n        return response\n          .status(500)\n          .send('Server Error')\n      }\n      // Send the layout with the rendered app's HTML\n      response.send(layout.replace('<div id=\"app\"></div>', html))\n    }\n  )\n})\n\n// Listen on port 5000\nserver.listen(5000, function (error) {\n  if (error) throw error\n  console.log('Server is running at localhost:5000')\n})\n```\n\nAnd that's it! Here's [the full application](https://github.com/chrisvfritz/vue-ssr-demo-simple), in case you'd like to clone it and experiment further. Once you have it running locally, you can confirm that server-side rendering really is working by right-clicking on the page and selecting `View Page Source` (or similar). You should see this in the body:\n\n``` html\n<div id=\"app\" server-rendered=\"true\">You have been here for 0 seconds&period;</div>\n```\n\ninstead of:\n\n``` html\n<div id=\"app\"></div>\n```\n\n## Response Streaming\n\nVue also supports rendering to a __stream__, which is preferred for web servers that support streaming. This allows HTML to be written to the response _as it's generated_, rather than all at once at the end. The result is requests are served faster, with no downsides!\n\nTo adapt our app from the previous section for streaming, we can simply replace the `server.get('*', ...)` block with the following:\n\n``` js\n// Split the layout into two sections of HTML\nvar layoutSections = layout.split('<div id=\"app\"></div>')\nvar preAppHTML = layoutSections[0]\nvar postAppHTML = layoutSections[1]\n\n// Handle all GET requests\nserver.get('*', function (request, response) {\n  // Render our Vue app to a stream\n  var stream = renderer.renderToStream(require('./assets/app')())\n\n  // Write the pre-app HTML to the response\n  response.write(preAppHTML)\n\n  // Whenever new chunks are rendered...\n  stream.on('data', function (chunk) {\n    // Write the chunk to the response\n    response.write(chunk)\n  })\n\n  // When all chunks are rendered...\n  stream.on('end', function () {\n    // Write the post-app HTML to the response\n    response.end(postAppHTML)\n  })\n\n  // If an error occurs while rendering...\n  stream.on('error', function (error) {\n    // Log the error in the console\n    console.error(error)\n    // Tell the client something went wrong\n    return response\n      .status(500)\n      .send('Server Error')\n  })\n})\n```\n\nAs you can see, it's not much more complicated than the previous version, even if streams may be conceptually new to you. We just:\n\n1. Set up the stream\n2. Write the HTML that comes before the app to the response\n3. Write the app HTML to the response as it becomes available\n4. Write the HTML that comes after the app to the response and end it\n5. Handle any errors\n\n## Component Caching\n\nVue's SSR is very fast by default, but you can further improve performance by caching rendered components. This should be considered an advanced feature however, as caching the wrong components (or the right components with the wrong key) could lead to misrendering your app. Specifically:\n\n<p class=\"tip\">You should not cache a component containing child components that rely on global state (e.g. from a vuex store). If you do, those child components (and in fact, the entire sub-tree) will be cached as well. Be especially wary with components that accept slots/children.</p>\n\n### Setup\n\nWith that warning out of the way, here's how you cache components.\n\nFirst, you'll need to provide your renderer with a [cache object](https://www.npmjs.com/package/vue-server-renderer#cache). Here's a simple example using [lru-cache](https://github.com/isaacs/node-lru-cache):\n\n``` js\nvar createRenderer = require('vue-server-renderer').createRenderer\nvar lru = require('lru-cache')\n\nvar renderer = createRenderer({\n  cache: lru(1000)\n})\n```\n\nThat will cache up to 1000 unique renders. For other configurations that more closely align to memory usage, see [the lru-cache options](https://github.com/isaacs/node-lru-cache#options).\n\nThen for components you want to cache, you must provide them with:\n\n- a unique `name`\n- a `serverCacheKey` function, returning a unique key scoped to the component\n\nFor example:\n\n``` js\nVue.component({\n  name: 'list-item',\n  template: '<li>{{ item.name }}</li>',\n  props: ['item'],\n  serverCacheKey: function (props) {\n    return props.item.type + '::' + props.item.id\n  }\n})\n```\n\n### Ideal Components for Caching\n\nAny \"pure\" component can be safely cached - that is, any component that is guaranteed to generate the same HTML given the same props. Common examples of these include:\n\n- Static components (i.e. they always generate the same HTML, so the `serverCacheKey` function can just return `true`)\n- List item components (when part of large lists, caching these can significantly improve performance)\n- Generic UI components (e.g. buttons, alerts, etc - at least those that accept content through props rather than slots/children)\n\n## Build Process, Routing, and Vuex State Hydration\n\nBy now, you should understand the fundamental concepts behind server-side rendering. However, as you introduce a build process, routing, and vuex, each introduces its own considerations.\n\nTo truly master server-side rendering in complex applications, we recommend a deep dive into the following resources:\n\n- [vue-server-renderer docs](https://www.npmjs.com/package/vue-server-renderer#api): more details on topics covered here, as well as documentation of more advanced topics, such as [preventing cross-request contamination](https://www.npmjs.com/package/vue-server-renderer#why-use-bundlerenderer) and [adding a separate server build](https://www.npmjs.com/package/vue-server-renderer#creating-the-server-bundle)\n- [vue-hackernews-2.0](https://github.com/vuejs/vue-hackernews-2.0): the definitive example of integrating all major Vue libraries and concepts in a single application\n","source":"v2/guide/ssr.md","raw":"---\ntitle: Server-Side Rendering\ntype: guide\norder: 24\n---\n\n## Do You Need SSR?\n\nBefore diving into SSR, let's explore what it actually does for you and when you might need it.\n\n### SEO\n\nGoogle and Bing can index synchronous JavaScript applications just fine. _Synchronous_ being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish.\n\nThis means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary.\n\n### Clients with a Slow Internet\n\nUsers might come to your site from a remote area with slow Internet - or just with a bad cell connection. In these cases, you'll want to minimize the number and size of requests necessary for users to see basic content.\n\nYou can use [Webpack's code splitting](https://webpack.github.io/docs/code-splitting.html) to avoid forcing users to download your entire application to view a single page, but it still won't be as performant as downloading a single, pre-rendered HTML file.\n\n### Clients with an Old (or Simply No) JavaScript Engine\n\nFor some demographics or areas of the world, using a computer from 1998 to access the Internet might be the only option. While Vue only works with IE9+, you may still want to deliver basic content to those on older browsers - or to hipster hackers using [Lynx](http://lynx.browser.org/) in the terminal.\n\n### SSR vs Prerendering\n\nIf you're only investigating SSR to improve the SEO of a handful of marketing pages (e.g. `/`, `/about`, `/contact`, etc), then you probably want __prerendering__ instead. Rather than using a web server to compile HTML on-the-fly, prerendering simply generates static HTML files for specific routes at build time. The advantage is setting up prerendering is much simpler and allows you to keep your frontend as a fully static site.\n\nIf you're using Webpack, you can easily add prerendering with the [prerender-spa-plugin](https://github.com/chrisvfritz/prerender-spa-plugin). It's been extensively tested with Vue apps - and in fact, the creator is a member of the Vue core team.\n\n## Hello World\n\nIf you've gotten this far, you're ready to see SSR in action. It sounds complex, but a simple node script demoing the feature requires only 3 steps:\n\n``` js\n// Step 1: Create a Vue instance\nvar Vue = require('vue')\nvar app = new Vue({\n  render: function (h) {\n    return h('p', 'hello world')\n  }\n})\n\n// Step 2: Create a renderer\nvar renderer = require('vue-server-renderer').createRenderer()\n\n// Step 3: Render the Vue instance to HTML\nrenderer.renderToString(app, function (error, html) {\n  if (error) throw error\n  console.log(html)\n  // => <p server-rendered=\"true\">hello world</p>\n})\n```\n\nNot so scary, right? Of course, this example is much simpler than most applications. We don't yet have to worry about:\n\n- A Web Server\n- Response Streaming\n- Component Caching\n- A Build Process\n- Routing\n- Vuex State Hydration\n\nIn the rest of this guide, we'll walk through how to work with some of these features. Once you understand the basics, we'll then direct you to more detailed documentation and advanced examples to help you handle edge cases.\n\n## Simple SSR with the Express Web Server\n\nIt's kind of a stretch to call it \"server-side rendering\" when we don't actually have a web server, so let's fix that. We'll build a very simple SSR app, using only ES5 and without any build step or Vue plugins.\n\nWe'll start off with an app that just tells the user how many seconds they've been on the page:\n\n``` js\nnew Vue({\n  template: '<div>You have been here for {{ counter }} seconds.</div>',\n  data: {\n    counter: 0\n  },\n  created: function () {\n    var vm = this\n    setInterval(function () {\n      vm.counter += 1\n    }, 1000)\n  }\n})\n```\n\nTo adapt this for SSR, there are a few modifications we'll have to make, so that it will work both in the browser and within node:\n\n- When in the browser, add an instance of our app to the global context (i.e. `window`), so that we can mount it.\n- When in node, export a factory function so that we can create a fresh instance of the app for every request.\n\nAccomplishing this requires a little boilerplate:\n\n``` js\n// assets/app.js\n(function () { 'use strict'\n  var createApp = function () {\n    // ---------------------\n    // BEGIN NORMAL APP CODE\n    // ---------------------\n\n    // Main Vue instance must be returned and have a root\n    // node with the id \"app\", so that the client-side\n    // version can take over once it loads.\n    return new Vue({\n      template: '<div id=\"app\">You have been here for {{ counter }} seconds.</div>',\n      data: {\n        counter: 0\n      },\n      created: function () {\n        var vm = this\n        setInterval(function () {\n          vm.counter += 1\n        }, 1000)\n      }\n    })\n\n    // -------------------\n    // END NORMAL APP CODE\n    // -------------------\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = createApp\n  } else {\n    this.app = createApp()\n  }\n}).call(this)\n```\n\nNow that we have our application code, let's put together an `index.html` file:\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Vue App</title>\n  <script src=\"/assets/vue.js\"></script>\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"/assets/app.js\"></script>\n  <script>app.$mount('#app')</script>\n</body>\n</html>\n```\n\nAs long as the referenced `assets` directory contains the `app.js` file we created earlier, as well as a `vue.js` file with Vue, we should now have a working single-page application!\n\nThen to get it working with server-side rendering, there's just one more step - the web server:\n\n``` js\n// server.js\n'use strict'\n\nvar fs = require('fs')\nvar path = require('path')\n\n// Define global Vue for server-side app.js\nglobal.Vue = require('vue')\n\n// Get the HTML layout\nvar layout = fs.readFileSync('./index.html', 'utf8')\n\n// Create a renderer\nvar renderer = require('vue-server-renderer').createRenderer()\n\n// Create an express server\nvar express = require('express')\nvar server = express()\n\n// Serve files from the assets directory\nserver.use('/assets', express.static(\n  path.resolve(__dirname, 'assets')\n))\n\n// Handle all GET requests\nserver.get('*', function (request, response) {\n  // Render our Vue app to a string\n  renderer.renderToString(\n    // Create an app instance\n    require('./assets/app')(),\n    // Handle the rendered result\n    function (error, html) {\n      // If an error occurred while rendering...\n      if (error) {\n        // Log the error in the console\n        console.error(error)\n        // Tell the client something went wrong\n        return response\n          .status(500)\n          .send('Server Error')\n      }\n      // Send the layout with the rendered app's HTML\n      response.send(layout.replace('<div id=\"app\"></div>', html))\n    }\n  )\n})\n\n// Listen on port 5000\nserver.listen(5000, function (error) {\n  if (error) throw error\n  console.log('Server is running at localhost:5000')\n})\n```\n\nAnd that's it! Here's [the full application](https://github.com/chrisvfritz/vue-ssr-demo-simple), in case you'd like to clone it and experiment further. Once you have it running locally, you can confirm that server-side rendering really is working by right-clicking on the page and selecting `View Page Source` (or similar). You should see this in the body:\n\n``` html\n<div id=\"app\" server-rendered=\"true\">You have been here for 0 seconds&period;</div>\n```\n\ninstead of:\n\n``` html\n<div id=\"app\"></div>\n```\n\n## Response Streaming\n\nVue also supports rendering to a __stream__, which is preferred for web servers that support streaming. This allows HTML to be written to the response _as it's generated_, rather than all at once at the end. The result is requests are served faster, with no downsides!\n\nTo adapt our app from the previous section for streaming, we can simply replace the `server.get('*', ...)` block with the following:\n\n``` js\n// Split the layout into two sections of HTML\nvar layoutSections = layout.split('<div id=\"app\"></div>')\nvar preAppHTML = layoutSections[0]\nvar postAppHTML = layoutSections[1]\n\n// Handle all GET requests\nserver.get('*', function (request, response) {\n  // Render our Vue app to a stream\n  var stream = renderer.renderToStream(require('./assets/app')())\n\n  // Write the pre-app HTML to the response\n  response.write(preAppHTML)\n\n  // Whenever new chunks are rendered...\n  stream.on('data', function (chunk) {\n    // Write the chunk to the response\n    response.write(chunk)\n  })\n\n  // When all chunks are rendered...\n  stream.on('end', function () {\n    // Write the post-app HTML to the response\n    response.end(postAppHTML)\n  })\n\n  // If an error occurs while rendering...\n  stream.on('error', function (error) {\n    // Log the error in the console\n    console.error(error)\n    // Tell the client something went wrong\n    return response\n      .status(500)\n      .send('Server Error')\n  })\n})\n```\n\nAs you can see, it's not much more complicated than the previous version, even if streams may be conceptually new to you. We just:\n\n1. Set up the stream\n2. Write the HTML that comes before the app to the response\n3. Write the app HTML to the response as it becomes available\n4. Write the HTML that comes after the app to the response and end it\n5. Handle any errors\n\n## Component Caching\n\nVue's SSR is very fast by default, but you can further improve performance by caching rendered components. This should be considered an advanced feature however, as caching the wrong components (or the right components with the wrong key) could lead to misrendering your app. Specifically:\n\n<p class=\"tip\">You should not cache a component containing child components that rely on global state (e.g. from a vuex store). If you do, those child components (and in fact, the entire sub-tree) will be cached as well. Be especially wary with components that accept slots/children.</p>\n\n### Setup\n\nWith that warning out of the way, here's how you cache components.\n\nFirst, you'll need to provide your renderer with a [cache object](https://www.npmjs.com/package/vue-server-renderer#cache). Here's a simple example using [lru-cache](https://github.com/isaacs/node-lru-cache):\n\n``` js\nvar createRenderer = require('vue-server-renderer').createRenderer\nvar lru = require('lru-cache')\n\nvar renderer = createRenderer({\n  cache: lru(1000)\n})\n```\n\nThat will cache up to 1000 unique renders. For other configurations that more closely align to memory usage, see [the lru-cache options](https://github.com/isaacs/node-lru-cache#options).\n\nThen for components you want to cache, you must provide them with:\n\n- a unique `name`\n- a `serverCacheKey` function, returning a unique key scoped to the component\n\nFor example:\n\n``` js\nVue.component({\n  name: 'list-item',\n  template: '<li>{{ item.name }}</li>',\n  props: ['item'],\n  serverCacheKey: function (props) {\n    return props.item.type + '::' + props.item.id\n  }\n})\n```\n\n### Ideal Components for Caching\n\nAny \"pure\" component can be safely cached - that is, any component that is guaranteed to generate the same HTML given the same props. Common examples of these include:\n\n- Static components (i.e. they always generate the same HTML, so the `serverCacheKey` function can just return `true`)\n- List item components (when part of large lists, caching these can significantly improve performance)\n- Generic UI components (e.g. buttons, alerts, etc - at least those that accept content through props rather than slots/children)\n\n## Build Process, Routing, and Vuex State Hydration\n\nBy now, you should understand the fundamental concepts behind server-side rendering. However, as you introduce a build process, routing, and vuex, each introduces its own considerations.\n\nTo truly master server-side rendering in complex applications, we recommend a deep dive into the following resources:\n\n- [vue-server-renderer docs](https://www.npmjs.com/package/vue-server-renderer#api): more details on topics covered here, as well as documentation of more advanced topics, such as [preventing cross-request contamination](https://www.npmjs.com/package/vue-server-renderer#why-use-bundlerenderer) and [adding a separate server build](https://www.npmjs.com/package/vue-server-renderer#creating-the-server-bundle)\n- [vue-hackernews-2.0](https://github.com/vuejs/vue-hackernews-2.0): the definitive example of integrating all major Vue libraries and concepts in a single application\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/ssr.html","comments":1,"layout":"page","_id":"civ8jcjow001d91m1gwunjgcq","content":"<h2 id=\"Do-You-Need-SSR\"><a href=\"#Do-You-Need-SSR\" class=\"headerlink\" title=\"Do You Need SSR?\"></a>Do You Need SSR?</h2><p>Before diving into SSR, let’s explore what it actually does for you and when you might need it.</p>\n<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3><p>Google and Bing can index synchronous JavaScript applications just fine. <em>Synchronous</em> being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish.</p>\n<p>This means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary.</p>\n<h3 id=\"Clients-with-a-Slow-Internet\"><a href=\"#Clients-with-a-Slow-Internet\" class=\"headerlink\" title=\"Clients with a Slow Internet\"></a>Clients with a Slow Internet</h3><p>Users might come to your site from a remote area with slow Internet - or just with a bad cell connection. In these cases, you’ll want to minimize the number and size of requests necessary for users to see basic content.</p>\n<p>You can use <a href=\"https://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">Webpack’s code splitting</a> to avoid forcing users to download your entire application to view a single page, but it still won’t be as performant as downloading a single, pre-rendered HTML file.</p>\n<h3 id=\"Clients-with-an-Old-or-Simply-No-JavaScript-Engine\"><a href=\"#Clients-with-an-Old-or-Simply-No-JavaScript-Engine\" class=\"headerlink\" title=\"Clients with an Old (or Simply No) JavaScript Engine\"></a>Clients with an Old (or Simply No) JavaScript Engine</h3><p>For some demographics or areas of the world, using a computer from 1998 to access the Internet might be the only option. While Vue only works with IE9+, you may still want to deliver basic content to those on older browsers - or to hipster hackers using <a href=\"http://lynx.browser.org/\" target=\"_blank\" rel=\"external\">Lynx</a> in the terminal.</p>\n<h3 id=\"SSR-vs-Prerendering\"><a href=\"#SSR-vs-Prerendering\" class=\"headerlink\" title=\"SSR vs Prerendering\"></a>SSR vs Prerendering</h3><p>If you’re only investigating SSR to improve the SEO of a handful of marketing pages (e.g. <code>/</code>, <code>/about</code>, <code>/contact</code>, etc), then you probably want <strong>prerendering</strong> instead. Rather than using a web server to compile HTML on-the-fly, prerendering simply generates static HTML files for specific routes at build time. The advantage is setting up prerendering is much simpler and allows you to keep your frontend as a fully static site.</p>\n<p>If you’re using Webpack, you can easily add prerendering with the <a href=\"https://github.com/chrisvfritz/prerender-spa-plugin\" target=\"_blank\" rel=\"external\">prerender-spa-plugin</a>. It’s been extensively tested with Vue apps - and in fact, the creator is a member of the Vue core team.</p>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>If you’ve gotten this far, you’re ready to see SSR in action. It sounds complex, but a simple node script demoing the feature requires only 3 steps:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1: Create a Vue instance</span></div><div class=\"line\"><span class=\"keyword\">var</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'p'</span>, <span class=\"string\">'hello world'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Step 2: Create a renderer</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Step 3: Render the Vue instance to HTML</span></div><div class=\"line\">renderer.renderToString(app, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, html</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(html)</div><div class=\"line\">  <span class=\"comment\">// =&gt; &lt;p server-rendered=\"true\"&gt;hello world&lt;/p&gt;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Not so scary, right? Of course, this example is much simpler than most applications. We don’t yet have to worry about:</p>\n<ul>\n<li>A Web Server</li>\n<li>Response Streaming</li>\n<li>Component Caching</li>\n<li>A Build Process</li>\n<li>Routing</li>\n<li>Vuex State Hydration</li>\n</ul>\n<p>In the rest of this guide, we’ll walk through how to work with some of these features. Once you understand the basics, we’ll then direct you to more detailed documentation and advanced examples to help you handle edge cases.</p>\n<h2 id=\"Simple-SSR-with-the-Express-Web-Server\"><a href=\"#Simple-SSR-with-the-Express-Web-Server\" class=\"headerlink\" title=\"Simple SSR with the Express Web Server\"></a>Simple SSR with the Express Web Server</h2><p>It’s kind of a stretch to call it “server-side rendering” when we don’t actually have a web server, so let’s fix that. We’ll build a very simple SSR app, using only ES5 and without any build step or Vue plugins.</p>\n<p>We’ll start off with an app that just tells the user how many seconds they’ve been on the page:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;You have been here for &#123;&#123; counter &#125;&#125; seconds.&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      vm.counter += <span class=\"number\">1</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To adapt this for SSR, there are a few modifications we’ll have to make, so that it will work both in the browser and within node:</p>\n<ul>\n<li>When in the browser, add an instance of our app to the global context (i.e. <code>window</code>), so that we can mount it.</li>\n<li>When in node, export a factory function so that we can create a fresh instance of the app for every request.</li>\n</ul>\n<p>Accomplishing this requires a little boilerplate:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assets/app.js</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"string\">'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createApp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ---------------------</span></div><div class=\"line\">    <span class=\"comment\">// BEGIN NORMAL APP CODE</span></div><div class=\"line\">    <span class=\"comment\">// ---------------------</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Main Vue instance must be returned and have a root</span></div><div class=\"line\">    <span class=\"comment\">// node with the id \"app\", so that the client-side</span></div><div class=\"line\">    <span class=\"comment\">// version can take over once it loads.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div id=\"app\"&gt;You have been here for &#123;&#123; counter &#125;&#125; seconds.&lt;/div&gt;'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">        setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.counter += <span class=\"number\">1</span></div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// -------------------</span></div><div class=\"line\">    <span class=\"comment\">// END NORMAL APP CODE</span></div><div class=\"line\">    <span class=\"comment\">// -------------------</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = createApp</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.app = createApp()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).call(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure>\n<p>Now that we have our application code, let’s put together an <code>index.html</code> file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My Vue App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">app.$mount(<span class=\"string\">'#app'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As long as the referenced <code>assets</code> directory contains the <code>app.js</code> file we created earlier, as well as a <code>vue.js</code> file with Vue, we should now have a working single-page application!</p>\n<p>Then to get it working with server-side rendering, there’s just one more step - the web server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server.js</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Define global Vue for server-side app.js</span></div><div class=\"line\">global.Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Get the HTML layout</span></div><div class=\"line\"><span class=\"keyword\">var</span> layout = fs.readFileSync(<span class=\"string\">'./index.html'</span>, <span class=\"string\">'utf8'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create a renderer</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create an express server</span></div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> server = express()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Serve files from the assets directory</span></div><div class=\"line\">server.use(<span class=\"string\">'/assets'</span>, express.static(</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'assets'</span>)</div><div class=\"line\">))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle all GET requests</span></div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Render our Vue app to a string</span></div><div class=\"line\">  renderer.renderToString(</div><div class=\"line\">    <span class=\"comment\">// Create an app instance</span></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./assets/app'</span>)(),</div><div class=\"line\">    <span class=\"comment\">// Handle the rendered result</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, html</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// If an error occurred while rendering...</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"comment\">// Log the error in the console</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.error(error)</div><div class=\"line\">        <span class=\"comment\">// Tell the client something went wrong</span></div><div class=\"line\">        <span class=\"keyword\">return</span> response</div><div class=\"line\">          .status(<span class=\"number\">500</span>)</div><div class=\"line\">          .send(<span class=\"string\">'Server Error'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// Send the layout with the rendered app's HTML</span></div><div class=\"line\">      response.send(layout.replace(<span class=\"string\">'&lt;div id=\"app\"&gt;&lt;/div&gt;'</span>, html))</div><div class=\"line\">    &#125;</div><div class=\"line\">  )</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Listen on port 5000</span></div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at localhost:5000'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>And that’s it! Here’s <a href=\"https://github.com/chrisvfritz/vue-ssr-demo-simple\" target=\"_blank\" rel=\"external\">the full application</a>, in case you’d like to clone it and experiment further. Once you have it running locally, you can confirm that server-side rendering really is working by right-clicking on the page and selecting <code>View Page Source</code> (or similar). You should see this in the body:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">server-rendered</span>=<span class=\"string\">\"true\"</span>&gt;</span>You have been here for 0 seconds&amp;period;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Response-Streaming\"><a href=\"#Response-Streaming\" class=\"headerlink\" title=\"Response Streaming\"></a>Response Streaming</h2><p>Vue also supports rendering to a <strong>stream</strong>, which is preferred for web servers that support streaming. This allows HTML to be written to the response <em>as it’s generated</em>, rather than all at once at the end. The result is requests are served faster, with no downsides!</p>\n<p>To adapt our app from the previous section for streaming, we can simply replace the <code>server.get(&#39;*&#39;, ...)</code> block with the following:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Split the layout into two sections of HTML</span></div><div class=\"line\"><span class=\"keyword\">var</span> layoutSections = layout.split(<span class=\"string\">'&lt;div id=\"app\"&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> preAppHTML = layoutSections[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> postAppHTML = layoutSections[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle all GET requests</span></div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Render our Vue app to a stream</span></div><div class=\"line\">  <span class=\"keyword\">var</span> stream = renderer.renderToStream(<span class=\"built_in\">require</span>(<span class=\"string\">'./assets/app'</span>)())</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Write the pre-app HTML to the response</span></div><div class=\"line\">  response.write(preAppHTML)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Whenever new chunks are rendered...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Write the chunk to the response</span></div><div class=\"line\">    response.write(chunk)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When all chunks are rendered...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Write the post-app HTML to the response</span></div><div class=\"line\">    response.end(postAppHTML)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// If an error occurs while rendering...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the error in the console</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.error(error)</div><div class=\"line\">    <span class=\"comment\">// Tell the client something went wrong</span></div><div class=\"line\">    <span class=\"keyword\">return</span> response</div><div class=\"line\">      .status(<span class=\"number\">500</span>)</div><div class=\"line\">      .send(<span class=\"string\">'Server Error'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>As you can see, it’s not much more complicated than the previous version, even if streams may be conceptually new to you. We just:</p>\n<ol>\n<li>Set up the stream</li>\n<li>Write the HTML that comes before the app to the response</li>\n<li>Write the app HTML to the response as it becomes available</li>\n<li>Write the HTML that comes after the app to the response and end it</li>\n<li>Handle any errors</li>\n</ol>\n<h2 id=\"Component-Caching\"><a href=\"#Component-Caching\" class=\"headerlink\" title=\"Component Caching\"></a>Component Caching</h2><p>Vue’s SSR is very fast by default, but you can further improve performance by caching rendered components. This should be considered an advanced feature however, as caching the wrong components (or the right components with the wrong key) could lead to misrendering your app. Specifically:</p>\n<p class=\"tip\">You should not cache a component containing child components that rely on global state (e.g. from a vuex store). If you do, those child components (and in fact, the entire sub-tree) will be cached as well. Be especially wary with components that accept slots/children.</p>\n\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h3><p>With that warning out of the way, here’s how you cache components.</p>\n<p>First, you’ll need to provide your renderer with a <a href=\"https://www.npmjs.com/package/vue-server-renderer#cache\" target=\"_blank\" rel=\"external\">cache object</a>. Here’s a simple example using <a href=\"https://github.com/isaacs/node-lru-cache\" target=\"_blank\" rel=\"external\">lru-cache</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createRenderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer</div><div class=\"line\"><span class=\"keyword\">var</span> lru = <span class=\"built_in\">require</span>(<span class=\"string\">'lru-cache'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = createRenderer(&#123;</div><div class=\"line\">  <span class=\"attr\">cache</span>: lru(<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That will cache up to 1000 unique renders. For other configurations that more closely align to memory usage, see <a href=\"https://github.com/isaacs/node-lru-cache#options\" target=\"_blank\" rel=\"external\">the lru-cache options</a>.</p>\n<p>Then for components you want to cache, you must provide them with:</p>\n<ul>\n<li>a unique <code>name</code></li>\n<li>a <code>serverCacheKey</code> function, returning a unique key scoped to the component</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'list-item'</span>,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'item'</span>],</div><div class=\"line\">  <span class=\"attr\">serverCacheKey</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> props.item.type + <span class=\"string\">'::'</span> + props.item.id</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Ideal-Components-for-Caching\"><a href=\"#Ideal-Components-for-Caching\" class=\"headerlink\" title=\"Ideal Components for Caching\"></a>Ideal Components for Caching</h3><p>Any “pure” component can be safely cached - that is, any component that is guaranteed to generate the same HTML given the same props. Common examples of these include:</p>\n<ul>\n<li>Static components (i.e. they always generate the same HTML, so the <code>serverCacheKey</code> function can just return <code>true</code>)</li>\n<li>List item components (when part of large lists, caching these can significantly improve performance)</li>\n<li>Generic UI components (e.g. buttons, alerts, etc - at least those that accept content through props rather than slots/children)</li>\n</ul>\n<h2 id=\"Build-Process-Routing-and-Vuex-State-Hydration\"><a href=\"#Build-Process-Routing-and-Vuex-State-Hydration\" class=\"headerlink\" title=\"Build Process, Routing, and Vuex State Hydration\"></a>Build Process, Routing, and Vuex State Hydration</h2><p>By now, you should understand the fundamental concepts behind server-side rendering. However, as you introduce a build process, routing, and vuex, each introduces its own considerations.</p>\n<p>To truly master server-side rendering in complex applications, we recommend a deep dive into the following resources:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/vue-server-renderer#api\" target=\"_blank\" rel=\"external\">vue-server-renderer docs</a>: more details on topics covered here, as well as documentation of more advanced topics, such as <a href=\"https://www.npmjs.com/package/vue-server-renderer#why-use-bundlerenderer\" target=\"_blank\" rel=\"external\">preventing cross-request contamination</a> and <a href=\"https://www.npmjs.com/package/vue-server-renderer#creating-the-server-bundle\" target=\"_blank\" rel=\"external\">adding a separate server build</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\" rel=\"external\">vue-hackernews-2.0</a>: the definitive example of integrating all major Vue libraries and concepts in a single application</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Do-You-Need-SSR\"><a href=\"#Do-You-Need-SSR\" class=\"headerlink\" title=\"Do You Need SSR?\"></a>Do You Need SSR?</h2><p>Before diving into SSR, let’s explore what it actually does for you and when you might need it.</p>\n<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3><p>Google and Bing can index synchronous JavaScript applications just fine. <em>Synchronous</em> being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish.</p>\n<p>This means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary.</p>\n<h3 id=\"Clients-with-a-Slow-Internet\"><a href=\"#Clients-with-a-Slow-Internet\" class=\"headerlink\" title=\"Clients with a Slow Internet\"></a>Clients with a Slow Internet</h3><p>Users might come to your site from a remote area with slow Internet - or just with a bad cell connection. In these cases, you’ll want to minimize the number and size of requests necessary for users to see basic content.</p>\n<p>You can use <a href=\"https://webpack.github.io/docs/code-splitting.html\">Webpack’s code splitting</a> to avoid forcing users to download your entire application to view a single page, but it still won’t be as performant as downloading a single, pre-rendered HTML file.</p>\n<h3 id=\"Clients-with-an-Old-or-Simply-No-JavaScript-Engine\"><a href=\"#Clients-with-an-Old-or-Simply-No-JavaScript-Engine\" class=\"headerlink\" title=\"Clients with an Old (or Simply No) JavaScript Engine\"></a>Clients with an Old (or Simply No) JavaScript Engine</h3><p>For some demographics or areas of the world, using a computer from 1998 to access the Internet might be the only option. While Vue only works with IE9+, you may still want to deliver basic content to those on older browsers - or to hipster hackers using <a href=\"http://lynx.browser.org/\">Lynx</a> in the terminal.</p>\n<h3 id=\"SSR-vs-Prerendering\"><a href=\"#SSR-vs-Prerendering\" class=\"headerlink\" title=\"SSR vs Prerendering\"></a>SSR vs Prerendering</h3><p>If you’re only investigating SSR to improve the SEO of a handful of marketing pages (e.g. <code>/</code>, <code>/about</code>, <code>/contact</code>, etc), then you probably want <strong>prerendering</strong> instead. Rather than using a web server to compile HTML on-the-fly, prerendering simply generates static HTML files for specific routes at build time. The advantage is setting up prerendering is much simpler and allows you to keep your frontend as a fully static site.</p>\n<p>If you’re using Webpack, you can easily add prerendering with the <a href=\"https://github.com/chrisvfritz/prerender-spa-plugin\">prerender-spa-plugin</a>. It’s been extensively tested with Vue apps - and in fact, the creator is a member of the Vue core team.</p>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>If you’ve gotten this far, you’re ready to see SSR in action. It sounds complex, but a simple node script demoing the feature requires only 3 steps:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Step 1: Create a Vue instance</span></div><div class=\"line\"><span class=\"keyword\">var</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'p'</span>, <span class=\"string\">'hello world'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Step 2: Create a renderer</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Step 3: Render the Vue instance to HTML</span></div><div class=\"line\">renderer.renderToString(app, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, html</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(html)</div><div class=\"line\">  <span class=\"comment\">// =&gt; &lt;p server-rendered=\"true\"&gt;hello world&lt;/p&gt;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Not so scary, right? Of course, this example is much simpler than most applications. We don’t yet have to worry about:</p>\n<ul>\n<li>A Web Server</li>\n<li>Response Streaming</li>\n<li>Component Caching</li>\n<li>A Build Process</li>\n<li>Routing</li>\n<li>Vuex State Hydration</li>\n</ul>\n<p>In the rest of this guide, we’ll walk through how to work with some of these features. Once you understand the basics, we’ll then direct you to more detailed documentation and advanced examples to help you handle edge cases.</p>\n<h2 id=\"Simple-SSR-with-the-Express-Web-Server\"><a href=\"#Simple-SSR-with-the-Express-Web-Server\" class=\"headerlink\" title=\"Simple SSR with the Express Web Server\"></a>Simple SSR with the Express Web Server</h2><p>It’s kind of a stretch to call it “server-side rendering” when we don’t actually have a web server, so let’s fix that. We’ll build a very simple SSR app, using only ES5 and without any build step or Vue plugins.</p>\n<p>We’ll start off with an app that just tells the user how many seconds they’ve been on the page:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;You have been here for &#123;&#123; counter &#125;&#125; seconds.&lt;/div&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      vm.counter += <span class=\"number\">1</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To adapt this for SSR, there are a few modifications we’ll have to make, so that it will work both in the browser and within node:</p>\n<ul>\n<li>When in the browser, add an instance of our app to the global context (i.e. <code>window</code>), so that we can mount it.</li>\n<li>When in node, export a factory function so that we can create a fresh instance of the app for every request.</li>\n</ul>\n<p>Accomplishing this requires a little boilerplate:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assets/app.js</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"string\">'use strict'</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createApp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ---------------------</span></div><div class=\"line\">    <span class=\"comment\">// BEGIN NORMAL APP CODE</span></div><div class=\"line\">    <span class=\"comment\">// ---------------------</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Main Vue instance must be returned and have a root</span></div><div class=\"line\">    <span class=\"comment\">// node with the id \"app\", so that the client-side</span></div><div class=\"line\">    <span class=\"comment\">// version can take over once it loads.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div id=\"app\"&gt;You have been here for &#123;&#123; counter &#125;&#125; seconds.&lt;/div&gt;'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">counter</span>: <span class=\"number\">0</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">        setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.counter += <span class=\"number\">1</span></div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// -------------------</span></div><div class=\"line\">    <span class=\"comment\">// END NORMAL APP CODE</span></div><div class=\"line\">    <span class=\"comment\">// -------------------</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = createApp</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.app = createApp()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).call(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure>\n<p>Now that we have our application code, let’s put together an <code>index.html</code> file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My Vue App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\">app.$mount(<span class=\"string\">'#app'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As long as the referenced <code>assets</code> directory contains the <code>app.js</code> file we created earlier, as well as a <code>vue.js</code> file with Vue, we should now have a working single-page application!</p>\n<p>Then to get it working with server-side rendering, there’s just one more step - the web server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server.js</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Define global Vue for server-side app.js</span></div><div class=\"line\">global.Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Get the HTML layout</span></div><div class=\"line\"><span class=\"keyword\">var</span> layout = fs.readFileSync(<span class=\"string\">'./index.html'</span>, <span class=\"string\">'utf8'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create a renderer</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create an express server</span></div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> server = express()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Serve files from the assets directory</span></div><div class=\"line\">server.use(<span class=\"string\">'/assets'</span>, express.static(</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'assets'</span>)</div><div class=\"line\">))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle all GET requests</span></div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Render our Vue app to a string</span></div><div class=\"line\">  renderer.renderToString(</div><div class=\"line\">    <span class=\"comment\">// Create an app instance</span></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./assets/app'</span>)(),</div><div class=\"line\">    <span class=\"comment\">// Handle the rendered result</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, html</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// If an error occurred while rendering...</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"comment\">// Log the error in the console</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.error(error)</div><div class=\"line\">        <span class=\"comment\">// Tell the client something went wrong</span></div><div class=\"line\">        <span class=\"keyword\">return</span> response</div><div class=\"line\">          .status(<span class=\"number\">500</span>)</div><div class=\"line\">          .send(<span class=\"string\">'Server Error'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// Send the layout with the rendered app's HTML</span></div><div class=\"line\">      response.send(layout.replace(<span class=\"string\">'&lt;div id=\"app\"&gt;&lt;/div&gt;'</span>, html))</div><div class=\"line\">    &#125;</div><div class=\"line\">  )</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Listen on port 5000</span></div><div class=\"line\">server.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at localhost:5000'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>And that’s it! Here’s <a href=\"https://github.com/chrisvfritz/vue-ssr-demo-simple\">the full application</a>, in case you’d like to clone it and experiment further. Once you have it running locally, you can confirm that server-side rendering really is working by right-clicking on the page and selecting <code>View Page Source</code> (or similar). You should see this in the body:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">server-rendered</span>=<span class=\"string\">\"true\"</span>&gt;</span>You have been here for 0 seconds&amp;period;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>instead of:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Response-Streaming\"><a href=\"#Response-Streaming\" class=\"headerlink\" title=\"Response Streaming\"></a>Response Streaming</h2><p>Vue also supports rendering to a <strong>stream</strong>, which is preferred for web servers that support streaming. This allows HTML to be written to the response <em>as it’s generated</em>, rather than all at once at the end. The result is requests are served faster, with no downsides!</p>\n<p>To adapt our app from the previous section for streaming, we can simply replace the <code>server.get(&#39;*&#39;, ...)</code> block with the following:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Split the layout into two sections of HTML</span></div><div class=\"line\"><span class=\"keyword\">var</span> layoutSections = layout.split(<span class=\"string\">'&lt;div id=\"app\"&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> preAppHTML = layoutSections[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> postAppHTML = layoutSections[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Handle all GET requests</span></div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Render our Vue app to a stream</span></div><div class=\"line\">  <span class=\"keyword\">var</span> stream = renderer.renderToStream(<span class=\"built_in\">require</span>(<span class=\"string\">'./assets/app'</span>)())</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Write the pre-app HTML to the response</span></div><div class=\"line\">  response.write(preAppHTML)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Whenever new chunks are rendered...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Write the chunk to the response</span></div><div class=\"line\">    response.write(chunk)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When all chunks are rendered...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Write the post-app HTML to the response</span></div><div class=\"line\">    response.end(postAppHTML)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// If an error occurs while rendering...</span></div><div class=\"line\">  stream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Log the error in the console</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.error(error)</div><div class=\"line\">    <span class=\"comment\">// Tell the client something went wrong</span></div><div class=\"line\">    <span class=\"keyword\">return</span> response</div><div class=\"line\">      .status(<span class=\"number\">500</span>)</div><div class=\"line\">      .send(<span class=\"string\">'Server Error'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>As you can see, it’s not much more complicated than the previous version, even if streams may be conceptually new to you. We just:</p>\n<ol>\n<li>Set up the stream</li>\n<li>Write the HTML that comes before the app to the response</li>\n<li>Write the app HTML to the response as it becomes available</li>\n<li>Write the HTML that comes after the app to the response and end it</li>\n<li>Handle any errors</li>\n</ol>\n<h2 id=\"Component-Caching\"><a href=\"#Component-Caching\" class=\"headerlink\" title=\"Component Caching\"></a>Component Caching</h2><p>Vue’s SSR is very fast by default, but you can further improve performance by caching rendered components. This should be considered an advanced feature however, as caching the wrong components (or the right components with the wrong key) could lead to misrendering your app. Specifically:</p>\n<p class=\"tip\">You should not cache a component containing child components that rely on global state (e.g. from a vuex store). If you do, those child components (and in fact, the entire sub-tree) will be cached as well. Be especially wary with components that accept slots/children.</p>\n\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h3><p>With that warning out of the way, here’s how you cache components.</p>\n<p>First, you’ll need to provide your renderer with a <a href=\"https://www.npmjs.com/package/vue-server-renderer#cache\">cache object</a>. Here’s a simple example using <a href=\"https://github.com/isaacs/node-lru-cache\">lru-cache</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createRenderer = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>).createRenderer</div><div class=\"line\"><span class=\"keyword\">var</span> lru = <span class=\"built_in\">require</span>(<span class=\"string\">'lru-cache'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = createRenderer(&#123;</div><div class=\"line\">  <span class=\"attr\">cache</span>: lru(<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That will cache up to 1000 unique renders. For other configurations that more closely align to memory usage, see <a href=\"https://github.com/isaacs/node-lru-cache#options\">the lru-cache options</a>.</p>\n<p>Then for components you want to cache, you must provide them with:</p>\n<ul>\n<li>a unique <code>name</code></li>\n<li>a <code>serverCacheKey</code> function, returning a unique key scoped to the component</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'list-item'</span>,</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'item'</span>],</div><div class=\"line\">  <span class=\"attr\">serverCacheKey</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> props.item.type + <span class=\"string\">'::'</span> + props.item.id</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Ideal-Components-for-Caching\"><a href=\"#Ideal-Components-for-Caching\" class=\"headerlink\" title=\"Ideal Components for Caching\"></a>Ideal Components for Caching</h3><p>Any “pure” component can be safely cached - that is, any component that is guaranteed to generate the same HTML given the same props. Common examples of these include:</p>\n<ul>\n<li>Static components (i.e. they always generate the same HTML, so the <code>serverCacheKey</code> function can just return <code>true</code>)</li>\n<li>List item components (when part of large lists, caching these can significantly improve performance)</li>\n<li>Generic UI components (e.g. buttons, alerts, etc - at least those that accept content through props rather than slots/children)</li>\n</ul>\n<h2 id=\"Build-Process-Routing-and-Vuex-State-Hydration\"><a href=\"#Build-Process-Routing-and-Vuex-State-Hydration\" class=\"headerlink\" title=\"Build Process, Routing, and Vuex State Hydration\"></a>Build Process, Routing, and Vuex State Hydration</h2><p>By now, you should understand the fundamental concepts behind server-side rendering. However, as you introduce a build process, routing, and vuex, each introduces its own considerations.</p>\n<p>To truly master server-side rendering in complex applications, we recommend a deep dive into the following resources:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/vue-server-renderer#api\">vue-server-renderer docs</a>: more details on topics covered here, as well as documentation of more advanced topics, such as <a href=\"https://www.npmjs.com/package/vue-server-renderer#why-use-bundlerenderer\">preventing cross-request contamination</a> and <a href=\"https://www.npmjs.com/package/vue-server-renderer#creating-the-server-bundle\">adding a separate server build</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews-2.0\">vue-hackernews-2.0</a>: the definitive example of integrating all major Vue libraries and concepts in a single application</li>\n</ul>\n"},{"title":"State Management","type":"guide","order":22,"_content":"\n## Official Flux-Like Implementation\n\nLarge applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers [vuex](https://github.com/vuejs/vuex): our own Elm-inspired state management library. It even integrates into [vue-devtools](https://github.com/vuejs/vue-devtools), providing zero-setup access to time travel.\n\n### Information for React Developers\n\nIf you're coming from React, you may be wondering how vuex compares to [redux](https://github.com/reactjs/redux), the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via some [simple bindings](https://github.com/egoist/revue). Vuex is different in that it _knows_ it's in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.\n\n## Simple State Management from Scratch\n\nIt is often overlooked that the source of truth in Vue applications is the raw `data` object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can simply share it by identity:\n\n``` js\nconst sourceOfTruth = {}\n\nconst vmA = new Vue({\n  data: sourceOfTruth\n})\n\nconst vmB = new Vue({\n  data: sourceOfTruth\n})\n```\n\nNow whenever `sourceOfTruth` is mutated, both `vmA` and `vmB` will update their views automatically. Subcomponents within each of these instances would also have access via `this.$root.$data`. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.\n\nTo help solve this problem, we can adopt a simple **store pattern**:\n\n``` js\nvar store = {\n  debug: true,\n  state: {\n    message: 'Hello!'\n  },\n  setMessageAction (newValue) {\n    this.debug && console.log('setMessageAction triggered with', newValue)\n    this.state.message = newValue\n  },\n  clearMessageAction () {\n    this.debug && console.log('clearMessageAction triggered')\n    this.state.message = 'action B triggered'\n  }\n}\n```\n\nNotice all actions that mutate the store's state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how are they triggered. When something goes wrong, we'll also now have a log of what happened leading up to the bug.\n\nIn addition, each instance/component can still own and manage its own private state:\n\n``` js\nvar vmA = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})\n\nvar vmB = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})\n```\n\n![State Management](/images/state.png)\n\n<p class=\"tip\">It's important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</p>\n\nAs we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the [Flux](https://facebook.github.io/flux/) architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.\n\nThis brings us full circle back to [vuex](https://github.com/vuejs/vuex), so if you've read this far it's probably time to try it out!\n","source":"v2/guide/state-management.md","raw":"---\ntitle: State Management\ntype: guide\norder: 22\n---\n\n## Official Flux-Like Implementation\n\nLarge applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers [vuex](https://github.com/vuejs/vuex): our own Elm-inspired state management library. It even integrates into [vue-devtools](https://github.com/vuejs/vue-devtools), providing zero-setup access to time travel.\n\n### Information for React Developers\n\nIf you're coming from React, you may be wondering how vuex compares to [redux](https://github.com/reactjs/redux), the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via some [simple bindings](https://github.com/egoist/revue). Vuex is different in that it _knows_ it's in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.\n\n## Simple State Management from Scratch\n\nIt is often overlooked that the source of truth in Vue applications is the raw `data` object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can simply share it by identity:\n\n``` js\nconst sourceOfTruth = {}\n\nconst vmA = new Vue({\n  data: sourceOfTruth\n})\n\nconst vmB = new Vue({\n  data: sourceOfTruth\n})\n```\n\nNow whenever `sourceOfTruth` is mutated, both `vmA` and `vmB` will update their views automatically. Subcomponents within each of these instances would also have access via `this.$root.$data`. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.\n\nTo help solve this problem, we can adopt a simple **store pattern**:\n\n``` js\nvar store = {\n  debug: true,\n  state: {\n    message: 'Hello!'\n  },\n  setMessageAction (newValue) {\n    this.debug && console.log('setMessageAction triggered with', newValue)\n    this.state.message = newValue\n  },\n  clearMessageAction () {\n    this.debug && console.log('clearMessageAction triggered')\n    this.state.message = 'action B triggered'\n  }\n}\n```\n\nNotice all actions that mutate the store's state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how are they triggered. When something goes wrong, we'll also now have a log of what happened leading up to the bug.\n\nIn addition, each instance/component can still own and manage its own private state:\n\n``` js\nvar vmA = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})\n\nvar vmB = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})\n```\n\n![State Management](/images/state.png)\n\n<p class=\"tip\">It's important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</p>\n\nAs we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the [Flux](https://facebook.github.io/flux/) architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.\n\nThis brings us full circle back to [vuex](https://github.com/vuejs/vuex), so if you've read this far it's probably time to try it out!\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/state-management.html","comments":1,"layout":"page","_id":"civ8jcjox001e91m1d04toz7o","content":"<h2 id=\"Official-Flux-Like-Implementation\"><a href=\"#Official-Flux-Like-Implementation\" class=\"headerlink\" title=\"Official Flux-Like Implementation\"></a>Official Flux-Like Implementation</h2><p>Large applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a>: our own Elm-inspired state management library. It even integrates into <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a>, providing zero-setup access to time travel.</p>\n<h3 id=\"Information-for-React-Developers\"><a href=\"#Information-for-React-Developers\" class=\"headerlink\" title=\"Information for React Developers\"></a>Information for React Developers</h3><p>If you’re coming from React, you may be wondering how vuex compares to <a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"external\">redux</a>, the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via some <a href=\"https://github.com/egoist/revue\" target=\"_blank\" rel=\"external\">simple bindings</a>. Vuex is different in that it <em>knows</em> it’s in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.</p>\n<h2 id=\"Simple-State-Management-from-Scratch\"><a href=\"#Simple-State-Management-from-Scratch\" class=\"headerlink\" title=\"Simple State Management from Scratch\"></a>Simple State Management from Scratch</h2><p>It is often overlooked that the source of truth in Vue applications is the raw <code>data</code> object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can simply share it by identity:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sourceOfTruth = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> vmA = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: sourceOfTruth</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> vmB = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: sourceOfTruth</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Subcomponents within each of these instances would also have access via <code>this.$root.$data</code>. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.</p>\n<p>To help solve this problem, we can adopt a simple <strong>store pattern</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = &#123;</div><div class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  setMessageAction (newValue) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.debug &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">'setMessageAction triggered with'</span>, newValue)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state.message = newValue</div><div class=\"line\">  &#125;,</div><div class=\"line\">  clearMessageAction () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.debug &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">'clearMessageAction triggered'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state.message = <span class=\"string\">'action B triggered'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice all actions that mutate the store’s state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how are they triggered. When something goes wrong, we’ll also now have a log of what happened leading up to the bug.</p>\n<p>In addition, each instance/component can still own and manage its own private state:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vmA = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">privateState</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">sharedState</span>: store.state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vmB = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">privateState</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">sharedState</span>: store.state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"/images/state.png\" alt=\"State Management\"></p>\n<p class=\"tip\">It’s important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</p>\n\n<p>As we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the <a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"external\">Flux</a> architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.</p>\n<p>This brings us full circle back to <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">vuex</a>, so if you’ve read this far it’s probably time to try it out!</p>\n","excerpt":"","more":"<h2 id=\"Official-Flux-Like-Implementation\"><a href=\"#Official-Flux-Like-Implementation\" class=\"headerlink\" title=\"Official Flux-Like Implementation\"></a>Official Flux-Like Implementation</h2><p>Large applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers <a href=\"https://github.com/vuejs/vuex\">vuex</a>: our own Elm-inspired state management library. It even integrates into <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a>, providing zero-setup access to time travel.</p>\n<h3 id=\"Information-for-React-Developers\"><a href=\"#Information-for-React-Developers\" class=\"headerlink\" title=\"Information for React Developers\"></a>Information for React Developers</h3><p>If you’re coming from React, you may be wondering how vuex compares to <a href=\"https://github.com/reactjs/redux\">redux</a>, the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via some <a href=\"https://github.com/egoist/revue\">simple bindings</a>. Vuex is different in that it <em>knows</em> it’s in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.</p>\n<h2 id=\"Simple-State-Management-from-Scratch\"><a href=\"#Simple-State-Management-from-Scratch\" class=\"headerlink\" title=\"Simple State Management from Scratch\"></a>Simple State Management from Scratch</h2><p>It is often overlooked that the source of truth in Vue applications is the raw <code>data</code> object - a Vue instance simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can simply share it by identity:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sourceOfTruth = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> vmA = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: sourceOfTruth</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> vmB = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: sourceOfTruth</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Subcomponents within each of these instances would also have access via <code>this.$root.$data</code>. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.</p>\n<p>To help solve this problem, we can adopt a simple <strong>store pattern</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = &#123;</div><div class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello!'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  setMessageAction (newValue) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.debug &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">'setMessageAction triggered with'</span>, newValue)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state.message = newValue</div><div class=\"line\">  &#125;,</div><div class=\"line\">  clearMessageAction () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.debug &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">'clearMessageAction triggered'</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state.message = <span class=\"string\">'action B triggered'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Notice all actions that mutate the store’s state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how are they triggered. When something goes wrong, we’ll also now have a log of what happened leading up to the bug.</p>\n<p>In addition, each instance/component can still own and manage its own private state:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vmA = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">privateState</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">sharedState</span>: store.state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vmB = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">privateState</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">sharedState</span>: store.state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><img src=\"/images/state.png\" alt=\"State Management\"></p>\n<p class=\"tip\">It’s important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</p>\n\n<p>As we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the <a href=\"https://facebook.github.io/flux/\">Flux</a> architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.</p>\n<p>This brings us full circle back to <a href=\"https://github.com/vuejs/vuex\">vuex</a>, so if you’ve read this far it’s probably time to try it out!</p>\n"},{"title":"Template Syntax","type":"guide","order":4,"_content":"\nVue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance's data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.\n\nUnder the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the reactivity system, Vue is able to intelligently figure out the minimal amount of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.\n\nIf you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also [directly write render functions](render-function.html) instead of templates, with optional JSX support.\n\n## Interpolations\n\n### Text\n\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n``` html\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property on the corresponding data object. It will also be updated whenever the data object's `msg` property changes.\n\nYou can also perform one-time interpolations that do not update on data change by using the [v-once directive](../api/#v-once), but keep in mind this will also affect any binding on the same node:\n\n``` html\n<span v-once>This will never change: {{ msg }}</span>\n```\n\n### Raw HTML\n\nThe double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the `v-html` directive:\n\n``` html\n<div v-html=\"rawHtml\"></div>\n```\n\nThe contents are inserted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use HTML interpolation on trusted content and **never** on user-provided content.</p>\n\n### Attributes\n\nMustaches cannot be used inside HTML attributes, instead use a [v-bind directive](../api/#v-bind):\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nIt also works for boolean attributes - the attribute will be removed if the condition evaluates to a falsy value:\n\n``` html\n<button v-bind:disabled=\"someDynamicCondition\">Button</button>\n```\n\n### Using JavaScript Expressions\n\nSo far we've only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:\n\n``` html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain **one single expression**, so the following will **NOT** work:\n\n``` html\n<!-- this is a statement, not an expression: -->\n{{ var a = 1 }}\n\n<!-- flow control won't work either, use ternary expressions -->\n{{ if (ok) { return message } }}\n```\n\n<p class=\"tip\">Template expressions are sandboxed and only have access to a whitelist of globals such as `Math` and `Date`. You should not attempt to access user defined globals in template expressions.</p>\n\n### Filters\n\nVue.js allows you to define filters that can be used to apply common text formatting. Filters should be appended to the end of a **mustache interpolation**, denoted by the \"pipe\" symbol:\n\n``` html\n{{ message | capitalize }}\n```\n\n<p class=\"tip\">Vue 2.x filters can only be used inside mustache bindings. To achieve the same behavior inside directive bindings, you should use [Computed properties](computed.html) instead.</p>\n\nThe filter function always receives the expression's value as the first argument.\n\n``` js\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\nFilters can be chained:\n\n``` html\n{{ message | filterA | filterB }}\n```\n\nFilters are JavaScript functions, therefore they can take arguments:\n\n``` html\n{{ message | filterA('arg1', arg2) }}\n```\n\nHere, the plain string `'arg1'` will be passed into the filter as the second argument, and the value of expression `arg2` will be evaluated and passed in as the third argument.\n\n## Directives\n\nDirectives are special attributes with the `v-` prefix. Directive attribute values are expected to be **a single JavaScript expression** (with the exception for `v-for`, which will be discussed later). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes. Let's review the example we saw in the introduction:\n\n``` html\n<p v-if=\"seen\">Now you see me</p>\n```\n\nHere, the `v-if` directive would remove/insert the `<p>` element based on the truthiness of the value of the expression `seen`.\n\n### Arguments\n\nSome directives can take an \"argument\", denoted by a colon after the directive name. For example, the `v-bind` directive is used to reactively update an HTML attribute:\n\n``` html\n<a v-bind:href=\"url\"></a>\n```\n\nHere `href` is the argument, which tells the `v-bind` directive to bind the element's `href` attribute to the value of the expression `url`.\n\nAnother example is the `v-on` directive, which listens to DOM events:\n\n``` html\n<a v-on:click=\"doSomething\">\n```\n\nHere the argument is the event name to listen to. We will talk about event handling in more detail too.\n\n### Modifiers\n\nModifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the `.prevent` modifier tells the `v-on` directive to call `event.preventDefault()` on the triggered event:\n\n``` html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\nWe will see more use of modifiers later when we take a more thorough look at `v-on` and `v-model`.\n\n## Shorthands\n\nThe `v-` prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the `v-` prefix becomes less important when you are building an [SPA](https://en.wikipedia.org/wiki/Single-page_application) where Vue.js manages every template. Therefore, Vue.js provides special shorthands for two of the most often used directives, `v-bind` and `v-on`:\n\n### `v-bind` Shorthand\n\n``` html\n<!-- full syntax -->\n<a v-bind:href=\"url\"></a>\n\n<!-- shorthand -->\n<a :href=\"url\"></a>\n```\n\n\n### `v-on` Shorthand\n\n``` html\n<!-- full syntax -->\n<a v-on:click=\"doSomething\"></a>\n\n<!-- shorthand -->\n<a @click=\"doSomething\"></a>\n```\n\nThey may look a bit different from normal HTML, but `:` and `@` are valid chars for attribute names and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.\n","source":"v2/guide/syntax.md","raw":"---\ntitle: Template Syntax\ntype: guide\norder: 4\n---\n\nVue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance's data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.\n\nUnder the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the reactivity system, Vue is able to intelligently figure out the minimal amount of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.\n\nIf you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also [directly write render functions](render-function.html) instead of templates, with optional JSX support.\n\n## Interpolations\n\n### Text\n\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\n\n``` html\n<span>Message: {{ msg }}</span>\n```\n\nThe mustache tag will be replaced with the value of the `msg` property on the corresponding data object. It will also be updated whenever the data object's `msg` property changes.\n\nYou can also perform one-time interpolations that do not update on data change by using the [v-once directive](../api/#v-once), but keep in mind this will also affect any binding on the same node:\n\n``` html\n<span v-once>This will never change: {{ msg }}</span>\n```\n\n### Raw HTML\n\nThe double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the `v-html` directive:\n\n``` html\n<div v-html=\"rawHtml\"></div>\n```\n\nThe contents are inserted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\n\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use HTML interpolation on trusted content and **never** on user-provided content.</p>\n\n### Attributes\n\nMustaches cannot be used inside HTML attributes, instead use a [v-bind directive](../api/#v-bind):\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n```\n\nIt also works for boolean attributes - the attribute will be removed if the condition evaluates to a falsy value:\n\n``` html\n<button v-bind:disabled=\"someDynamicCondition\">Button</button>\n```\n\n### Using JavaScript Expressions\n\nSo far we've only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:\n\n``` html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n```\n\nThese expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain **one single expression**, so the following will **NOT** work:\n\n``` html\n<!-- this is a statement, not an expression: -->\n{{ var a = 1 }}\n\n<!-- flow control won't work either, use ternary expressions -->\n{{ if (ok) { return message } }}\n```\n\n<p class=\"tip\">Template expressions are sandboxed and only have access to a whitelist of globals such as `Math` and `Date`. You should not attempt to access user defined globals in template expressions.</p>\n\n### Filters\n\nVue.js allows you to define filters that can be used to apply common text formatting. Filters should be appended to the end of a **mustache interpolation**, denoted by the \"pipe\" symbol:\n\n``` html\n{{ message | capitalize }}\n```\n\n<p class=\"tip\">Vue 2.x filters can only be used inside mustache bindings. To achieve the same behavior inside directive bindings, you should use [Computed properties](computed.html) instead.</p>\n\nThe filter function always receives the expression's value as the first argument.\n\n``` js\nnew Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\nFilters can be chained:\n\n``` html\n{{ message | filterA | filterB }}\n```\n\nFilters are JavaScript functions, therefore they can take arguments:\n\n``` html\n{{ message | filterA('arg1', arg2) }}\n```\n\nHere, the plain string `'arg1'` will be passed into the filter as the second argument, and the value of expression `arg2` will be evaluated and passed in as the third argument.\n\n## Directives\n\nDirectives are special attributes with the `v-` prefix. Directive attribute values are expected to be **a single JavaScript expression** (with the exception for `v-for`, which will be discussed later). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes. Let's review the example we saw in the introduction:\n\n``` html\n<p v-if=\"seen\">Now you see me</p>\n```\n\nHere, the `v-if` directive would remove/insert the `<p>` element based on the truthiness of the value of the expression `seen`.\n\n### Arguments\n\nSome directives can take an \"argument\", denoted by a colon after the directive name. For example, the `v-bind` directive is used to reactively update an HTML attribute:\n\n``` html\n<a v-bind:href=\"url\"></a>\n```\n\nHere `href` is the argument, which tells the `v-bind` directive to bind the element's `href` attribute to the value of the expression `url`.\n\nAnother example is the `v-on` directive, which listens to DOM events:\n\n``` html\n<a v-on:click=\"doSomething\">\n```\n\nHere the argument is the event name to listen to. We will talk about event handling in more detail too.\n\n### Modifiers\n\nModifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the `.prevent` modifier tells the `v-on` directive to call `event.preventDefault()` on the triggered event:\n\n``` html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\nWe will see more use of modifiers later when we take a more thorough look at `v-on` and `v-model`.\n\n## Shorthands\n\nThe `v-` prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the `v-` prefix becomes less important when you are building an [SPA](https://en.wikipedia.org/wiki/Single-page_application) where Vue.js manages every template. Therefore, Vue.js provides special shorthands for two of the most often used directives, `v-bind` and `v-on`:\n\n### `v-bind` Shorthand\n\n``` html\n<!-- full syntax -->\n<a v-bind:href=\"url\"></a>\n\n<!-- shorthand -->\n<a :href=\"url\"></a>\n```\n\n\n### `v-on` Shorthand\n\n``` html\n<!-- full syntax -->\n<a v-on:click=\"doSomething\"></a>\n\n<!-- shorthand -->\n<a @click=\"doSomething\"></a>\n```\n\nThey may look a bit different from normal HTML, but `:` and `@` are valid chars for attribute names and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/syntax.html","comments":1,"layout":"page","_id":"civ8jcjoy001f91m1wb60ymii","content":"<p>Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.</p>\n<p>Under the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the reactivity system, Vue is able to intelligently figure out the minimal amount of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.</p>\n<p>If you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also <a href=\"render-function.html\">directly write render functions</a> instead of templates, with optional JSX support.</p>\n<h2 id=\"Interpolations\"><a href=\"#Interpolations\" class=\"headerlink\" title=\"Interpolations\"></a>Interpolations</h2><h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>The most basic form of data binding is text interpolation using the “Mustache” syntax (double curly braces):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The mustache tag will be replaced with the value of the <code>msg</code> property on the corresponding data object. It will also be updated whenever the data object’s <code>msg</code> property changes.</p>\n<p>You can also perform one-time interpolations that do not update on data change by using the <a href=\"../api/#v-once\">v-once directive</a>, but keep in mind this will also affect any binding on the same node:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Raw-HTML\"><a href=\"#Raw-HTML\" class=\"headerlink\" title=\"Raw HTML\"></a>Raw HTML</h3><p>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the <code>v-html</code> directive:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The contents are inserted as plain HTML - data bindings are ignored. Note that you cannot use <code>v-html</code> to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"external\">XSS attacks</a>. Only use HTML interpolation on trusted content and <strong>never</strong> on user-provided content.</p>\n\n<h3 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h3><p>Mustaches cannot be used inside HTML attributes, instead use a <a href=\"../api/#v-bind\">v-bind directive</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It also works for boolean attributes - the attribute will be removed if the condition evaluates to a falsy value:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Using-JavaScript-Expressions\"><a href=\"#Using-JavaScript-Expressions\" class=\"headerlink\" title=\"Using JavaScript Expressions\"></a>Using JavaScript Expressions</h3><p>So far we’ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain <strong>one single expression</strong>, so the following will <strong>NOT</strong> work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this is a statement, not an expression: --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- flow control won't work either, use ternary expressions --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p class=\"tip\">Template expressions are sandboxed and only have access to a whitelist of globals such as <code>Math</code> and <code>Date</code>. You should not attempt to access user defined globals in template expressions.</p>\n\n<h3 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h3><p>Vue.js allows you to define filters that can be used to apply common text formatting. Filters should be appended to the end of a <strong>mustache interpolation</strong>, denoted by the “pipe” symbol:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<p class=\"tip\">Vue 2.x filters can only be used inside mustache bindings. To achieve the same behavior inside directive bindings, you should use <a href=\"computed.html\">Computed properties</a> instead.</p>\n\n<p>The filter function always receives the expression’s value as the first argument.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Filters can be chained:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Filters are JavaScript functions, therefore they can take arguments:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Here, the plain string <code>&#39;arg1&#39;</code> will be passed into the filter as the second argument, and the value of expression <code>arg2</code> will be evaluated and passed in as the third argument.</p>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><p>Directives are special attributes with the <code>v-</code> prefix. Directive attribute values are expected to be <strong>a single JavaScript expression</strong> (with the exception for <code>v-for</code>, which will be discussed later). A directive’s job is to reactively apply side effects to the DOM when the value of its expression changes. Let’s review the example we saw in the introduction:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here, the <code>v-if</code> directive would remove/insert the <code>&lt;p&gt;</code> element based on the truthiness of the value of the expression <code>seen</code>.</p>\n<h3 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h3><p>Some directives can take an “argument”, denoted by a colon after the directive name. For example, the <code>v-bind</code> directive is used to reactively update an HTML attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here <code>href</code> is the argument, which tells the <code>v-bind</code> directive to bind the element’s <code>href</code> attribute to the value of the expression <code>url</code>.</p>\n<p>Another example is the <code>v-on</code> directive, which listens to DOM events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here the argument is the event name to listen to. We will talk about event handling in more detail too.</p>\n<h3 id=\"Modifiers\"><a href=\"#Modifiers\" class=\"headerlink\" title=\"Modifiers\"></a>Modifiers</h3><p>Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the <code>.prevent</code> modifier tells the <code>v-on</code> directive to call <code>event.preventDefault()</code> on the triggered event:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>We will see more use of modifiers later when we take a more thorough look at <code>v-on</code> and <code>v-model</code>.</p>\n<h2 id=\"Shorthands\"><a href=\"#Shorthands\" class=\"headerlink\" title=\"Shorthands\"></a>Shorthands</h2><p>The <code>v-</code> prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the <code>v-</code> prefix becomes less important when you are building an <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\" rel=\"external\">SPA</a> where Vue.js manages every template. Therefore, Vue.js provides special shorthands for two of the most often used directives, <code>v-bind</code> and <code>v-on</code>:</p>\n<h3 id=\"v-bind-Shorthand\"><a href=\"#v-bind-Shorthand\" class=\"headerlink\" title=\"v-bind Shorthand\"></a><code>v-bind</code> Shorthand</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"v-on-Shorthand\"><a href=\"#v-on-Shorthand\" class=\"headerlink\" title=\"v-on Shorthand\"></a><code>v-on</code> Shorthand</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>They may look a bit different from normal HTML, but <code>:</code> and <code>@</code> are valid chars for attribute names and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</p>\n","excerpt":"","more":"<p>Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.</p>\n<p>Under the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the reactivity system, Vue is able to intelligently figure out the minimal amount of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.</p>\n<p>If you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also <a href=\"render-function.html\">directly write render functions</a> instead of templates, with optional JSX support.</p>\n<h2 id=\"Interpolations\"><a href=\"#Interpolations\" class=\"headerlink\" title=\"Interpolations\"></a>Interpolations</h2><h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>The most basic form of data binding is text interpolation using the “Mustache” syntax (double curly braces):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The mustache tag will be replaced with the value of the <code>msg</code> property on the corresponding data object. It will also be updated whenever the data object’s <code>msg</code> property changes.</p>\n<p>You can also perform one-time interpolations that do not update on data change by using the <a href=\"../api/#v-once\">v-once directive</a>, but keep in mind this will also affect any binding on the same node:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Raw-HTML\"><a href=\"#Raw-HTML\" class=\"headerlink\" title=\"Raw HTML\"></a>Raw HTML</h3><p>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the <code>v-html</code> directive:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The contents are inserted as plain HTML - data bindings are ignored. Note that you cannot use <code>v-html</code> to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS attacks</a>. Only use HTML interpolation on trusted content and <strong>never</strong> on user-provided content.</p>\n\n<h3 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h3><p>Mustaches cannot be used inside HTML attributes, instead use a <a href=\"../api/#v-bind\">v-bind directive</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It also works for boolean attributes - the attribute will be removed if the condition evaluates to a falsy value:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Using-JavaScript-Expressions\"><a href=\"#Using-JavaScript-Expressions\" class=\"headerlink\" title=\"Using JavaScript Expressions\"></a>Using JavaScript Expressions</h3><p>So far we’ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain <strong>one single expression</strong>, so the following will <strong>NOT</strong> work:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- this is a statement, not an expression: --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- flow control won't work either, use ternary expressions --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p class=\"tip\">Template expressions are sandboxed and only have access to a whitelist of globals such as <code>Math</code> and <code>Date</code>. You should not attempt to access user defined globals in template expressions.</p>\n\n<h3 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h3><p>Vue.js allows you to define filters that can be used to apply common text formatting. Filters should be appended to the end of a <strong>mustache interpolation</strong>, denoted by the “pipe” symbol:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<p class=\"tip\">Vue 2.x filters can only be used inside mustache bindings. To achieve the same behavior inside directive bindings, you should use <a href=\"computed.html\">Computed properties</a> instead.</p>\n\n<p>The filter function always receives the expression’s value as the first argument.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Filters can be chained:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Filters are JavaScript functions, therefore they can take arguments:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Here, the plain string <code>&#39;arg1&#39;</code> will be passed into the filter as the second argument, and the value of expression <code>arg2</code> will be evaluated and passed in as the third argument.</p>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><p>Directives are special attributes with the <code>v-</code> prefix. Directive attribute values are expected to be <strong>a single JavaScript expression</strong> (with the exception for <code>v-for</code>, which will be discussed later). A directive’s job is to reactively apply side effects to the DOM when the value of its expression changes. Let’s review the example we saw in the introduction:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here, the <code>v-if</code> directive would remove/insert the <code>&lt;p&gt;</code> element based on the truthiness of the value of the expression <code>seen</code>.</p>\n<h3 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h3><p>Some directives can take an “argument”, denoted by a colon after the directive name. For example, the <code>v-bind</code> directive is used to reactively update an HTML attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here <code>href</code> is the argument, which tells the <code>v-bind</code> directive to bind the element’s <code>href</code> attribute to the value of the expression <code>url</code>.</p>\n<p>Another example is the <code>v-on</code> directive, which listens to DOM events:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Here the argument is the event name to listen to. We will talk about event handling in more detail too.</p>\n<h3 id=\"Modifiers\"><a href=\"#Modifiers\" class=\"headerlink\" title=\"Modifiers\"></a>Modifiers</h3><p>Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the <code>.prevent</code> modifier tells the <code>v-on</code> directive to call <code>event.preventDefault()</code> on the triggered event:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>We will see more use of modifiers later when we take a more thorough look at <code>v-on</code> and <code>v-model</code>.</p>\n<h2 id=\"Shorthands\"><a href=\"#Shorthands\" class=\"headerlink\" title=\"Shorthands\"></a>Shorthands</h2><p>The <code>v-</code> prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the <code>v-</code> prefix becomes less important when you are building an <a href=\"https://en.wikipedia.org/wiki/Single-page_application\">SPA</a> where Vue.js manages every template. Therefore, Vue.js provides special shorthands for two of the most often used directives, <code>v-bind</code> and <code>v-on</code>:</p>\n<h3 id=\"v-bind-Shorthand\"><a href=\"#v-bind-Shorthand\" class=\"headerlink\" title=\"v-bind Shorthand\"></a><code>v-bind</code> Shorthand</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"v-on-Shorthand\"><a href=\"#v-on-Shorthand\" class=\"headerlink\" title=\"v-on Shorthand\"></a><code>v-on</code> Shorthand</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>They may look a bit different from normal HTML, but <code>:</code> and <code>@</code> are valid chars for attribute names and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</p>\n"},{"title":"Transitioning State","type":"guide","order":14,"_content":"\nVue's transition system offers many simple ways to animate entering, leaving, and lists, but what about animating your data itself? For example:\n\n- numbers and calculations\n- colors displayed\n- the positions of SVG nodes\n- the sizes and other properties of elements\n\nAll of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue's reactivity and component systems.\n\n## Animating State with Watchers\n\nWatchers allow us to animate changes of any numerical property into another property. That may sound complicated in the abstract, so let's dive into an example using Tween.js:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n\n<div id=\"animated-number-demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"animated-number-demo\" class=\"demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n</script>\n{% endraw %}\n\nWhen you update the number, the change is animated below the input. This makes for a nice demo, but what about something that isn't directly stored as a number, like any valid CSS color for example? Here's how we could accomplish this with the addition of Color.js:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n\n<div id=\"example-7\">\n  <input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  >\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  ></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n```\n\n``` js\nvar Color = net.brehaut.Color\n\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n```\n\n``` css\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n<div id=\"example-7\" class=\"demo\">\n  <input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  >\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  ></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n<script>\nvar Color = net.brehaut.Color\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n</script>\n<style>\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n</style>\n{% endraw %}\n\n## Dynamic State Transitions\n\nJust as with Vue's transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you've played with the variables a little.\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.5/TweenLite.min.js\"></script>\n<div id=\"svg-polygon-demo\" class=\"demo\">\n  <svg width=\"200\" height=\"200\" class=\"demo-svg\">\n    <polygon :points=\"points\" class=\"demo-polygon\"></polygon>\n    <circle cx=\"100\" cy=\"100\" r=\"90\" class=\"demo-circle\"></circle>\n  </svg>\n  <label>Sides: {{ sides }}</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"3\"\n    max=\"500\"\n    v-model.number=\"sides\"\n  >\n  <label>Minimum Radius: {{ minRadius }}%</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"0\"\n    max=\"90\"\n    v-model.number=\"minRadius\"\n  >\n  <label>Update Interval: {{ updateInterval }} milliseconds</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"10\"\n    max=\"2000\"\n    v-model.number=\"updateInterval\"\n  >\n</div>\n<script>\nnew Vue({\n  el: '#svg-polygon-demo',\n  data: function () {\n    var defaultSides = 10\n    var stats = Array.apply(null, { length: defaultSides })\n      .map(function () { return 100 })\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    }\n  },\n  watch: {\n    sides: function (newSides, oldSides) {\n      var sidesDifference = newSides - oldSides\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue())\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference)\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift()\n        }\n      }\n    },\n    stats: function (newStats) {\n      TweenLite.to(\n        this.$data,\n        this.updateInterval / 1000,\n        { points: generatePoints(newStats) }\n      )\n    },\n    updateInterval: function () {\n      this.resetInterval()\n    }\n  },\n  mounted: function () {\n    this.resetInterval()\n  },\n  methods: {\n    randomizeStats: function () {\n      var vm = this\n      this.stats = this.stats.map(function () {\n        return vm.newRandomValue()\n      })\n    },\n    newRandomValue: function () {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n    },\n    resetInterval: function () {\n      var vm = this\n      clearInterval(this.interval)\n      this.randomizeStats()\n      this.interval = setInterval(function () {\n        vm.randomizeStats()\n      }, this.updateInterval)\n    }\n  }\n})\n\nfunction valueToPoint (value, index, total) {\n  var x     = 0\n  var y     = -value * 0.9\n  var angle = Math.PI * 2 / total * index\n  var cos   = Math.cos(angle)\n  var sin   = Math.sin(angle)\n  var tx    = x * cos - y * sin + 100\n  var ty    = x * sin + y * cos + 100\n  return { x: tx, y: ty }\n}\n\nfunction generatePoints (stats) {\n  var total = stats.length\n  return stats.map(function (stat, index) {\n    var point = valueToPoint(stat, index, total)\n    return point.x + ',' + point.y\n  }).join(' ')\n}\n</script>\n<style>\n.demo-svg { display: block; }\n.demo-polygon { fill: #41B883; }\n.demo-circle {\n  fill: transparent;\n  stroke: #35495E;\n}\n.demo-range-input {\n  display: block;\n  width: 100%;\n  margin-bottom: 15px;\n}\n</style>\n{% endraw %}\n\nSee [this fiddle](https://jsfiddle.net/chrisvfritz/65gLu2b6/) for the complete code behind the above demo.\n\n## Organizing Transitions into Components\n\nManaging many state transitions can quickly increase the complexity of a Vue instance or component. Fortunately, many animations can be extracted out into dedicated child components. Let's do this with the animated integer from our earlier example:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n\n<div id=\"example-8\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n```\n\n``` js\n// This complex tweening logic can now be reused between\n// any integers we may wish to animate in our application.\n// Components also offer a clean interface for configuring\n// more dynamic transitions and complex transition\n// strategies.\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n\n// All complexity has now been removed from the main Vue instance!\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"example-8\" class=\"demo\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n<script>\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n</script>\n{% endraw %}\n\nWithin child components, we can use any combination of transition strategies that have been covered on this page, along with those offered by Vue's [built-in transition system](transitions.html). Together, there are very few limits to what can be accomplished.\n","source":"v2/guide/transitioning-state.md","raw":"---\ntitle: Transitioning State\ntype: guide\norder: 14\n---\n\nVue's transition system offers many simple ways to animate entering, leaving, and lists, but what about animating your data itself? For example:\n\n- numbers and calculations\n- colors displayed\n- the positions of SVG nodes\n- the sizes and other properties of elements\n\nAll of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue's reactivity and component systems.\n\n## Animating State with Watchers\n\nWatchers allow us to animate changes of any numerical property into another property. That may sound complicated in the abstract, so let's dive into an example using Tween.js:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n\n<div id=\"animated-number-demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"animated-number-demo\" class=\"demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n</script>\n{% endraw %}\n\nWhen you update the number, the change is animated below the input. This makes for a nice demo, but what about something that isn't directly stored as a number, like any valid CSS color for example? Here's how we could accomplish this with the addition of Color.js:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n\n<div id=\"example-7\">\n  <input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  >\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  ></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n```\n\n``` js\nvar Color = net.brehaut.Color\n\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n```\n\n``` css\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n<div id=\"example-7\" class=\"demo\">\n  <input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  >\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  ></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n<script>\nvar Color = net.brehaut.Color\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n</script>\n<style>\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n</style>\n{% endraw %}\n\n## Dynamic State Transitions\n\nJust as with Vue's transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you've played with the variables a little.\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.5/TweenLite.min.js\"></script>\n<div id=\"svg-polygon-demo\" class=\"demo\">\n  <svg width=\"200\" height=\"200\" class=\"demo-svg\">\n    <polygon :points=\"points\" class=\"demo-polygon\"></polygon>\n    <circle cx=\"100\" cy=\"100\" r=\"90\" class=\"demo-circle\"></circle>\n  </svg>\n  <label>Sides: {{ sides }}</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"3\"\n    max=\"500\"\n    v-model.number=\"sides\"\n  >\n  <label>Minimum Radius: {{ minRadius }}%</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"0\"\n    max=\"90\"\n    v-model.number=\"minRadius\"\n  >\n  <label>Update Interval: {{ updateInterval }} milliseconds</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"10\"\n    max=\"2000\"\n    v-model.number=\"updateInterval\"\n  >\n</div>\n<script>\nnew Vue({\n  el: '#svg-polygon-demo',\n  data: function () {\n    var defaultSides = 10\n    var stats = Array.apply(null, { length: defaultSides })\n      .map(function () { return 100 })\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    }\n  },\n  watch: {\n    sides: function (newSides, oldSides) {\n      var sidesDifference = newSides - oldSides\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue())\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference)\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift()\n        }\n      }\n    },\n    stats: function (newStats) {\n      TweenLite.to(\n        this.$data,\n        this.updateInterval / 1000,\n        { points: generatePoints(newStats) }\n      )\n    },\n    updateInterval: function () {\n      this.resetInterval()\n    }\n  },\n  mounted: function () {\n    this.resetInterval()\n  },\n  methods: {\n    randomizeStats: function () {\n      var vm = this\n      this.stats = this.stats.map(function () {\n        return vm.newRandomValue()\n      })\n    },\n    newRandomValue: function () {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n    },\n    resetInterval: function () {\n      var vm = this\n      clearInterval(this.interval)\n      this.randomizeStats()\n      this.interval = setInterval(function () {\n        vm.randomizeStats()\n      }, this.updateInterval)\n    }\n  }\n})\n\nfunction valueToPoint (value, index, total) {\n  var x     = 0\n  var y     = -value * 0.9\n  var angle = Math.PI * 2 / total * index\n  var cos   = Math.cos(angle)\n  var sin   = Math.sin(angle)\n  var tx    = x * cos - y * sin + 100\n  var ty    = x * sin + y * cos + 100\n  return { x: tx, y: ty }\n}\n\nfunction generatePoints (stats) {\n  var total = stats.length\n  return stats.map(function (stat, index) {\n    var point = valueToPoint(stat, index, total)\n    return point.x + ',' + point.y\n  }).join(' ')\n}\n</script>\n<style>\n.demo-svg { display: block; }\n.demo-polygon { fill: #41B883; }\n.demo-circle {\n  fill: transparent;\n  stroke: #35495E;\n}\n.demo-range-input {\n  display: block;\n  width: 100%;\n  margin-bottom: 15px;\n}\n</style>\n{% endraw %}\n\nSee [this fiddle](https://jsfiddle.net/chrisvfritz/65gLu2b6/) for the complete code behind the above demo.\n\n## Organizing Transitions into Components\n\nManaging many state transitions can quickly increase the complexity of a Vue instance or component. Fortunately, many animations can be extracted out into dedicated child components. Let's do this with the animated integer from our earlier example:\n\n``` html\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n\n<div id=\"example-8\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n```\n\n``` js\n// This complex tweening logic can now be reused between\n// any integers we may wish to animate in our application.\n// Components also offer a clean interface for configuring\n// more dynamic transitions and complex transition\n// strategies.\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n\n// All complexity has now been removed from the main Vue instance!\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"example-8\" class=\"demo\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n<script>\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n</script>\n{% endraw %}\n\nWithin child components, we can use any combination of transition strategies that have been covered on this page, along with those offered by Vue's [built-in transition system](transitions.html). Together, there are very few limits to what can be accomplished.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/transitioning-state.html","comments":1,"layout":"page","_id":"civ8jcjoy001g91m1mqlyoubc","content":"<p>Vue’s transition system offers many simple ways to animate entering, leaving, and lists, but what about animating your data itself? For example:</p>\n<ul>\n<li>numbers and calculations</li>\n<li>colors displayed</li>\n<li>the positions of SVG nodes</li>\n<li>the sizes and other properties of elements</li>\n</ul>\n<p>All of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue’s reactivity and component systems.</p>\n<h2 id=\"Animating-State-with-Watchers\"><a href=\"#Animating-State-with-Watchers\" class=\"headerlink\" title=\"Animating State with Watchers\"></a>Animating State with Watchers</h2><p>Watchers allow us to animate changes of any numerical property into another property. That may sound complicated in the abstract, so let’s dive into an example using Tween.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"animated-number-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; animatedNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#animated-number-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">number</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">animatedNumber</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">number</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(&#123; <span class=\"attr\">tweeningNumber</span>: oldValue &#125;)</div><div class=\"line\">        .easing(TWEEN.Easing.Quadratic.Out)</div><div class=\"line\">        .to(&#123; <span class=\"attr\">tweeningNumber</span>: newValue &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">        .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.animatedNumber = <span class=\"keyword\">this</span>.tweeningNumber.toFixed(<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"animated-number-demo\" class=\"demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n</script>\n\n<p>When you update the number, the change is animated below the input. This makes for a nice demo, but what about something that isn’t directly stored as a number, like any valid CSS color for example? Here’s how we could accomplish this with the addition of Color.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/color-js@1.0.3/color.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"colorQuery\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"updateColor\"</span></div><div class=\"line\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter a color\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"updateColor\"</span>&gt;</span>Update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Preview:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span></span></div><div class=\"line\">    <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; backgroundColor: tweenedCSSColor &#125;\"</span></div><div class=\"line\">    <span class=\"attr\">class</span>=<span class=\"string\">\"example-7-color-preview\"</span></div><div class=\"line\">  &gt;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; tweenedCSSColor &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Color = net.brehaut.Color</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">colorQuery</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">color</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">red</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">green</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">blue</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">alpha</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">tweenedColor</span>: &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tweenedColor = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.color)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(<span class=\"keyword\">this</span>.tweenedColor)</div><div class=\"line\">        .to(<span class=\"keyword\">this</span>.color, <span class=\"number\">750</span>)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">tweenedCSSColor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(&#123;</div><div class=\"line\">        <span class=\"attr\">red</span>: <span class=\"keyword\">this</span>.tweenedColor.red,</div><div class=\"line\">        <span class=\"attr\">green</span>: <span class=\"keyword\">this</span>.tweenedColor.green,</div><div class=\"line\">        <span class=\"attr\">blue</span>: <span class=\"keyword\">this</span>.tweenedColor.blue,</div><div class=\"line\">        <span class=\"attr\">alpha</span>: <span class=\"keyword\">this</span>.tweenedColor.alpha</div><div class=\"line\">      &#125;).toCSS()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateColor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"keyword\">new</span> Color(<span class=\"keyword\">this</span>.colorQuery).toRGB()</div><div class=\"line\">      <span class=\"keyword\">this</span>.colorQuery = <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.example-7-color-preview</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n<div id=\"example-7\" class=\"demo\">\n  <input v-model=\"colorQuery\" v-on:keyup.enter=\"updateColor\" placeholder=\"Enter a color\">\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span v-bind:style=\"{ backgroundColor: tweenedCSSColor }\" class=\"example-7-color-preview\"></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n<script>\nvar Color = net.brehaut.Color\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n</script>\n<style>\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n</style>\n\n<h2 id=\"Dynamic-State-Transitions\"><a href=\"#Dynamic-State-Transitions\" class=\"headerlink\" title=\"Dynamic State Transitions\"></a>Dynamic State Transitions</h2><p>Just as with Vue’s transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you’ve played with the variables a little.</p>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.5/TweenLite.min.js\"></script>\n<div id=\"svg-polygon-demo\" class=\"demo\">\n  <svg width=\"200\" height=\"200\" class=\"demo-svg\">\n    <polygon :points=\"points\" class=\"demo-polygon\"/>\n    <circle cx=\"100\" cy=\"100\" r=\"90\" class=\"demo-circle\"/>\n  </svg>\n  <label>Sides: {{ sides }}</label>\n  <input class=\"demo-range-input\" type=\"range\" min=\"3\" max=\"500\" v-model.number=\"sides\">\n  <label>Minimum Radius: {{ minRadius }}%</label>\n  <input class=\"demo-range-input\" type=\"range\" min=\"0\" max=\"90\" v-model.number=\"minRadius\">\n  <label>Update Interval: {{ updateInterval }} milliseconds</label>\n  <input class=\"demo-range-input\" type=\"range\" min=\"10\" max=\"2000\" v-model.number=\"updateInterval\">\n</div>\n<script>\nnew Vue({\n  el: '#svg-polygon-demo',\n  data: function () {\n    var defaultSides = 10\n    var stats = Array.apply(null, { length: defaultSides })\n      .map(function () { return 100 })\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    }\n  },\n  watch: {\n    sides: function (newSides, oldSides) {\n      var sidesDifference = newSides - oldSides\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue())\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference)\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift()\n        }\n      }\n    },\n    stats: function (newStats) {\n      TweenLite.to(\n        this.$data,\n        this.updateInterval / 1000,\n        { points: generatePoints(newStats) }\n      )\n    },\n    updateInterval: function () {\n      this.resetInterval()\n    }\n  },\n  mounted: function () {\n    this.resetInterval()\n  },\n  methods: {\n    randomizeStats: function () {\n      var vm = this\n      this.stats = this.stats.map(function () {\n        return vm.newRandomValue()\n      })\n    },\n    newRandomValue: function () {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n    },\n    resetInterval: function () {\n      var vm = this\n      clearInterval(this.interval)\n      this.randomizeStats()\n      this.interval = setInterval(function () {\n        vm.randomizeStats()\n      }, this.updateInterval)\n    }\n  }\n})\n\nfunction valueToPoint (value, index, total) {\n  var x     = 0\n  var y     = -value * 0.9\n  var angle = Math.PI * 2 / total * index\n  var cos   = Math.cos(angle)\n  var sin   = Math.sin(angle)\n  var tx    = x * cos - y * sin + 100\n  var ty    = x * sin + y * cos + 100\n  return { x: tx, y: ty }\n}\n\nfunction generatePoints (stats) {\n  var total = stats.length\n  return stats.map(function (stat, index) {\n    var point = valueToPoint(stat, index, total)\n    return point.x + ',' + point.y\n  }).join(' ')\n}\n</script>\n<style>\n.demo-svg { display: block; }\n.demo-polygon { fill: #41B883; }\n.demo-circle {\n  fill: transparent;\n  stroke: #35495E;\n}\n.demo-range-input {\n  display: block;\n  width: 100%;\n  margin-bottom: 15px;\n}\n</style>\n\n<p>See <a href=\"https://jsfiddle.net/chrisvfritz/65gLu2b6/\" target=\"_blank\" rel=\"external\">this fiddle</a> for the complete code behind the above demo.</p>\n<h2 id=\"Organizing-Transitions-into-Components\"><a href=\"#Organizing-Transitions-into-Components\" class=\"headerlink\" title=\"Organizing Transitions into Components\"></a>Organizing Transitions into Components</h2><p>Managing many state transitions can quickly increase the complexity of a Vue instance or component. Fortunately, many animations can be extracted out into dedicated child components. Let’s do this with the animated integer from our earlier example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"firstNumber\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span> +</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"secondNumber\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span> =</div><div class=\"line\">  &#123;&#123; result &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"firstNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span> +</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"secondNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span> =</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This complex tweening logic can now be reused between</span></div><div class=\"line\"><span class=\"comment\">// any integers we may wish to animate in our application.</span></div><div class=\"line\"><span class=\"comment\">// Components also offer a clean interface for configuring</span></div><div class=\"line\"><span class=\"comment\">// more dynamic transitions and complex transition</span></div><div class=\"line\"><span class=\"comment\">// strategies.</span></div><div class=\"line\">Vue.component(<span class=\"string\">'animated-integer'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; tweeningValue &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">tweeningValue</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.tween(oldValue, newValue)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tween(<span class=\"number\">0</span>, <span class=\"keyword\">this</span>.value)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">tween</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">startValue, endValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(&#123; <span class=\"attr\">tweeningValue</span>: startValue &#125;)</div><div class=\"line\">        .to(&#123; <span class=\"attr\">tweeningValue</span>: endValue &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">        .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.tweeningValue = <span class=\"keyword\">this</span>.tweeningValue.toFixed(<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// All complexity has now been removed from the main Vue instance!</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-8'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstNumber</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">secondNumber</span>: <span class=\"number\">40</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstNumber + <span class=\"keyword\">this</span>.secondNumber</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"example-8\" class=\"demo\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n<script>\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n</script>\n\n<p>Within child components, we can use any combination of transition strategies that have been covered on this page, along with those offered by Vue’s <a href=\"transitions.html\">built-in transition system</a>. Together, there are very few limits to what can be accomplished.</p>\n","excerpt":"","more":"<p>Vue’s transition system offers many simple ways to animate entering, leaving, and lists, but what about animating your data itself? For example:</p>\n<ul>\n<li>numbers and calculations</li>\n<li>colors displayed</li>\n<li>the positions of SVG nodes</li>\n<li>the sizes and other properties of elements</li>\n</ul>\n<p>All of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue’s reactivity and component systems.</p>\n<h2 id=\"Animating-State-with-Watchers\"><a href=\"#Animating-State-with-Watchers\" class=\"headerlink\" title=\"Animating State with Watchers\"></a>Animating State with Watchers</h2><p>Watchers allow us to animate changes of any numerical property into another property. That may sound complicated in the abstract, so let’s dive into an example using Tween.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"animated-number-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; animatedNumber &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#animated-number-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">number</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">animatedNumber</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">number</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(&#123; <span class=\"attr\">tweeningNumber</span>: oldValue &#125;)</div><div class=\"line\">        .easing(TWEEN.Easing.Quadratic.Out)</div><div class=\"line\">        .to(&#123; <span class=\"attr\">tweeningNumber</span>: newValue &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">        .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.animatedNumber = <span class=\"keyword\">this</span>.tweeningNumber.toFixed(<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"animated-number-demo\" class=\"demo\">\n  <input v-model.number=\"number\" type=\"number\" step=\"20\">\n  <p>{{ animatedNumber }}</p>\n</div>\n<script>\nnew Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n</script>\n\n<p>When you update the number, the change is animated below the input. This makes for a nice demo, but what about something that isn’t directly stored as a number, like any valid CSS color for example? Here’s how we could accomplish this with the addition of Color.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/color-js@1.0.3/color.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></div><div class=\"line\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"colorQuery\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"updateColor\"</span></div><div class=\"line\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter a color\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"updateColor\"</span>&gt;</span>Update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Preview:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span></div><div class=\"line\">    <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; backgroundColor: tweenedCSSColor &#125;\"</span></div><div class=\"line\">    <span class=\"attr\">class</span>=<span class=\"string\">\"example-7-color-preview\"</span></div><div class=\"line\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; tweenedCSSColor &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Color = net.brehaut.Color</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">colorQuery</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">color</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">red</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">green</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">blue</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">alpha</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">tweenedColor</span>: &#123;&#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tweenedColor = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.color)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(<span class=\"keyword\">this</span>.tweenedColor)</div><div class=\"line\">        .to(<span class=\"keyword\">this</span>.color, <span class=\"number\">750</span>)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">tweenedCSSColor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(&#123;</div><div class=\"line\">        <span class=\"attr\">red</span>: <span class=\"keyword\">this</span>.tweenedColor.red,</div><div class=\"line\">        <span class=\"attr\">green</span>: <span class=\"keyword\">this</span>.tweenedColor.green,</div><div class=\"line\">        <span class=\"attr\">blue</span>: <span class=\"keyword\">this</span>.tweenedColor.blue,</div><div class=\"line\">        <span class=\"attr\">alpha</span>: <span class=\"keyword\">this</span>.tweenedColor.alpha</div><div class=\"line\">      &#125;).toCSS()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">updateColor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"keyword\">new</span> Color(<span class=\"keyword\">this</span>.colorQuery).toRGB()</div><div class=\"line\">      <span class=\"keyword\">this</span>.colorQuery = <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.example-7-color-preview</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<script src=\"https://unpkg.com/color-js@1.0.3/color.js\"></script>\n<div id=\"example-7\" class=\"demo\">\n  <input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  >\n  <button v-on:click=\"updateColor\">Update</button>\n  <p>Preview:</p>\n  <span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  ></span>\n  <p>{{ tweenedCSSColor }}</p>\n</div>\n<script>\nvar Color = net.brehaut.Color\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})\n</script>\n<style>\n.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}\n</style>\n\n<h2 id=\"Dynamic-State-Transitions\"><a href=\"#Dynamic-State-Transitions\" class=\"headerlink\" title=\"Dynamic State Transitions\"></a>Dynamic State Transitions</h2><p>Just as with Vue’s transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you’ve played with the variables a little.</p>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/1.18.5/TweenLite.min.js\"></script>\n<div id=\"svg-polygon-demo\" class=\"demo\">\n  <svg width=\"200\" height=\"200\" class=\"demo-svg\">\n    <polygon :points=\"points\" class=\"demo-polygon\"></polygon>\n    <circle cx=\"100\" cy=\"100\" r=\"90\" class=\"demo-circle\"></circle>\n  </svg>\n  <label>Sides: {{ sides }}</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"3\"\n    max=\"500\"\n    v-model.number=\"sides\"\n  >\n  <label>Minimum Radius: {{ minRadius }}%</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"0\"\n    max=\"90\"\n    v-model.number=\"minRadius\"\n  >\n  <label>Update Interval: {{ updateInterval }} milliseconds</label>\n  <input\n    class=\"demo-range-input\"\n    type=\"range\"\n    min=\"10\"\n    max=\"2000\"\n    v-model.number=\"updateInterval\"\n  >\n</div>\n<script>\nnew Vue({\n  el: '#svg-polygon-demo',\n  data: function () {\n    var defaultSides = 10\n    var stats = Array.apply(null, { length: defaultSides })\n      .map(function () { return 100 })\n    return {\n      stats: stats,\n      points: generatePoints(stats),\n      sides: defaultSides,\n      minRadius: 50,\n      interval: null,\n      updateInterval: 500\n    }\n  },\n  watch: {\n    sides: function (newSides, oldSides) {\n      var sidesDifference = newSides - oldSides\n      if (sidesDifference > 0) {\n        for (var i = 1; i <= sidesDifference; i++) {\n          this.stats.push(this.newRandomValue())\n        }\n      } else {\n        var absoluteSidesDifference = Math.abs(sidesDifference)\n        for (var i = 1; i <= absoluteSidesDifference; i++) {\n          this.stats.shift()\n        }\n      }\n    },\n    stats: function (newStats) {\n      TweenLite.to(\n        this.$data,\n        this.updateInterval / 1000,\n        { points: generatePoints(newStats) }\n      )\n    },\n    updateInterval: function () {\n      this.resetInterval()\n    }\n  },\n  mounted: function () {\n    this.resetInterval()\n  },\n  methods: {\n    randomizeStats: function () {\n      var vm = this\n      this.stats = this.stats.map(function () {\n        return vm.newRandomValue()\n      })\n    },\n    newRandomValue: function () {\n      return Math.ceil(this.minRadius + Math.random() * (100 - this.minRadius))\n    },\n    resetInterval: function () {\n      var vm = this\n      clearInterval(this.interval)\n      this.randomizeStats()\n      this.interval = setInterval(function () {\n        vm.randomizeStats()\n      }, this.updateInterval)\n    }\n  }\n})\n\nfunction valueToPoint (value, index, total) {\n  var x     = 0\n  var y     = -value * 0.9\n  var angle = Math.PI * 2 / total * index\n  var cos   = Math.cos(angle)\n  var sin   = Math.sin(angle)\n  var tx    = x * cos - y * sin + 100\n  var ty    = x * sin + y * cos + 100\n  return { x: tx, y: ty }\n}\n\nfunction generatePoints (stats) {\n  var total = stats.length\n  return stats.map(function (stat, index) {\n    var point = valueToPoint(stat, index, total)\n    return point.x + ',' + point.y\n  }).join(' ')\n}\n</script>\n<style>\n.demo-svg { display: block; }\n.demo-polygon { fill: #41B883; }\n.demo-circle {\n  fill: transparent;\n  stroke: #35495E;\n}\n.demo-range-input {\n  display: block;\n  width: 100%;\n  margin-bottom: 15px;\n}\n</style>\n\n<p>See <a href=\"https://jsfiddle.net/chrisvfritz/65gLu2b6/\">this fiddle</a> for the complete code behind the above demo.</p>\n<h2 id=\"Organizing-Transitions-into-Components\"><a href=\"#Organizing-Transitions-into-Components\" class=\"headerlink\" title=\"Organizing Transitions into Components\"></a>Organizing Transitions into Components</h2><p>Managing many state transitions can quickly increase the complexity of a Vue instance or component. Fortunately, many animations can be extracted out into dedicated child components. Let’s do this with the animated integer from our earlier example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/tween.js@16.3.4\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"firstNumber\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span> +</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"secondNumber\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span> =</div><div class=\"line\">  &#123;&#123; result &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"firstNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span> +</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"secondNumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span> =</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">animated-integer</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">animated-integer</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This complex tweening logic can now be reused between</span></div><div class=\"line\"><span class=\"comment\">// any integers we may wish to animate in our application.</span></div><div class=\"line\"><span class=\"comment\">// Components also offer a clean interface for configuring</span></div><div class=\"line\"><span class=\"comment\">// more dynamic transitions and complex transition</span></div><div class=\"line\"><span class=\"comment\">// strategies.</span></div><div class=\"line\">Vue.component(<span class=\"string\">'animated-integer'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123;&#123; tweeningValue &#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">tweeningValue</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.tween(oldValue, newValue)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tween(<span class=\"number\">0</span>, <span class=\"keyword\">this</span>.value)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">tween</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">startValue, endValue</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">        requestAnimationFrame(animate)</div><div class=\"line\">        TWEEN.update(time)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(&#123; <span class=\"attr\">tweeningValue</span>: startValue &#125;)</div><div class=\"line\">        .to(&#123; <span class=\"attr\">tweeningValue</span>: endValue &#125;, <span class=\"number\">500</span>)</div><div class=\"line\">        .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          vm.tweeningValue = <span class=\"keyword\">this</span>.tweeningValue.toFixed(<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .start()</div><div class=\"line\">      animate()</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// All complexity has now been removed from the main Vue instance!</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-8'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstNumber</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">secondNumber</span>: <span class=\"number\">40</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstNumber + <span class=\"keyword\">this</span>.secondNumber</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://unpkg.com/tween.js@16.3.4\"></script>\n<div id=\"example-8\" class=\"demo\">\n  <input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"> +\n  <input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"> =\n  {{ result }}\n  <p>\n    <animated-integer v-bind:value=\"firstNumber\"></animated-integer> +\n    <animated-integer v-bind:value=\"secondNumber\"></animated-integer> =\n    <animated-integer v-bind:value=\"result\"></animated-integer>\n  </p>\n</div>\n<script>\nVue.component('animated-integer', {\n  template: '<span>{{ tweeningValue }}</span>',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})\n</script>\n\n<p>Within child components, we can use any combination of transition strategies that have been covered on this page, along with those offered by Vue’s <a href=\"transitions.html\">built-in transition system</a>. Together, there are very few limits to what can be accomplished.</p>\n"},{"title":"Transition Effects","type":"guide","order":13,"_content":"\n## Overview\n\nVue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:\n\n- automatically apply classes for CSS transitions and animations\n- integrate 3rd-party CSS animation libraries, such as Animate.css\n- use JavaScript to directly manipulate the DOM during transition hooks\n- integrate 3rd-party JavaScript animation libraries, such as Velocity.js\n\nOn this page, we'll only cover entering, leaving, and list transitions, but you can see the next section for [managing state transitions](transitioning-state.html).\n\n## Transitioning Single Elements/Components\n\nVue provides a `transition` wrapper component, allowing you to add entering/leaving transitions for any element or component in the following contexts:\n\n- Conditional rendering (using `v-if`)\n- Conditional display (using `v-show`)\n- Dynamic components\n- Component root nodes\n\nThis is what a very simple example looks like in action:\n\n``` html\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n.fade-enter-active, .fade-leave-active {\n  transition: opacity .5s\n}\n.fade-enter, .fade-leave-active {\n  opacity: 0\n}\n```\n\n{% raw %}\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"demo-transition\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.demo-transition-enter-active, .demo-transition-leave-active {\n  transition: opacity .5s\n}\n.demo-transition-enter, .demo-transition-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nWhen an element wrapped in a `transition` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition classes will be added/removed at appropriate timings.\n\n2. If the transition component provided [JavaScript hooks](#JavaScript-Hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue's concept of `nextTick`).\n\n### Transition Classes\n\nThere are four classes applied for enter/leave transitions.\n\n1. `v-enter`: Starting state for enter. Applied before element is inserted, removed after one frame.\n2. `v-enter-active`: Active and ending state for enter. Applied before element is inserted, removed when transition/animation finishes.\n3. `v-leave`: Starting state for leave. Applied when leave transition is triggered, removed after one frame.\n4. `v-leave-active`: Active and ending state for leave. Applied when leave transition is triggered, removed when the transition/animation finishes.\n\n![Transition Diagram](/images/transition.png)\n\nEach of these classes will be prefixed with the name of the transition. Here the `v-` prefix is the default when you use a `<transition>` element with no name. If you use `<transition name=\"my-transition\">` for example, then the `v-enter` class would instead be `my-transition-enter`.\n\n`v-enter-active` and `v-leave-active` give you the ability to specify different easing curves for enter/leave transitions, which you'll see an example of in the following section.\n\n### CSS Transitions\n\nOne of the most common transition types uses CSS transitions. Here's a simple example:\n\n``` html\n<div id=\"example-1\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n/* Enter and leave animations can use different */\n/* durations and timing functions.              */\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n```\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n</style>\n{% endraw %}\n\n### CSS Animations\n\nCSS animations are applied in the same way as CSS transitions, the difference being that `v-enter` is not removed immediately after the element is inserted, but on an `animationend` event.\n\nHere's an example, omitting prefixed CSS rules for the sake of brevity:\n\n``` html\n<div id=\"example-2\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-if=\"show\">Look at me!</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n.bounce-enter-active {\n  animation: bounce-in .5s;\n}\n.bounce-leave-active {\n  animation: bounce-out .5s;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes bounce-out {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n```\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-show=\"show\">Look at me!</p>\n  </transition>\n</div>\n\n<style>\n  .bounce-enter-active {\n    -webkit-animation: bounce-in .5s;\n    animation: bounce-in .5s;\n  }\n  .bounce-leave-active {\n    -webkit-animation: bounce-out .5s;\n    animation: bounce-out .5s;\n  }\n  @keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n  @-webkit-keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @-webkit-keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n</style>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n</script>\n{% endraw %}\n\n### Custom Transition Classes\n\nYou can also specify custom transition classes by providing the following attributes:\n\n- `enter-class`\n- `enter-active-class`\n- `leave-class`\n- `leave-active-class`\n\nThese will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as [Animate.css](https://daneden.github.io/animate.css/).\n\nHere's an example:\n\n``` html\n<link href=\"https://unpkg.com/animate.css@3.5.1/animate.min.css\" rel=\"stylesheet\" type=\"text/css\">\n\n<div id=\"example-3\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n```\n\n{% raw %}\n<link href=\"https://unpkg.com/animate.css@3.5.1\" rel=\"stylesheet\" type=\"text/css\">\n<div id=\"example-3\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n</script>\n{% endraw %}\n\n### Using Transitions and Animations Together\n\nVue needs to attach event listeners in order to know when a transition has ended. It can either be `transitionend` or `animationend`, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type.\n\nHowever, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about in a `type` attribute, with a value of either `animation` or `transition`.\n\n### JavaScript Hooks\n\nYou can also define JavaScript hooks in attributes:\n\n``` html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n\n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n\n``` js\n// ...\nmethods: {\n  // --------\n  // ENTERING\n  // --------\n\n  beforeEnter: function (el) {\n    // ...\n  },\n  // the done callback is optional when\n  // used in combination with CSS\n  enter: function (el, done) {\n    // ...\n    done()\n  },\n  afterEnter: function (el) {\n    // ...\n  },\n  enterCancelled: function (el) {\n    // ...\n  },\n\n  // --------\n  // LEAVING\n  // --------\n\n  beforeLeave: function (el) {\n    // ...\n  },\n  // the done callback is optional when\n  // used in combination with CSS\n  leave: function (el, done) {\n    // ...\n    done()\n  },\n  afterLeave: function (el) {\n    // ...\n  },\n  // leaveCancelled only available with v-show\n  leaveCancelled: function (el) {\n    // ...\n  }\n}\n```\n\nThese hooks can be used in combination with CSS transitions/animations or on their own.\n\n<p class=\"tip\">When using JavaScript-only transitions, **the `done` callbacks are required for the `enter` and `leave` hooks**. Otherwise, they will be called synchronously and the transition will finish immediately.</p>\n\n<p class=\"tip\">It's also a good idea to explicitly add `v-bind:css=\"false\"` for JavaScript-only transitions so that Vue can skip the CSS detection. This also prevents CSS rules from accidentally interfering with the transition.</p>\n\nNow let's dive into an example. Here's a simple JavaScript transition using Velocity.js:\n\n``` html\n<!--\nVelocity works very much like jQuery.animate and is\na great option for JavaScript animations\n-->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"example-4\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n    v-bind:css=\"false\"\n  >\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"example-4\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.transformOrigin = 'left'\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Transitions on Initial Render\n\nIf you also want to apply a transition on the initial render of a node, you can add the `appear` attribute:\n\n``` html\n<transition appear>\n  <!-- ... -->\n</transition>\n```\n\nBy default, this will use the transitions specified for entering and leaving. If you'd like however, you can also specify custom CSS classes:\n\n``` html\n<transition\n  appear\n  appear-class=\"custom-appear-class\"\n  appear-active-class=\"custom-appear-active-class\"\n>\n  <!-- ... -->\n</transition>\n```\n\nand custom JavaScript hooks:\n\n``` html\n<transition\n  appear\n  v-on:before-appear=\"customBeforeAppearHook\"\n  v-on:appear=\"customAppearHook\"\n  v-on:after-appear=\"customAfterAppearHook\"\n>\n  <!-- ... -->\n</transition>\n```\n\n## Transitioning Between Elements\n\nWe discuss [transitioning between components](#Transitioning-Between-Components) later, but you can also transition between raw elements using `v-if`/`v-else`. One of the most common two-element transitions is between a list container and a message describing an empty list:\n\n``` html\n<transition>\n  <table v-if=\"items.length > 0\">\n    <!-- ... -->\n  </table>\n  <p v-else>Sorry, no items found.</p>\n</transition>\n```\n\nThis works well, but there's one caveat to be aware of:\n\n<p class=\"tip\">When toggling between elements that have **the same tag name**, you must tell Vue that they are distinct elements by giving them unique `key` attributes. Otherwise, Vue's compiler will only replace the content of the element for efficiency. Even when technically unnecessary though, **it's considered good practice to always key multiple items within a `<transition>` component.**</p>\n\nFor example:\n\n``` html\n<transition>\n  <button v-if=\"isEditing\" key=\"save\">\n    Save\n  </button>\n  <button v-else key=\"edit\">\n    Edit\n  </button>\n</transition>\n```\n\nIn these cases, you can also use the `key` attribute to transition between different states of the same element. Instead of using `v-if` and `v-else`, the above example could be rewritten as:\n\n``` html\n<transition>\n  <button v-bind:key=\"isEditing\">\n    {{ isEditing ? 'Save' : 'Edit' }}\n  </button>\n</transition>\n```\n\nIt's actually possible to transition between any number of elements, either by using multiple `v-if`s or binding a single element to a dynamic property. For example:\n\n``` html\n<transition>\n  <button v-if=\"docState === 'saved'\" key=\"saved\">\n    Edit\n  </button>\n  <button v-if=\"docState === 'edited'\" key=\"edited\">\n    Save\n  </button>\n  <button v-if=\"docState === 'editing'\" key=\"editing\">\n    Cancel\n  </button>\n</transition>\n```\n\nWhich could also be written as:\n\n``` html\n<transition>\n  <button v-bind:key=\"docState\">\n    {{ buttonMessage }}\n  </button>\n</transition>\n```\n\n``` js\n// ...\ncomputed: {\n  buttonMessage: function () {\n    switch (docState) {\n      case 'saved': return 'Edit'\n      case 'edited': return 'Save'\n      case 'editing': return 'Cancel'\n    }\n  }\n}\n```\n\n### Transition Modes\n\nThere's still one problem though. Try clicking the button below:\n\n{% raw %}\n<div id=\"no-mode-demo\" class=\"demo\">\n  <transition name=\"no-mode-fade\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-fade-enter-active, .no-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.no-mode-fade-enter, .no-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nAs it's transitioning between the \"on\" button and the \"off\" button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of `<transition>` - entering and leaving happens simultaneously.\n\nSometimes this works great, like when transitioning items are absolutely positioned on top of each other:\n\n{% raw %}\n<div id=\"no-mode-absolute-demo\" class=\"demo\">\n  <div class=\"no-mode-absolute-demo-wrapper\">\n    <transition name=\"no-mode-absolute-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-absolute-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-absolute-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-absolute-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-absolute-fade-enter-active, .no-mode-absolute-fade-leave-active {\n  transition: opacity .5s;\n}\n.no-mode-absolute-fade-enter, .no-mode-absolute-fade-leave-active {\n  opacity: 0;\n}\n</style>\n{% endraw %}\n\nAnd then maybe also translated so that they look like slide transitions:\n\n{% raw %}\n<div id=\"no-mode-translate-demo\" class=\"demo\">\n  <div class=\"no-mode-translate-demo-wrapper\">\n    <transition name=\"no-mode-translate-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-translate-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-translate-fade-enter-active, .no-mode-translate-fade-leave-active {\n  transition: all 1s;\n}\n.no-mode-translate-fade-enter, .no-mode-translate-fade-leave-active {\n  opacity: 0;\n}\n.no-mode-translate-fade-enter {\n  transform: translateX(31px);\n}\n.no-mode-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n{% endraw %}\n\nSimultaneous entering and leaving transitions aren't always desirable though, so Vue offers some alternative **transition modes**:\n\n- `in-out`: New element transitions in first, then when complete, the current element transitions out.\n\n- `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n\nNow let's update the transition for our on/off buttons with `out-in`:\n\n``` html\n<transition name=\"fade\" mode=\"out-in\">\n  <!-- ... the buttons ... -->\n</transition>\n```\n\n{% raw %}\n<div id=\"with-mode-demo\" class=\"demo\">\n  <transition name=\"with-mode-fade\" mode=\"out-in\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#with-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.with-mode-fade-enter-active, .with-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.with-mode-fade-enter, .with-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nWith one simple attribute addition, we've fixed that original transition without having to add any special styling.\n\nThe `in-out` mode isn't used as often, but can sometimes be useful for a slightly different transition effect. Let's try combining it with the slide-fade transition we worked on earlier:\n\n{% raw %}\n<div id=\"in-out-translate-demo\" class=\"demo\">\n  <div class=\"in-out-translate-demo-wrapper\">\n    <transition name=\"in-out-translate-fade\" mode=\"in-out\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#in-out-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.in-out-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.in-out-translate-demo-wrapper button {\n  position: absolute;\n}\n.in-out-translate-fade-enter-active, .in-out-translate-fade-leave-active {\n  transition: all .5s;\n}\n.in-out-translate-fade-enter, .in-out-translate-fade-leave-active {\n  opacity: 0;\n}\n.in-out-translate-fade-enter {\n  transform: translateX(31px);\n}\n.in-out-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n{% endraw %}\n\nPretty cool, right?\n\n## Transitioning Between Components\n\nTransitioning between components is even simpler - we don't even need the `key` attribute. Instead, we just wrap a [dynamic component](components.html#Dynamic-Components):\n\n``` html\n<transition name=\"component-fade\" mode=\"out-in\">\n  <component v-bind:is=\"view\"></component>\n</transition>\n```\n\n``` js\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n```\n\n``` css\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n```\n\n{% raw %}\n<div id=\"transition-components-demo\" class=\"demo\">\n  <input v-model=\"view\" type=\"radio\" value=\"v-a\" id=\"a\" name=\"view\"><label for=\"a\">A</label>\n  <input v-model=\"view\" type=\"radio\" value=\"v-b\" id=\"b\" name=\"view\"><label for=\"b\">B</label>\n  <transition name=\"component-fade\" mode=\"out-in\">\n    <component v-bind:is=\"view\"></component>\n  </transition>\n</div>\n<style>\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n</style>\n<script>\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## List Transitions\n\nSo far, we've managed transitions for:\n\n- Individual nodes\n- Multiple nodes where only 1 is rendered at a time\n\nSo what about for when we have a whole list of items we want to render simultaneously, for example with `v-for`? In this case, we'll use the `<transition-group>` component. Before we dive into an example though, there are a few things that are important to know about this component:\n\n- Unlike `<transition>`, it renders an actual element: a `<span>` by default. You can change the element that's rendered with the `tag` attribute.\n- Elements inside are **always required** to have a unique `key` attribute\n\n### List Entering/Leaving Transitions\n\nNow let's dive into a simple example, transitioning entering and leaving using the same CSS classes we've used previously:\n\n``` html\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" v-bind:key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n```\n\n``` css\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n```\n\n{% raw %}\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n</script>\n<style>\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n</style>\n{% endraw %}\n\nThere's one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We'll fix that later.\n\n### List Move Transitions\n\nThe `<transition-group>` component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of **the `v-move` class**, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided `name` attribute and you can also manually specify a class with the `move-class` attribute.\n\nThis class is mostly useful for specifying the transition timing and easing curve, as you'll see below:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" v-bind:key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n```\n\n``` css\n.flip-list-move {\n  transition: transform 1s;\n}\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" :key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.flip-list-move {\n  transition: transform 1s;\n}\n</style>\n{% endraw %}\n\nThis might seem like magic, but under the hood, Vue is using a simple animation technique called [FLIP](https://aerotwist.com/blog/flip-your-animations/) to smoothly transition elements from their old position to their new position using transforms.\n\nWe can combine this technique with our previous implementation to animate every possible change to our list!\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span\n      v-for=\"item in items\"\n      v-bind:key=\"item\"\n      class=\"list-complete-item\"\n    >\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n```\n\n``` css\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-complete-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n</style>\n{% endraw %}\n\n<p class=\"tip\">One important note is that these FLIP transitions do not work with elements set to `display: inline`. As an alternative, you can use `display: inline-block` or place elements in a flex context.</p>\n\nThese FLIP animations are also not limited to a single axis. Items in a multidimensional grid can transitioned [just as easily](https://jsfiddle.net/chrisvfritz/sLrhk1bc/):\n\n{% raw %}\n<div id=\"sudoku-demo\" class=\"demo\">\n  <strong>Lazy Sudoku</strong>\n  <p>Keep hitting the shuffle button until you win.</p>\n  <button @click=\"shuffle\">\n    Shuffle\n  </button>\n  <transition-group name=\"cell\" tag=\"div\" class=\"sudoku-container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\" class=\"cell\">\n      {{ cell.number }}\n    </div>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#sudoku-demo',\n  data: {\n    cells: Array.apply(null, { length: 81 })\n      .map(function (_, index) {\n        return {\n          id: index,\n          number: index % 9 + 1\n        }\n      })\n  },\n  methods: {\n    shuffle: function () {\n      this.cells = _.shuffle(this.cells)\n    }\n  }\n})\n</script>\n<style>\n.sudoku-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 238px;\n  margin-top: 10px;\n}\n.cell {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #aaa;\n  margin-right: -1px;\n  margin-bottom: -1px;\n}\n.cell:nth-child(3n) {\n  margin-right: 0;\n}\n.cell:nth-child(27n) {\n  margin-bottom: 0;\n}\n.cell-move {\n  transition: transform 1s;\n}\n</style>\n{% endraw %}\n\n### Staggering List Transitions\n\nBy communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"staggered-list-demo\">\n  <input v-model=\"query\">\n  <transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    >{{ item.msg }}</li>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#staggered-list-demo',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"example-5\" class=\"demo\">\n  <input v-model=\"query\">\n  <transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    >{{ item.msg }}</li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Reusable Transitions\n\nTransitions can be reused through Vue's component system. To create a reusable transition, all you have to do is place a `<transition>` or `<transition-group>` component at the root, then pass any children into the transition component.\n\nHere's an example using a template component:\n\n``` js\nVue.component('my-special-transition', {\n  template: '\\\n    <transition\\\n      name=\"very-special-transition\"\\\n      mode=\"out-in\"\\\n      v-on:before-enter=\"beforeEnter\"\\\n      v-on:after-enter=\"afterEnter\"\\\n    >\\\n      <slot></slot>\\\n    </transition>\\\n  ',\n  methods: {\n    beforeEnter: function (el) {\n      // ...\n    },\n    afterEnter: function (el) {\n      // ...\n    }\n  }\n})\n```\n\nAnd functional components are especially well-suited to this task:\n\n``` js\nVue.component('my-special-transition', {\n  functional: true,\n  render: function (createElement, context) {\n    var data = {\n      props: {\n        name: 'very-special-transition'\n        mode: 'out-in'\n      },\n      on: {\n        beforeEnter: function (el) {\n          // ...\n        },\n        afterEnter: function (el) {\n          // ...\n        }\n      }\n    }\n    return createElement('transition', data, context.children)\n  }\n})\n```\n\n## Dynamic Transitions\n\nYes, even transitions in Vue are data-driven! The most basic example of a dynamic transition binds the `name` attribute to a dynamic property.\n\n```html\n<transition v-bind:name=\"transitionName\">\n  <!-- ... -->\n</transition>\n```\n\nThis can be useful when you've defined CSS transitions/animations using Vue's transition class conventions and simply want to switch between them.\n\nReally though, any transition attribute can be dynamically bound. And it's not just attributes. Since event hooks are just methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"dynamic-fade-demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"dynamic-fade-demo\" class=\"demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n<script>\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n</script>\n{% endraw %}\n\nFinally, the ultimate way of creating dynamic transitions is through components that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.\n\n","source":"v2/guide/transitions.md","raw":"---\ntitle: 'Transition Effects'\ntype: guide\norder: 13\n---\n\n## Overview\n\nVue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:\n\n- automatically apply classes for CSS transitions and animations\n- integrate 3rd-party CSS animation libraries, such as Animate.css\n- use JavaScript to directly manipulate the DOM during transition hooks\n- integrate 3rd-party JavaScript animation libraries, such as Velocity.js\n\nOn this page, we'll only cover entering, leaving, and list transitions, but you can see the next section for [managing state transitions](transitioning-state.html).\n\n## Transitioning Single Elements/Components\n\nVue provides a `transition` wrapper component, allowing you to add entering/leaving transitions for any element or component in the following contexts:\n\n- Conditional rendering (using `v-if`)\n- Conditional display (using `v-show`)\n- Dynamic components\n- Component root nodes\n\nThis is what a very simple example looks like in action:\n\n``` html\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n.fade-enter-active, .fade-leave-active {\n  transition: opacity .5s\n}\n.fade-enter, .fade-leave-active {\n  opacity: 0\n}\n```\n\n{% raw %}\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"demo-transition\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.demo-transition-enter-active, .demo-transition-leave-active {\n  transition: opacity .5s\n}\n.demo-transition-enter, .demo-transition-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nWhen an element wrapped in a `transition` component is inserted or removed, this is what happens:\n\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition classes will be added/removed at appropriate timings.\n\n2. If the transition component provided [JavaScript hooks](#JavaScript-Hooks), these hooks will be called at appropriate timings.\n\n3. If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue's concept of `nextTick`).\n\n### Transition Classes\n\nThere are four classes applied for enter/leave transitions.\n\n1. `v-enter`: Starting state for enter. Applied before element is inserted, removed after one frame.\n2. `v-enter-active`: Active and ending state for enter. Applied before element is inserted, removed when transition/animation finishes.\n3. `v-leave`: Starting state for leave. Applied when leave transition is triggered, removed after one frame.\n4. `v-leave-active`: Active and ending state for leave. Applied when leave transition is triggered, removed when the transition/animation finishes.\n\n![Transition Diagram](/images/transition.png)\n\nEach of these classes will be prefixed with the name of the transition. Here the `v-` prefix is the default when you use a `<transition>` element with no name. If you use `<transition name=\"my-transition\">` for example, then the `v-enter` class would instead be `my-transition-enter`.\n\n`v-enter-active` and `v-leave-active` give you the ability to specify different easing curves for enter/leave transitions, which you'll see an example of in the following section.\n\n### CSS Transitions\n\nOne of the most common transition types uses CSS transitions. Here's a simple example:\n\n``` html\n<div id=\"example-1\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n/* Enter and leave animations can use different */\n/* durations and timing functions.              */\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n```\n\n{% raw %}\n<div id=\"example-1\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n</style>\n{% endraw %}\n\n### CSS Animations\n\nCSS animations are applied in the same way as CSS transitions, the difference being that `v-enter` is not removed immediately after the element is inserted, but on an `animationend` event.\n\nHere's an example, omitting prefixed CSS rules for the sake of brevity:\n\n``` html\n<div id=\"example-2\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-if=\"show\">Look at me!</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n```\n\n``` css\n.bounce-enter-active {\n  animation: bounce-in .5s;\n}\n.bounce-leave-active {\n  animation: bounce-out .5s;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes bounce-out {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n```\n\n{% raw %}\n<div id=\"example-2\" class=\"demo\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-show=\"show\">Look at me!</p>\n  </transition>\n</div>\n\n<style>\n  .bounce-enter-active {\n    -webkit-animation: bounce-in .5s;\n    animation: bounce-in .5s;\n  }\n  .bounce-leave-active {\n    -webkit-animation: bounce-out .5s;\n    animation: bounce-out .5s;\n  }\n  @keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n  @-webkit-keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @-webkit-keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n</style>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n</script>\n{% endraw %}\n\n### Custom Transition Classes\n\nYou can also specify custom transition classes by providing the following attributes:\n\n- `enter-class`\n- `enter-active-class`\n- `leave-class`\n- `leave-active-class`\n\nThese will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as [Animate.css](https://daneden.github.io/animate.css/).\n\nHere's an example:\n\n``` html\n<link href=\"https://unpkg.com/animate.css@3.5.1/animate.min.css\" rel=\"stylesheet\" type=\"text/css\">\n\n<div id=\"example-3\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n```\n\n{% raw %}\n<link href=\"https://unpkg.com/animate.css@3.5.1\" rel=\"stylesheet\" type=\"text/css\">\n<div id=\"example-3\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n</script>\n{% endraw %}\n\n### Using Transitions and Animations Together\n\nVue needs to attach event listeners in order to know when a transition has ended. It can either be `transitionend` or `animationend`, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type.\n\nHowever, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about in a `type` attribute, with a value of either `animation` or `transition`.\n\n### JavaScript Hooks\n\nYou can also define JavaScript hooks in attributes:\n\n``` html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n\n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n\n``` js\n// ...\nmethods: {\n  // --------\n  // ENTERING\n  // --------\n\n  beforeEnter: function (el) {\n    // ...\n  },\n  // the done callback is optional when\n  // used in combination with CSS\n  enter: function (el, done) {\n    // ...\n    done()\n  },\n  afterEnter: function (el) {\n    // ...\n  },\n  enterCancelled: function (el) {\n    // ...\n  },\n\n  // --------\n  // LEAVING\n  // --------\n\n  beforeLeave: function (el) {\n    // ...\n  },\n  // the done callback is optional when\n  // used in combination with CSS\n  leave: function (el, done) {\n    // ...\n    done()\n  },\n  afterLeave: function (el) {\n    // ...\n  },\n  // leaveCancelled only available with v-show\n  leaveCancelled: function (el) {\n    // ...\n  }\n}\n```\n\nThese hooks can be used in combination with CSS transitions/animations or on their own.\n\n<p class=\"tip\">When using JavaScript-only transitions, **the `done` callbacks are required for the `enter` and `leave` hooks**. Otherwise, they will be called synchronously and the transition will finish immediately.</p>\n\n<p class=\"tip\">It's also a good idea to explicitly add `v-bind:css=\"false\"` for JavaScript-only transitions so that Vue can skip the CSS detection. This also prevents CSS rules from accidentally interfering with the transition.</p>\n\nNow let's dive into an example. Here's a simple JavaScript transition using Velocity.js:\n\n``` html\n<!--\nVelocity works very much like jQuery.animate and is\na great option for JavaScript animations\n-->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"example-4\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n    v-bind:css=\"false\"\n  >\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n```\n\n{% raw %}\n<div id=\"example-4\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.transformOrigin = 'left'\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Transitions on Initial Render\n\nIf you also want to apply a transition on the initial render of a node, you can add the `appear` attribute:\n\n``` html\n<transition appear>\n  <!-- ... -->\n</transition>\n```\n\nBy default, this will use the transitions specified for entering and leaving. If you'd like however, you can also specify custom CSS classes:\n\n``` html\n<transition\n  appear\n  appear-class=\"custom-appear-class\"\n  appear-active-class=\"custom-appear-active-class\"\n>\n  <!-- ... -->\n</transition>\n```\n\nand custom JavaScript hooks:\n\n``` html\n<transition\n  appear\n  v-on:before-appear=\"customBeforeAppearHook\"\n  v-on:appear=\"customAppearHook\"\n  v-on:after-appear=\"customAfterAppearHook\"\n>\n  <!-- ... -->\n</transition>\n```\n\n## Transitioning Between Elements\n\nWe discuss [transitioning between components](#Transitioning-Between-Components) later, but you can also transition between raw elements using `v-if`/`v-else`. One of the most common two-element transitions is between a list container and a message describing an empty list:\n\n``` html\n<transition>\n  <table v-if=\"items.length > 0\">\n    <!-- ... -->\n  </table>\n  <p v-else>Sorry, no items found.</p>\n</transition>\n```\n\nThis works well, but there's one caveat to be aware of:\n\n<p class=\"tip\">When toggling between elements that have **the same tag name**, you must tell Vue that they are distinct elements by giving them unique `key` attributes. Otherwise, Vue's compiler will only replace the content of the element for efficiency. Even when technically unnecessary though, **it's considered good practice to always key multiple items within a `<transition>` component.**</p>\n\nFor example:\n\n``` html\n<transition>\n  <button v-if=\"isEditing\" key=\"save\">\n    Save\n  </button>\n  <button v-else key=\"edit\">\n    Edit\n  </button>\n</transition>\n```\n\nIn these cases, you can also use the `key` attribute to transition between different states of the same element. Instead of using `v-if` and `v-else`, the above example could be rewritten as:\n\n``` html\n<transition>\n  <button v-bind:key=\"isEditing\">\n    {{ isEditing ? 'Save' : 'Edit' }}\n  </button>\n</transition>\n```\n\nIt's actually possible to transition between any number of elements, either by using multiple `v-if`s or binding a single element to a dynamic property. For example:\n\n``` html\n<transition>\n  <button v-if=\"docState === 'saved'\" key=\"saved\">\n    Edit\n  </button>\n  <button v-if=\"docState === 'edited'\" key=\"edited\">\n    Save\n  </button>\n  <button v-if=\"docState === 'editing'\" key=\"editing\">\n    Cancel\n  </button>\n</transition>\n```\n\nWhich could also be written as:\n\n``` html\n<transition>\n  <button v-bind:key=\"docState\">\n    {{ buttonMessage }}\n  </button>\n</transition>\n```\n\n``` js\n// ...\ncomputed: {\n  buttonMessage: function () {\n    switch (docState) {\n      case 'saved': return 'Edit'\n      case 'edited': return 'Save'\n      case 'editing': return 'Cancel'\n    }\n  }\n}\n```\n\n### Transition Modes\n\nThere's still one problem though. Try clicking the button below:\n\n{% raw %}\n<div id=\"no-mode-demo\" class=\"demo\">\n  <transition name=\"no-mode-fade\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-fade-enter-active, .no-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.no-mode-fade-enter, .no-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nAs it's transitioning between the \"on\" button and the \"off\" button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of `<transition>` - entering and leaving happens simultaneously.\n\nSometimes this works great, like when transitioning items are absolutely positioned on top of each other:\n\n{% raw %}\n<div id=\"no-mode-absolute-demo\" class=\"demo\">\n  <div class=\"no-mode-absolute-demo-wrapper\">\n    <transition name=\"no-mode-absolute-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-absolute-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-absolute-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-absolute-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-absolute-fade-enter-active, .no-mode-absolute-fade-leave-active {\n  transition: opacity .5s;\n}\n.no-mode-absolute-fade-enter, .no-mode-absolute-fade-leave-active {\n  opacity: 0;\n}\n</style>\n{% endraw %}\n\nAnd then maybe also translated so that they look like slide transitions:\n\n{% raw %}\n<div id=\"no-mode-translate-demo\" class=\"demo\">\n  <div class=\"no-mode-translate-demo-wrapper\">\n    <transition name=\"no-mode-translate-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-translate-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-translate-fade-enter-active, .no-mode-translate-fade-leave-active {\n  transition: all 1s;\n}\n.no-mode-translate-fade-enter, .no-mode-translate-fade-leave-active {\n  opacity: 0;\n}\n.no-mode-translate-fade-enter {\n  transform: translateX(31px);\n}\n.no-mode-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n{% endraw %}\n\nSimultaneous entering and leaving transitions aren't always desirable though, so Vue offers some alternative **transition modes**:\n\n- `in-out`: New element transitions in first, then when complete, the current element transitions out.\n\n- `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n\nNow let's update the transition for our on/off buttons with `out-in`:\n\n``` html\n<transition name=\"fade\" mode=\"out-in\">\n  <!-- ... the buttons ... -->\n</transition>\n```\n\n{% raw %}\n<div id=\"with-mode-demo\" class=\"demo\">\n  <transition name=\"with-mode-fade\" mode=\"out-in\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#with-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.with-mode-fade-enter-active, .with-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.with-mode-fade-enter, .with-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n{% endraw %}\n\nWith one simple attribute addition, we've fixed that original transition without having to add any special styling.\n\nThe `in-out` mode isn't used as often, but can sometimes be useful for a slightly different transition effect. Let's try combining it with the slide-fade transition we worked on earlier:\n\n{% raw %}\n<div id=\"in-out-translate-demo\" class=\"demo\">\n  <div class=\"in-out-translate-demo-wrapper\">\n    <transition name=\"in-out-translate-fade\" mode=\"in-out\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#in-out-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.in-out-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.in-out-translate-demo-wrapper button {\n  position: absolute;\n}\n.in-out-translate-fade-enter-active, .in-out-translate-fade-leave-active {\n  transition: all .5s;\n}\n.in-out-translate-fade-enter, .in-out-translate-fade-leave-active {\n  opacity: 0;\n}\n.in-out-translate-fade-enter {\n  transform: translateX(31px);\n}\n.in-out-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n{% endraw %}\n\nPretty cool, right?\n\n## Transitioning Between Components\n\nTransitioning between components is even simpler - we don't even need the `key` attribute. Instead, we just wrap a [dynamic component](components.html#Dynamic-Components):\n\n``` html\n<transition name=\"component-fade\" mode=\"out-in\">\n  <component v-bind:is=\"view\"></component>\n</transition>\n```\n\n``` js\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n```\n\n``` css\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n```\n\n{% raw %}\n<div id=\"transition-components-demo\" class=\"demo\">\n  <input v-model=\"view\" type=\"radio\" value=\"v-a\" id=\"a\" name=\"view\"><label for=\"a\">A</label>\n  <input v-model=\"view\" type=\"radio\" value=\"v-b\" id=\"b\" name=\"view\"><label for=\"b\">B</label>\n  <transition name=\"component-fade\" mode=\"out-in\">\n    <component v-bind:is=\"view\"></component>\n  </transition>\n</div>\n<style>\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n</style>\n<script>\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## List Transitions\n\nSo far, we've managed transitions for:\n\n- Individual nodes\n- Multiple nodes where only 1 is rendered at a time\n\nSo what about for when we have a whole list of items we want to render simultaneously, for example with `v-for`? In this case, we'll use the `<transition-group>` component. Before we dive into an example though, there are a few things that are important to know about this component:\n\n- Unlike `<transition>`, it renders an actual element: a `<span>` by default. You can change the element that's rendered with the `tag` attribute.\n- Elements inside are **always required** to have a unique `key` attribute\n\n### List Entering/Leaving Transitions\n\nNow let's dive into a simple example, transitioning entering and leaving using the same CSS classes we've used previously:\n\n``` html\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" v-bind:key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n```\n\n``` css\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n```\n\n{% raw %}\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n</script>\n<style>\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n</style>\n{% endraw %}\n\nThere's one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We'll fix that later.\n\n### List Move Transitions\n\nThe `<transition-group>` component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of **the `v-move` class**, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided `name` attribute and you can also manually specify a class with the `move-class` attribute.\n\nThis class is mostly useful for specifying the transition timing and easing curve, as you'll see below:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" v-bind:key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n```\n\n``` css\n.flip-list-move {\n  transition: transform 1s;\n}\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" :key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.flip-list-move {\n  transition: transform 1s;\n}\n</style>\n{% endraw %}\n\nThis might seem like magic, but under the hood, Vue is using a simple animation technique called [FLIP](https://aerotwist.com/blog/flip-your-animations/) to smoothly transition elements from their old position to their new position using transforms.\n\nWe can combine this technique with our previous implementation to animate every possible change to our list!\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span\n      v-for=\"item in items\"\n      v-bind:key=\"item\"\n      class=\"list-complete-item\"\n    >\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n```\n\n``` css\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-complete-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n</style>\n{% endraw %}\n\n<p class=\"tip\">One important note is that these FLIP transitions do not work with elements set to `display: inline`. As an alternative, you can use `display: inline-block` or place elements in a flex context.</p>\n\nThese FLIP animations are also not limited to a single axis. Items in a multidimensional grid can transitioned [just as easily](https://jsfiddle.net/chrisvfritz/sLrhk1bc/):\n\n{% raw %}\n<div id=\"sudoku-demo\" class=\"demo\">\n  <strong>Lazy Sudoku</strong>\n  <p>Keep hitting the shuffle button until you win.</p>\n  <button @click=\"shuffle\">\n    Shuffle\n  </button>\n  <transition-group name=\"cell\" tag=\"div\" class=\"sudoku-container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\" class=\"cell\">\n      {{ cell.number }}\n    </div>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#sudoku-demo',\n  data: {\n    cells: Array.apply(null, { length: 81 })\n      .map(function (_, index) {\n        return {\n          id: index,\n          number: index % 9 + 1\n        }\n      })\n  },\n  methods: {\n    shuffle: function () {\n      this.cells = _.shuffle(this.cells)\n    }\n  }\n})\n</script>\n<style>\n.sudoku-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 238px;\n  margin-top: 10px;\n}\n.cell {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #aaa;\n  margin-right: -1px;\n  margin-bottom: -1px;\n}\n.cell:nth-child(3n) {\n  margin-right: 0;\n}\n.cell:nth-child(27n) {\n  margin-bottom: 0;\n}\n.cell-move {\n  transition: transform 1s;\n}\n</style>\n{% endraw %}\n\n### Staggering List Transitions\n\nBy communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"staggered-list-demo\">\n  <input v-model=\"query\">\n  <transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    >{{ item.msg }}</li>\n  </transition-group>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#staggered-list-demo',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"example-5\" class=\"demo\">\n  <input v-model=\"query\">\n  <transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    >{{ item.msg }}</li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n</script>\n{% endraw %}\n\n## Reusable Transitions\n\nTransitions can be reused through Vue's component system. To create a reusable transition, all you have to do is place a `<transition>` or `<transition-group>` component at the root, then pass any children into the transition component.\n\nHere's an example using a template component:\n\n``` js\nVue.component('my-special-transition', {\n  template: '\\\n    <transition\\\n      name=\"very-special-transition\"\\\n      mode=\"out-in\"\\\n      v-on:before-enter=\"beforeEnter\"\\\n      v-on:after-enter=\"afterEnter\"\\\n    >\\\n      <slot></slot>\\\n    </transition>\\\n  ',\n  methods: {\n    beforeEnter: function (el) {\n      // ...\n    },\n    afterEnter: function (el) {\n      // ...\n    }\n  }\n})\n```\n\nAnd functional components are especially well-suited to this task:\n\n``` js\nVue.component('my-special-transition', {\n  functional: true,\n  render: function (createElement, context) {\n    var data = {\n      props: {\n        name: 'very-special-transition'\n        mode: 'out-in'\n      },\n      on: {\n        beforeEnter: function (el) {\n          // ...\n        },\n        afterEnter: function (el) {\n          // ...\n        }\n      }\n    }\n    return createElement('transition', data, context.children)\n  }\n})\n```\n\n## Dynamic Transitions\n\nYes, even transitions in Vue are data-driven! The most basic example of a dynamic transition binds the `name` attribute to a dynamic property.\n\n```html\n<transition v-bind:name=\"transitionName\">\n  <!-- ... -->\n</transition>\n```\n\nThis can be useful when you've defined CSS transitions/animations using Vue's transition class conventions and simply want to switch between them.\n\nReally though, any transition attribute can be dynamically bound. And it's not just attributes. Since event hooks are just methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n\n<div id=\"dynamic-fade-demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n```\n\n``` js\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n```\n\n{% raw %}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"dynamic-fade-demo\" class=\"demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n<script>\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n</script>\n{% endraw %}\n\nFinally, the ultimate way of creating dynamic transitions is through components that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.\n\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/transitions.html","comments":1,"layout":"page","_id":"civ8jcjoy001h91m1qr45vyef","content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Vue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:</p>\n<ul>\n<li>automatically apply classes for CSS transitions and animations</li>\n<li>integrate 3rd-party CSS animation libraries, such as Animate.css</li>\n<li>use JavaScript to directly manipulate the DOM during transition hooks</li>\n<li>integrate 3rd-party JavaScript animation libraries, such as Velocity.js</li>\n</ul>\n<p>On this page, we’ll only cover entering, leaving, and list transitions, but you can see the next section for <a href=\"transitioning-state.html\">managing state transitions</a>.</p>\n<h2 id=\"Transitioning-Single-Elements-Components\"><a href=\"#Transitioning-Single-Elements-Components\" class=\"headerlink\" title=\"Transitioning Single Elements/Components\"></a>Transitioning Single Elements/Components</h2><p>Vue provides a <code>transition</code> wrapper component, allowing you to add entering/leaving transitions for any element or component in the following contexts:</p>\n<ul>\n<li>Conditional rendering (using <code>v-if</code>)</li>\n<li>Conditional display (using <code>v-show</code>)</li>\n<li>Dynamic components</li>\n<li>Component root nodes</li>\n</ul>\n<p>This is what a very simple example looks like in action:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>, <span class=\"selector-class\">.fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">5s</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.fade-enter</span>, <span class=\"selector-class\">.fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"demo-transition\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.demo-transition-enter-active, .demo-transition-leave-active {\n  transition: opacity .5s\n}\n.demo-transition-enter, .demo-transition-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>When an element wrapped in a <code>transition</code> component is inserted or removed, this is what happens:</p>\n<ol>\n<li><p>Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition classes will be added/removed at appropriate timings.</p>\n</li>\n<li><p>If the transition component provided <a href=\"#JavaScript-Hooks\">JavaScript hooks</a>, these hooks will be called at appropriate timings.</p>\n</li>\n<li><p>If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue’s concept of <code>nextTick</code>).</p>\n</li>\n</ol>\n<h3 id=\"Transition-Classes\"><a href=\"#Transition-Classes\" class=\"headerlink\" title=\"Transition Classes\"></a>Transition Classes</h3><p>There are four classes applied for enter/leave transitions.</p>\n<ol>\n<li><code>v-enter</code>: Starting state for enter. Applied before element is inserted, removed after one frame.</li>\n<li><code>v-enter-active</code>: Active and ending state for enter. Applied before element is inserted, removed when transition/animation finishes.</li>\n<li><code>v-leave</code>: Starting state for leave. Applied when leave transition is triggered, removed after one frame.</li>\n<li><code>v-leave-active</code>: Active and ending state for leave. Applied when leave transition is triggered, removed when the transition/animation finishes.</li>\n</ol>\n<p><img src=\"/images/transition.png\" alt=\"Transition Diagram\"></p>\n<p>Each of these classes will be prefixed with the name of the transition. Here the <code>v-</code> prefix is the default when you use a <code>&lt;transition&gt;</code> element with no name. If you use <code>&lt;transition name=&quot;my-transition&quot;&gt;</code> for example, then the <code>v-enter</code> class would instead be <code>my-transition-enter</code>.</p>\n<p><code>v-enter-active</code> and <code>v-leave-active</code> give you the ability to specify different easing curves for enter/leave transitions, which you’ll see an example of in the following section.</p>\n<h3 id=\"CSS-Transitions\"><a href=\"#CSS-Transitions\" class=\"headerlink\" title=\"CSS Transitions\"></a>CSS Transitions</h3><p>One of the most common transition types uses CSS transitions. Here’s a simple example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle render</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide-fade\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Enter and leave animations can use different */</span></div><div class=\"line\"><span class=\"comment\">/* durations and timing functions.              */</span></div><div class=\"line\"><span class=\"selector-class\">.slide-fade-enter-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slide-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">8s</span> <span class=\"built_in\">cubic-bezier</span>(1.0, 0.5, 0.8, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slide-fade-enter</span>, <span class=\"selector-class\">.slide-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"example-1\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n</style>\n\n<h3 id=\"CSS-Animations\"><a href=\"#CSS-Animations\" class=\"headerlink\" title=\"CSS Animations\"></a>CSS Animations</h3><p>CSS animations are applied in the same way as CSS transitions, the difference being that <code>v-enter</code> is not removed immediately after the element is inserted, but on an <code>animationend</code> event.</p>\n<p>Here’s an example, omitting prefixed CSS rules for the sake of brevity:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span>Toggle show<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bounce\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>Look at me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bounce-enter-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation</span>: bounce-in .<span class=\"number\">5s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.bounce-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation</span>: bounce-out .<span class=\"number\">5s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounce-in &#123;</div><div class=\"line\">  0% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">  &#125;</div><div class=\"line\">  100% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounce-out &#123;</div><div class=\"line\">  0% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">  &#125;</div><div class=\"line\">  100% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-show=\"show\">Look at me!</p>\n  </transition>\n</div>\n\n<style>\n  .bounce-enter-active {\n    -webkit-animation: bounce-in .5s;\n    animation: bounce-in .5s;\n  }\n  .bounce-leave-active {\n    -webkit-animation: bounce-out .5s;\n    animation: bounce-out .5s;\n  }\n  @keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n  @-webkit-keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @-webkit-keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n</style>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n</script>\n\n<h3 id=\"Custom-Transition-Classes\"><a href=\"#Custom-Transition-Classes\" class=\"headerlink\" title=\"Custom Transition Classes\"></a>Custom Transition Classes</h3><p>You can also specify custom transition classes by providing the following attributes:</p>\n<ul>\n<li><code>enter-class</code></li>\n<li><code>enter-active-class</code></li>\n<li><code>leave-class</code></li>\n<li><code>leave-active-class</code></li>\n</ul>\n<p>These will override the conventional class names. This is especially useful when you want to combine Vue’s transition system with an existing CSS animation library, such as <a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"external\">Animate.css</a>.</p>\n<p>Here’s an example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/animate.css@3.5.1/animate.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle render</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">    <span class=\"attr\">name</span>=<span class=\"string\">\"custom-classes-transition\"</span></div><div class=\"line\">    <span class=\"attr\">enter-active-class</span>=<span class=\"string\">\"animated tada\"</span></div><div class=\"line\">    <span class=\"attr\">leave-active-class</span>=<span class=\"string\">\"animated bounceOutRight\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<link href=\"https://unpkg.com/animate.css@3.5.1\" rel=\"stylesheet\" type=\"text/css\">\n<div id=\"example-3\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition name=\"custom-classes-transition\" enter-active-class=\"animated tada\" leave-active-class=\"animated bounceOutRight\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n</script>\n\n<h3 id=\"Using-Transitions-and-Animations-Together\"><a href=\"#Using-Transitions-and-Animations-Together\" class=\"headerlink\" title=\"Using Transitions and Animations Together\"></a>Using Transitions and Animations Together</h3><p>Vue needs to attach event listeners in order to know when a transition has ended. It can either be <code>transitionend</code> or <code>animationend</code>, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type.</p>\n<p>However, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about in a <code>type</code> attribute, with a value of either <code>animation</code> or <code>transition</code>.</p>\n<h3 id=\"JavaScript-Hooks\"><a href=\"#JavaScript-Hooks\" class=\"headerlink\" title=\"JavaScript Hooks\"></a>JavaScript Hooks</h3><p>You can also define JavaScript hooks in attributes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">  <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-enter</span>=<span class=\"string\">\"afterEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter-cancelled</span>=<span class=\"string\">\"enterCancelled\"</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">v-on:before-leave</span>=<span class=\"string\">\"beforeLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-leave</span>=<span class=\"string\">\"afterLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave-cancelled</span>=<span class=\"string\">\"leaveCancelled\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\">  <span class=\"comment\">// ENTERING</span></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\"></div><div class=\"line\">  beforeEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// the done callback is optional when</span></div><div class=\"line\">  <span class=\"comment\">// used in combination with CSS</span></div><div class=\"line\">  enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    done()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">enterCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\">  <span class=\"comment\">// LEAVING</span></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\"></div><div class=\"line\">  beforeLeave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// the done callback is optional when</span></div><div class=\"line\">  <span class=\"comment\">// used in combination with CSS</span></div><div class=\"line\">  leave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    done()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">afterLeave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// leaveCancelled only available with v-show</span></div><div class=\"line\">  leaveCancelled: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>These hooks can be used in combination with CSS transitions/animations or on their own.</p>\n<p class=\"tip\">When using JavaScript-only transitions, <strong>the <code>done</code> callbacks are required for the <code>enter</code> and <code>leave</code> hooks</strong>. Otherwise, they will be called synchronously and the transition will finish immediately.</p>\n\n<p class=\"tip\">It’s also a good idea to explicitly add <code>v-bind:css=&quot;false&quot;</code> for JavaScript-only transitions so that Vue can skip the CSS detection. This also prevents CSS rules from accidentally interfering with the transition.</p>\n\n<p>Now let’s dive into an example. Here’s a simple JavaScript transition using Velocity.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">Velocity works very much like jQuery.animate and is</div><div class=\"line\">a great option for JavaScript animations</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span></div><div class=\"line\">      Demo</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span>, <span class=\"attr\">fontSize</span>: <span class=\"string\">'1.4em'</span> &#125;, &#123; <span class=\"attr\">duration</span>: <span class=\"number\">300</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">fontSize</span>: <span class=\"string\">'1em'</span> &#125;, &#123; <span class=\"attr\">complete</span>: done &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">translateX</span>: <span class=\"string\">'15px'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'50deg'</span> &#125;, &#123; <span class=\"attr\">duration</span>: <span class=\"number\">600</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">rotateZ</span>: <span class=\"string\">'100deg'</span> &#125;, &#123; <span class=\"attr\">loop</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123;</div><div class=\"line\">        <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>,</div><div class=\"line\">        <span class=\"attr\">translateY</span>: <span class=\"string\">'30px'</span>,</div><div class=\"line\">        <span class=\"attr\">translateX</span>: <span class=\"string\">'30px'</span>,</div><div class=\"line\">        <span class=\"attr\">opacity</span>: <span class=\"number\">0</span></div><div class=\"line\">      &#125;, &#123; <span class=\"attr\">complete</span>: done &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-4\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition v-on:before-enter=\"beforeEnter\" v-on:enter=\"enter\" v-on:leave=\"leave\">\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.transformOrigin = 'left'\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n</script>\n\n<h2 id=\"Transitions-on-Initial-Render\"><a href=\"#Transitions-on-Initial-Render\" class=\"headerlink\" title=\"Transitions on Initial Render\"></a>Transitions on Initial Render</h2><p>If you also want to apply a transition on the initial render of a node, you can add the <code>appear</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>By default, this will use the transitions specified for entering and leaving. If you’d like however, you can also specify custom CSS classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">  <span class=\"attr\">appear</span></div><div class=\"line\">  <span class=\"attr\">appear-class</span>=<span class=\"string\">\"custom-appear-class\"</span></div><div class=\"line\">  <span class=\"attr\">appear-active-class</span>=<span class=\"string\">\"custom-appear-active-class\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>and custom JavaScript hooks:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">  <span class=\"attr\">appear</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-appear</span>=<span class=\"string\">\"customBeforeAppearHook\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:appear</span>=<span class=\"string\">\"customAppearHook\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-appear</span>=<span class=\"string\">\"customAfterAppearHook\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Transitioning-Between-Elements\"><a href=\"#Transitioning-Between-Elements\" class=\"headerlink\" title=\"Transitioning Between Elements\"></a>Transitioning Between Elements</h2><p>We discuss <a href=\"#Transitioning-Between-Components\">transitioning between components</a> later, but you can also transition between raw elements using <code>v-if</code>/<code>v-else</code>. One of the most common two-element transitions is between a list container and a message describing an empty list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length &gt; 0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>Sorry, no items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This works well, but there’s one caveat to be aware of:</p>\n<p class=\"tip\">When toggling between elements that have <strong>the same tag name</strong>, you must tell Vue that they are distinct elements by giving them unique <code>key</code> attributes. Otherwise, Vue’s compiler will only replace the content of the element for efficiency. Even when technically unnecessary though, <strong>it’s considered good practice to always key multiple items within a <code>&lt;transition&gt;</code> component.</strong></p>\n\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isEditing\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"save\"</span>&gt;</span></div><div class=\"line\">    Save</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-else</span> <span class=\"attr\">key</span>=<span class=\"string\">\"edit\"</span>&gt;</span></div><div class=\"line\">    Edit</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>In these cases, you can also use the <code>key</code> attribute to transition between different states of the same element. Instead of using <code>v-if</code> and <code>v-else</code>, the above example could be rewritten as:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"isEditing\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; isEditing ? 'Save' : 'Edit' &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s actually possible to transition between any number of elements, either by using multiple <code>v-if</code>s or binding a single element to a dynamic property. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'saved'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"saved\"</span>&gt;</span></div><div class=\"line\">    Edit</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'edited'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"edited\"</span>&gt;</span></div><div class=\"line\">    Save</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'editing'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"editing\"</span>&gt;</span></div><div class=\"line\">    Cancel</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Which could also be written as:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"docState\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; buttonMessage &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">buttonMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (docState) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'saved'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Edit'</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'edited'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Save'</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'editing'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Cancel'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Transition-Modes\"><a href=\"#Transition-Modes\" class=\"headerlink\" title=\"Transition Modes\"></a>Transition Modes</h3><p>There’s still one problem though. Try clicking the button below:</p>\n\n<div id=\"no-mode-demo\" class=\"demo\">\n  <transition name=\"no-mode-fade\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else=\"\" key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-fade-enter-active, .no-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.no-mode-fade-enter, .no-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>As it’s transitioning between the “on” button and the “off” button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of <code>&lt;transition&gt;</code> - entering and leaving happens simultaneously.</p>\n<p>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</p>\n\n<div id=\"no-mode-absolute-demo\" class=\"demo\">\n  <div class=\"no-mode-absolute-demo-wrapper\">\n    <transition name=\"no-mode-absolute-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else=\"\" key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-absolute-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-absolute-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-absolute-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-absolute-fade-enter-active, .no-mode-absolute-fade-leave-active {\n  transition: opacity .5s;\n}\n.no-mode-absolute-fade-enter, .no-mode-absolute-fade-leave-active {\n  opacity: 0;\n}\n</style>\n\n<p>And then maybe also translated so that they look like slide transitions:</p>\n\n<div id=\"no-mode-translate-demo\" class=\"demo\">\n  <div class=\"no-mode-translate-demo-wrapper\">\n    <transition name=\"no-mode-translate-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else=\"\" key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-translate-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-translate-fade-enter-active, .no-mode-translate-fade-leave-active {\n  transition: all 1s;\n}\n.no-mode-translate-fade-enter, .no-mode-translate-fade-leave-active {\n  opacity: 0;\n}\n.no-mode-translate-fade-enter {\n  transform: translateX(31px);\n}\n.no-mode-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n\n<p>Simultaneous entering and leaving transitions aren’t always desirable though, so Vue offers some alternative <strong>transition modes</strong>:</p>\n<ul>\n<li><p><code>in-out</code>: New element transitions in first, then when complete, the current element transitions out.</p>\n</li>\n<li><p><code>out-in</code>: Current element transitions out first, then when complete, the new element transitions in.</p>\n</li>\n</ul>\n<p>Now let’s update the transition for our on/off buttons with <code>out-in</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... the buttons ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"with-mode-demo\" class=\"demo\">\n  <transition name=\"with-mode-fade\" mode=\"out-in\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else=\"\" key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#with-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.with-mode-fade-enter-active, .with-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.with-mode-fade-enter, .with-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>With one simple attribute addition, we’ve fixed that original transition without having to add any special styling.</p>\n<p>The <code>in-out</code> mode isn’t used as often, but can sometimes be useful for a slightly different transition effect. Let’s try combining it with the slide-fade transition we worked on earlier:</p>\n\n<div id=\"in-out-translate-demo\" class=\"demo\">\n  <div class=\"in-out-translate-demo-wrapper\">\n    <transition name=\"in-out-translate-fade\" mode=\"in-out\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else=\"\" key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#in-out-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.in-out-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.in-out-translate-demo-wrapper button {\n  position: absolute;\n}\n.in-out-translate-fade-enter-active, .in-out-translate-fade-leave-active {\n  transition: all .5s;\n}\n.in-out-translate-fade-enter, .in-out-translate-fade-leave-active {\n  opacity: 0;\n}\n.in-out-translate-fade-enter {\n  transform: translateX(31px);\n}\n.in-out-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n\n<p>Pretty cool, right?</p>\n<h2 id=\"Transitioning-Between-Components\"><a href=\"#Transitioning-Between-Components\" class=\"headerlink\" title=\"Transitioning Between Components\"></a>Transitioning Between Components</h2><p>Transitioning between components is even simpler - we don’t even need the <code>key</code> attribute. Instead, we just wrap a <a href=\"components.html#Dynamic-Components\">dynamic component</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"component-fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#transition-components-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"string\">'v-a'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'v-a'</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Component A&lt;/div&gt;'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'v-b'</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Component B&lt;/div&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.component-fade-enter-active</span>, <span class=\"selector-class\">.component-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.component-fade-enter</span>, <span class=\"selector-class\">.component-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"transition-components-demo\" class=\"demo\">\n  <input v-model=\"view\" type=\"radio\" value=\"v-a\" id=\"a\" name=\"view\"><label for=\"a\">A</label>\n  <input v-model=\"view\" type=\"radio\" value=\"v-b\" id=\"b\" name=\"view\"><label for=\"b\">B</label>\n  <transition name=\"component-fade\" mode=\"out-in\">\n    <component v-bind:is=\"view\"></component>\n  </transition>\n</div>\n<style>\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n</style>\n<script>\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n</script>\n\n<h2 id=\"List-Transitions\"><a href=\"#List-Transitions\" class=\"headerlink\" title=\"List Transitions\"></a>List Transitions</h2><p>So far, we’ve managed transitions for:</p>\n<ul>\n<li>Individual nodes</li>\n<li>Multiple nodes where only 1 is rendered at a time</li>\n</ul>\n<p>So what about for when we have a whole list of items we want to render simultaneously, for example with <code>v-for</code>? In this case, we’ll use the <code>&lt;transition-group&gt;</code> component. Before we dive into an example though, there are a few things that are important to know about this component:</p>\n<ul>\n<li>Unlike <code>&lt;transition&gt;</code>, it renders an actual element: a <code>&lt;span&gt;</code> by default. You can change the element that’s rendered with the <code>tag</code> attribute.</li>\n<li>Elements inside are <strong>always required</strong> to have a unique <code>key</code> attribute</li>\n</ul>\n<h3 id=\"List-Entering-Leaving-Transitions\"><a href=\"#List-Entering-Leaving-Transitions\" class=\"headerlink\" title=\"List Entering/Leaving Transitions\"></a>List Entering/Leaving Transitions</h3><p>Now let’s dive into a simple example, transitioning entering and leaving using the same CSS classes we’ve used previously:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"add\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"remove\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"p\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"attr\">nextNum</span>: <span class=\"number\">10</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">randomIndex</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.items.length)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.nextNum++)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-enter-active</span>, <span class=\"selector-class\">.list-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-enter</span>, <span class=\"selector-class\">.list-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(30px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n</script>\n<style>\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n</style>\n\n<p>There’s one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We’ll fix that later.</p>\n<h3 id=\"List-Move-Transitions\"><a href=\"#List-Move-Transitions\" class=\"headerlink\" title=\"List Move Transitions\"></a>List Move Transitions</h3><p>The <code>&lt;transition-group&gt;</code> component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of <strong>the <code>v-move</code> class</strong>, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided <code>name</code> attribute and you can also manually specify a class with the <code>move-class</code> attribute.</p>\n<p>This class is mostly useful for specifying the transition timing and easing curve, as you’ll see below:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"flip-list-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"shuffle\"</span>&gt;</span>Shuffle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"flip-list\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#flip-list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">shuffle</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = _.shuffle(<span class=\"keyword\">this</span>.items)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flip-list-move</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" :key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.flip-list-move {\n  transition: transform 1s;\n}\n</style>\n\n<p>This might seem like magic, but under the hood, Vue is using a simple animation technique called <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"external\">FLIP</a> to smoothly transition elements from their old position to their new position using transforms.</p>\n<p>We can combine this technique with our previous implementation to animate every possible change to our list!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-complete-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"shuffle\"</span>&gt;</span>Shuffle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"add\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"remove\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list-complete\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"p\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span></span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"list-complete-item\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#list-complete-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"attr\">nextNum</span>: <span class=\"number\">10</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">randomIndex</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.items.length)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.nextNum++)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">shuffle</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = _.shuffle(<span class=\"keyword\">this</span>.items)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list-complete-item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-complete-enter</span>, <span class=\"selector-class\">.list-complete-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(30px);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-complete-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-complete-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n</style>\n\n<p class=\"tip\">One important note is that these FLIP transitions do not work with elements set to <code>display: inline</code>. As an alternative, you can use <code>display: inline-block</code> or place elements in a flex context.</p>\n\n<p>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can transitioned <a href=\"https://jsfiddle.net/chrisvfritz/sLrhk1bc/\" target=\"_blank\" rel=\"external\">just as easily</a>:</p>\n\n<div id=\"sudoku-demo\" class=\"demo\">\n  <strong>Lazy Sudoku</strong>\n  <p>Keep hitting the shuffle button until you win.</p>\n  <button @click=\"shuffle\">\n    Shuffle\n  </button>\n  <transition-group name=\"cell\" tag=\"div\" class=\"sudoku-container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\" class=\"cell\">\n      {{ cell.number }}\n    </div>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#sudoku-demo',\n  data: {\n    cells: Array.apply(null, { length: 81 })\n      .map(function (_, index) {\n        return {\n          id: index,\n          number: index % 9 + 1\n        }\n      })\n  },\n  methods: {\n    shuffle: function () {\n      this.cells = _.shuffle(this.cells)\n    }\n  }\n})\n</script>\n<style>\n.sudoku-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 238px;\n  margin-top: 10px;\n}\n.cell {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #aaa;\n  margin-right: -1px;\n  margin-bottom: -1px;\n}\n.cell:nth-child(3n) {\n  margin-right: 0;\n}\n.cell:nth-child(27n) {\n  margin-bottom: 0;\n}\n.cell-move {\n  transition: transform 1s;\n}\n</style>\n\n<h3 id=\"Staggering-List-Transitions\"><a href=\"#Staggering-List-Transitions\" class=\"headerlink\" title=\"Staggering List Transitions\"></a>Staggering List Transitions</h3><p>By communicating with JavaScript transitions through data attributes, it’s also possible to stagger transitions in a list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"staggered-list-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"query\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span></span></div><div class=\"line\">    <span class=\"attr\">name</span>=<span class=\"string\">\"staggered-fade\"</span></div><div class=\"line\">    <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in computedList\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.msg\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:data-index</span>=<span class=\"string\">\"index\"</span></div><div class=\"line\">    &gt;&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#staggered-list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">query</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Bruce Lee'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Jackie Chan'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Chuck Norris'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Jet Li'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Kung Fury'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">computedList</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== <span class=\"number\">-1</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">      el.style.height = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> delay = el.dataset.index * <span class=\"number\">150</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Velocity(</div><div class=\"line\">          el,</div><div class=\"line\">          &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span>, <span class=\"attr\">height</span>: <span class=\"string\">'1.6em'</span> &#125;,</div><div class=\"line\">          &#123; <span class=\"attr\">complete</span>: done &#125;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;, delay)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> delay = el.dataset.index * <span class=\"number\">150</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Velocity(</div><div class=\"line\">          el,</div><div class=\"line\">          &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span>, <span class=\"attr\">height</span>: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">          &#123; <span class=\"attr\">complete</span>: done &#125;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;, delay)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"example-5\" class=\"demo\">\n  <input v-model=\"query\">\n  <transition-group name=\"staggered-fade\" tag=\"ul\" v-bind:css=\"false\" v-on:before-enter=\"beforeEnter\" v-on:enter=\"enter\" v-on:leave=\"leave\">\n    <li v-for=\"(item, index) in computedList\" v-bind:key=\"item.msg\" v-bind:data-index=\"index\">{{ item.msg }}</li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n</script>\n\n<h2 id=\"Reusable-Transitions\"><a href=\"#Reusable-Transitions\" class=\"headerlink\" title=\"Reusable Transitions\"></a>Reusable Transitions</h2><p>Transitions can be reused through Vue’s component system. To create a reusable transition, all you have to do is place a <code>&lt;transition&gt;</code> or <code>&lt;transition-group&gt;</code> component at the root, then pass any children into the transition component.</p>\n<p>Here’s an example using a template component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-special-transition'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</span></div><div class=\"line\">    &lt;transition\\</div><div class=\"line\">      name=\"very-special-transition\"\\</div><div class=\"line\">      mode=\"out-in\"\\</div><div class=\"line\">      v-on:before-enter=\"beforeEnter\"\\</div><div class=\"line\">      v-on:after-enter=\"afterEnter\"\\</div><div class=\"line\">    &gt;\\</div><div class=\"line\">      &lt;slot&gt;&lt;/slot&gt;\\</div><div class=\"line\">    &lt;/transition&gt;\\</div><div class=\"line\">  ',</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>And functional components are especially well-suited to this task:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-special-transition'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'very-special-transition'</span></div><div class=\"line\">        mode: <span class=\"string\">'out-in'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">on</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'transition'</span>, data, context.children)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dynamic-Transitions\"><a href=\"#Dynamic-Transitions\" class=\"headerlink\" title=\"Dynamic Transitions\"></a>Dynamic Transitions</h2><p>Yes, even transitions in Vue are data-driven! The most basic example of a dynamic transition binds the <code>name</code> attribute to a dynamic property.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">v-bind:name</span>=<span class=\"string\">\"transitionName\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This can be useful when you’ve defined CSS transitions/animations using Vue’s transition class conventions and simply want to switch between them.</p>\n<p>Really though, any transition attribute can be dynamically bound. And it’s not just attributes. Since event hooks are just methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dynamic-fade-demo\"</span>&gt;</span></div><div class=\"line\">  Fade In: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fadeInDuration\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-bind:max</span>=<span class=\"string\">\"maxFadeDuration\"</span>&gt;</span></div><div class=\"line\">  Fade Out: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fadeOutDuration\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-bind:max</span>=<span class=\"string\">\"maxFadeDuration\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"stop = true\"</span>&gt;</span>Stop it!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#dynamic-fade-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">fadeInDuration</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">    <span class=\"attr\">fadeOutDuration</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">    <span class=\"attr\">maxFadeDuration</span>: <span class=\"number\">1500</span>,</div><div class=\"line\">    <span class=\"attr\">stop</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      Velocity(el,</div><div class=\"line\">        &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"keyword\">this</span>.fadeInDuration,</div><div class=\"line\">          <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            done()</div><div class=\"line\">            <span class=\"keyword\">if</span> (!vm.stop) vm.show = <span class=\"literal\">false</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      Velocity(el,</div><div class=\"line\">        &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"keyword\">this</span>.fadeOutDuration,</div><div class=\"line\">          <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            done()</div><div class=\"line\">            vm.show = <span class=\"literal\">true</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      )</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"dynamic-fade-demo\" class=\"demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition v-bind:css=\"false\" v-on:before-enter=\"beforeEnter\" v-on:enter=\"enter\" v-on:leave=\"leave\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n<script>\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n</script>\n\n<p>Finally, the ultimate way of creating dynamic transitions is through components that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.</p>\n","excerpt":"","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Vue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:</p>\n<ul>\n<li>automatically apply classes for CSS transitions and animations</li>\n<li>integrate 3rd-party CSS animation libraries, such as Animate.css</li>\n<li>use JavaScript to directly manipulate the DOM during transition hooks</li>\n<li>integrate 3rd-party JavaScript animation libraries, such as Velocity.js</li>\n</ul>\n<p>On this page, we’ll only cover entering, leaving, and list transitions, but you can see the next section for <a href=\"transitioning-state.html\">managing state transitions</a>.</p>\n<h2 id=\"Transitioning-Single-Elements-Components\"><a href=\"#Transitioning-Single-Elements-Components\" class=\"headerlink\" title=\"Transitioning Single Elements/Components\"></a>Transitioning Single Elements/Components</h2><p>Vue provides a <code>transition</code> wrapper component, allowing you to add entering/leaving transitions for any element or component in the following contexts:</p>\n<ul>\n<li>Conditional rendering (using <code>v-if</code>)</li>\n<li>Conditional display (using <code>v-show</code>)</li>\n<li>Dynamic components</li>\n<li>Component root nodes</li>\n</ul>\n<p>This is what a very simple example looks like in action:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>, <span class=\"selector-class\">.fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">5s</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.fade-enter</span>, <span class=\"selector-class\">.fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"demo\">\n  <button v-on:click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"demo-transition\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.demo-transition-enter-active, .demo-transition-leave-active {\n  transition: opacity .5s\n}\n.demo-transition-enter, .demo-transition-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>When an element wrapped in a <code>transition</code> component is inserted or removed, this is what happens:</p>\n<ol>\n<li><p>Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition classes will be added/removed at appropriate timings.</p>\n</li>\n<li><p>If the transition component provided <a href=\"#JavaScript-Hooks\">JavaScript hooks</a>, these hooks will be called at appropriate timings.</p>\n</li>\n<li><p>If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue’s concept of <code>nextTick</code>).</p>\n</li>\n</ol>\n<h3 id=\"Transition-Classes\"><a href=\"#Transition-Classes\" class=\"headerlink\" title=\"Transition Classes\"></a>Transition Classes</h3><p>There are four classes applied for enter/leave transitions.</p>\n<ol>\n<li><code>v-enter</code>: Starting state for enter. Applied before element is inserted, removed after one frame.</li>\n<li><code>v-enter-active</code>: Active and ending state for enter. Applied before element is inserted, removed when transition/animation finishes.</li>\n<li><code>v-leave</code>: Starting state for leave. Applied when leave transition is triggered, removed after one frame.</li>\n<li><code>v-leave-active</code>: Active and ending state for leave. Applied when leave transition is triggered, removed when the transition/animation finishes.</li>\n</ol>\n<p><img src=\"/images/transition.png\" alt=\"Transition Diagram\"></p>\n<p>Each of these classes will be prefixed with the name of the transition. Here the <code>v-</code> prefix is the default when you use a <code>&lt;transition&gt;</code> element with no name. If you use <code>&lt;transition name=&quot;my-transition&quot;&gt;</code> for example, then the <code>v-enter</code> class would instead be <code>my-transition-enter</code>.</p>\n<p><code>v-enter-active</code> and <code>v-leave-active</code> give you the ability to specify different easing curves for enter/leave transitions, which you’ll see an example of in the following section.</p>\n<h3 id=\"CSS-Transitions\"><a href=\"#CSS-Transitions\" class=\"headerlink\" title=\"CSS Transitions\"></a>CSS Transitions</h3><p>One of the most common transition types uses CSS transitions. Here’s a simple example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle render</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide-fade\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Enter and leave animations can use different */</span></div><div class=\"line\"><span class=\"comment\">/* durations and timing functions.              */</span></div><div class=\"line\"><span class=\"selector-class\">.slide-fade-enter-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slide-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">8s</span> <span class=\"built_in\">cubic-bezier</span>(1.0, 0.5, 0.8, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slide-fade-enter</span>, <span class=\"selector-class\">.slide-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"example-1\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition name=\"slide-fade\">\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})\n</script>\n<style>\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}\n</style>\n\n<h3 id=\"CSS-Animations\"><a href=\"#CSS-Animations\" class=\"headerlink\" title=\"CSS Animations\"></a>CSS Animations</h3><p>CSS animations are applied in the same way as CSS transitions, the difference being that <code>v-enter</code> is not removed immediately after the element is inserted, but on an <code>animationend</code> event.</p>\n<p>Here’s an example, omitting prefixed CSS rules for the sake of brevity:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span>Toggle show<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bounce\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>Look at me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bounce-enter-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation</span>: bounce-in .<span class=\"number\">5s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.bounce-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">animation</span>: bounce-out .<span class=\"number\">5s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounce-in &#123;</div><div class=\"line\">  0% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0);</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">  &#125;</div><div class=\"line\">  100% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> bounce-out &#123;</div><div class=\"line\">  0% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">  &#125;</div><div class=\"line\">  100% &#123;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"example-2\" class=\"demo\">\n  <button @click=\"show = !show\">Toggle show</button>\n  <transition name=\"bounce\">\n    <p v-show=\"show\">Look at me!</p>\n  </transition>\n</div>\n\n<style>\n  .bounce-enter-active {\n    -webkit-animation: bounce-in .5s;\n    animation: bounce-in .5s;\n  }\n  .bounce-leave-active {\n    -webkit-animation: bounce-out .5s;\n    animation: bounce-out .5s;\n  }\n  @keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n  @-webkit-keyframes bounce-in {\n    0% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n  @-webkit-keyframes bounce-out {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n    50% {\n      -webkit-transform: scale(1.5);\n      transform: scale(1.5);\n    }\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n  }\n</style>\n<script>\nnew Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})\n</script>\n\n<h3 id=\"Custom-Transition-Classes\"><a href=\"#Custom-Transition-Classes\" class=\"headerlink\" title=\"Custom Transition Classes\"></a>Custom Transition Classes</h3><p>You can also specify custom transition classes by providing the following attributes:</p>\n<ul>\n<li><code>enter-class</code></li>\n<li><code>enter-active-class</code></li>\n<li><code>leave-class</code></li>\n<li><code>leave-active-class</code></li>\n</ul>\n<p>These will override the conventional class names. This is especially useful when you want to combine Vue’s transition system with an existing CSS animation library, such as <a href=\"https://daneden.github.io/animate.css/\">Animate.css</a>.</p>\n<p>Here’s an example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/animate.css@3.5.1/animate.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle render</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">    <span class=\"attr\">name</span>=<span class=\"string\">\"custom-classes-transition\"</span></div><div class=\"line\">    <span class=\"attr\">enter-active-class</span>=<span class=\"string\">\"animated tada\"</span></div><div class=\"line\">    <span class=\"attr\">leave-active-class</span>=<span class=\"string\">\"animated bounceOutRight\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<link href=\"https://unpkg.com/animate.css@3.5.1\" rel=\"stylesheet\" type=\"text/css\">\n<div id=\"example-3\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle render\n  </button>\n  <transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})\n</script>\n\n<h3 id=\"Using-Transitions-and-Animations-Together\"><a href=\"#Using-Transitions-and-Animations-Together\" class=\"headerlink\" title=\"Using Transitions and Animations Together\"></a>Using Transitions and Animations Together</h3><p>Vue needs to attach event listeners in order to know when a transition has ended. It can either be <code>transitionend</code> or <code>animationend</code>, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type.</p>\n<p>However, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about in a <code>type</code> attribute, with a value of either <code>animation</code> or <code>transition</code>.</p>\n<h3 id=\"JavaScript-Hooks\"><a href=\"#JavaScript-Hooks\" class=\"headerlink\" title=\"JavaScript Hooks\"></a>JavaScript Hooks</h3><p>You can also define JavaScript hooks in attributes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-enter</span>=<span class=\"string\">\"afterEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter-cancelled</span>=<span class=\"string\">\"enterCancelled\"</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">v-on:before-leave</span>=<span class=\"string\">\"beforeLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-leave</span>=<span class=\"string\">\"afterLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave-cancelled</span>=<span class=\"string\">\"leaveCancelled\"</span></div><div class=\"line\">&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\">  <span class=\"comment\">// ENTERING</span></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\"></div><div class=\"line\">  beforeEnter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// the done callback is optional when</span></div><div class=\"line\">  <span class=\"comment\">// used in combination with CSS</span></div><div class=\"line\">  enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    done()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">enterCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\">  <span class=\"comment\">// LEAVING</span></div><div class=\"line\">  <span class=\"comment\">// --------</span></div><div class=\"line\"></div><div class=\"line\">  beforeLeave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// the done callback is optional when</span></div><div class=\"line\">  <span class=\"comment\">// used in combination with CSS</span></div><div class=\"line\">  leave: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    done()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">afterLeave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// leaveCancelled only available with v-show</span></div><div class=\"line\">  leaveCancelled: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>These hooks can be used in combination with CSS transitions/animations or on their own.</p>\n<p class=\"tip\">When using JavaScript-only transitions, <strong>the <code>done</code> callbacks are required for the <code>enter</code> and <code>leave</code> hooks</strong>. Otherwise, they will be called synchronously and the transition will finish immediately.</p>\n\n<p class=\"tip\">It’s also a good idea to explicitly add <code>v-bind:css=&quot;false&quot;</code> for JavaScript-only transitions so that Vue can skip the CSS detection. This also prevents CSS rules from accidentally interfering with the transition.</p>\n\n<p>Now let’s dive into an example. Here’s a simple JavaScript transition using Velocity.js:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</div><div class=\"line\">Velocity works very much like jQuery.animate and is</div><div class=\"line\">a great option for JavaScript animations</div><div class=\"line\">--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></div><div class=\"line\">    Toggle</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span></div><div class=\"line\">      Demo</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span>, <span class=\"attr\">fontSize</span>: <span class=\"string\">'1.4em'</span> &#125;, &#123; <span class=\"attr\">duration</span>: <span class=\"number\">300</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">fontSize</span>: <span class=\"string\">'1em'</span> &#125;, &#123; <span class=\"attr\">complete</span>: done &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">translateX</span>: <span class=\"string\">'15px'</span>, <span class=\"attr\">rotateZ</span>: <span class=\"string\">'50deg'</span> &#125;, &#123; <span class=\"attr\">duration</span>: <span class=\"number\">600</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123; <span class=\"attr\">rotateZ</span>: <span class=\"string\">'100deg'</span> &#125;, &#123; <span class=\"attr\">loop</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\">      Velocity(el, &#123;</div><div class=\"line\">        <span class=\"attr\">rotateZ</span>: <span class=\"string\">'45deg'</span>,</div><div class=\"line\">        <span class=\"attr\">translateY</span>: <span class=\"string\">'30px'</span>,</div><div class=\"line\">        <span class=\"attr\">translateX</span>: <span class=\"string\">'30px'</span>,</div><div class=\"line\">        <span class=\"attr\">opacity</span>: <span class=\"number\">0</span></div><div class=\"line\">      &#125;, &#123; <span class=\"attr\">complete</span>: done &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<div id=\"example-4\" class=\"demo\">\n  <button @click=\"show = !show\">\n    Toggle\n  </button>\n  <transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">\n      Demo\n    </p>\n  </transition>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<script>\nnew Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.transformOrigin = 'left'\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})\n</script>\n\n<h2 id=\"Transitions-on-Initial-Render\"><a href=\"#Transitions-on-Initial-Render\" class=\"headerlink\" title=\"Transitions on Initial Render\"></a>Transitions on Initial Render</h2><p>If you also want to apply a transition on the initial render of a node, you can add the <code>appear</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>By default, this will use the transitions specified for entering and leaving. If you’d like however, you can also specify custom CSS classes:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">  <span class=\"attr\">appear</span></div><div class=\"line\">  <span class=\"attr\">appear-class</span>=<span class=\"string\">\"custom-appear-class\"</span></div><div class=\"line\">  <span class=\"attr\">appear-active-class</span>=<span class=\"string\">\"custom-appear-active-class\"</span></div><div class=\"line\">&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>and custom JavaScript hooks:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">  <span class=\"attr\">appear</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-appear</span>=<span class=\"string\">\"customBeforeAppearHook\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:appear</span>=<span class=\"string\">\"customAppearHook\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-appear</span>=<span class=\"string\">\"customAfterAppearHook\"</span></div><div class=\"line\">&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Transitioning-Between-Elements\"><a href=\"#Transitioning-Between-Elements\" class=\"headerlink\" title=\"Transitioning Between Elements\"></a>Transitioning Between Elements</h2><p>We discuss <a href=\"#Transitioning-Between-Components\">transitioning between components</a> later, but you can also transition between raw elements using <code>v-if</code>/<code>v-else</code>. One of the most common two-element transitions is between a list container and a message describing an empty list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"items.length &gt; 0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>Sorry, no items found.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This works well, but there’s one caveat to be aware of:</p>\n<p class=\"tip\">When toggling between elements that have <strong>the same tag name</strong>, you must tell Vue that they are distinct elements by giving them unique <code>key</code> attributes. Otherwise, Vue’s compiler will only replace the content of the element for efficiency. Even when technically unnecessary though, <strong>it’s considered good practice to always key multiple items within a <code>&lt;transition&gt;</code> component.</strong></p>\n\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"isEditing\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"save\"</span>&gt;</span></div><div class=\"line\">    Save</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-else</span> <span class=\"attr\">key</span>=<span class=\"string\">\"edit\"</span>&gt;</span></div><div class=\"line\">    Edit</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>In these cases, you can also use the <code>key</code> attribute to transition between different states of the same element. Instead of using <code>v-if</code> and <code>v-else</code>, the above example could be rewritten as:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"isEditing\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; isEditing ? 'Save' : 'Edit' &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It’s actually possible to transition between any number of elements, either by using multiple <code>v-if</code>s or binding a single element to a dynamic property. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'saved'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"saved\"</span>&gt;</span></div><div class=\"line\">    Edit</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'edited'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"edited\"</span>&gt;</span></div><div class=\"line\">    Save</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"docState === 'editing'\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"editing\"</span>&gt;</span></div><div class=\"line\">    Cancel</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Which could also be written as:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"docState\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; buttonMessage &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">buttonMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (docState) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'saved'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Edit'</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'edited'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Save'</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'editing'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'Cancel'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Transition-Modes\"><a href=\"#Transition-Modes\" class=\"headerlink\" title=\"Transition Modes\"></a>Transition Modes</h3><p>There’s still one problem though. Try clicking the button below:</p>\n\n<div id=\"no-mode-demo\" class=\"demo\">\n  <transition name=\"no-mode-fade\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-fade-enter-active, .no-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.no-mode-fade-enter, .no-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>As it’s transitioning between the “on” button and the “off” button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of <code>&lt;transition&gt;</code> - entering and leaving happens simultaneously.</p>\n<p>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</p>\n\n<div id=\"no-mode-absolute-demo\" class=\"demo\">\n  <div class=\"no-mode-absolute-demo-wrapper\">\n    <transition name=\"no-mode-absolute-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-absolute-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-absolute-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-absolute-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-absolute-fade-enter-active, .no-mode-absolute-fade-leave-active {\n  transition: opacity .5s;\n}\n.no-mode-absolute-fade-enter, .no-mode-absolute-fade-leave-active {\n  opacity: 0;\n}\n</style>\n\n<p>And then maybe also translated so that they look like slide transitions:</p>\n\n<div id=\"no-mode-translate-demo\" class=\"demo\">\n  <div class=\"no-mode-translate-demo-wrapper\">\n    <transition name=\"no-mode-translate-fade\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#no-mode-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.no-mode-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.no-mode-translate-demo-wrapper button {\n  position: absolute;\n}\n.no-mode-translate-fade-enter-active, .no-mode-translate-fade-leave-active {\n  transition: all 1s;\n}\n.no-mode-translate-fade-enter, .no-mode-translate-fade-leave-active {\n  opacity: 0;\n}\n.no-mode-translate-fade-enter {\n  transform: translateX(31px);\n}\n.no-mode-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n\n<p>Simultaneous entering and leaving transitions aren’t always desirable though, so Vue offers some alternative <strong>transition modes</strong>:</p>\n<ul>\n<li><p><code>in-out</code>: New element transitions in first, then when complete, the current element transitions out.</p>\n</li>\n<li><p><code>out-in</code>: Current element transitions out first, then when complete, the new element transitions in.</p>\n</li>\n</ul>\n<p>Now let’s update the transition for our on/off buttons with <code>out-in</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... the buttons ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<div id=\"with-mode-demo\" class=\"demo\">\n  <transition name=\"with-mode-fade\" mode=\"out-in\">\n    <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n      on\n    </button>\n    <button v-else key=\"off\" @click=\"on = true\">\n      off\n    </button>\n  </transition>\n</div>\n<script>\nnew Vue({\n  el: '#with-mode-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.with-mode-fade-enter-active, .with-mode-fade-leave-active {\n  transition: opacity .5s\n}\n.with-mode-fade-enter, .with-mode-fade-leave-active {\n  opacity: 0\n}\n</style>\n\n<p>With one simple attribute addition, we’ve fixed that original transition without having to add any special styling.</p>\n<p>The <code>in-out</code> mode isn’t used as often, but can sometimes be useful for a slightly different transition effect. Let’s try combining it with the slide-fade transition we worked on earlier:</p>\n\n<div id=\"in-out-translate-demo\" class=\"demo\">\n  <div class=\"in-out-translate-demo-wrapper\">\n    <transition name=\"in-out-translate-fade\" mode=\"in-out\">\n      <button v-if=\"on\" key=\"on\" @click=\"on = false\">\n        on\n      </button>\n      <button v-else key=\"off\" @click=\"on = true\">\n        off\n      </button>\n    </transition>\n  </div>\n</div>\n<script>\nnew Vue({\n  el: '#in-out-translate-demo',\n  data: {\n    on: false\n  }\n})\n</script>\n<style>\n.in-out-translate-demo-wrapper {\n  position: relative;\n  height: 18px;\n}\n.in-out-translate-demo-wrapper button {\n  position: absolute;\n}\n.in-out-translate-fade-enter-active, .in-out-translate-fade-leave-active {\n  transition: all .5s;\n}\n.in-out-translate-fade-enter, .in-out-translate-fade-leave-active {\n  opacity: 0;\n}\n.in-out-translate-fade-enter {\n  transform: translateX(31px);\n}\n.in-out-translate-fade-leave-active {\n  transform: translateX(-31px);\n}\n</style>\n\n<p>Pretty cool, right?</p>\n<h2 id=\"Transitioning-Between-Components\"><a href=\"#Transitioning-Between-Components\" class=\"headerlink\" title=\"Transitioning Between Components\"></a>Transitioning Between Components</h2><p>Transitioning between components is even simpler - we don’t even need the <code>key</code> attribute. Instead, we just wrap a <a href=\"components.html#Dynamic-Components\">dynamic component</a>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"component-fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#transition-components-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"string\">'v-a'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'v-a'</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Component A&lt;/div&gt;'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'v-b'</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Component B&lt;/div&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.component-fade-enter-active</span>, <span class=\"selector-class\">.component-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.component-fade-enter</span>, <span class=\"selector-class\">.component-fade-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"transition-components-demo\" class=\"demo\">\n  <input v-model=\"view\" type=\"radio\" value=\"v-a\" id=\"a\" name=\"view\"><label for=\"a\">A</label>\n  <input v-model=\"view\" type=\"radio\" value=\"v-b\" id=\"b\" name=\"view\"><label for=\"b\">B</label>\n  <transition name=\"component-fade\" mode=\"out-in\">\n    <component v-bind:is=\"view\"></component>\n  </transition>\n</div>\n<style>\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-active {\n  opacity: 0;\n}\n</style>\n<script>\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n</script>\n\n<h2 id=\"List-Transitions\"><a href=\"#List-Transitions\" class=\"headerlink\" title=\"List Transitions\"></a>List Transitions</h2><p>So far, we’ve managed transitions for:</p>\n<ul>\n<li>Individual nodes</li>\n<li>Multiple nodes where only 1 is rendered at a time</li>\n</ul>\n<p>So what about for when we have a whole list of items we want to render simultaneously, for example with <code>v-for</code>? In this case, we’ll use the <code>&lt;transition-group&gt;</code> component. Before we dive into an example though, there are a few things that are important to know about this component:</p>\n<ul>\n<li>Unlike <code>&lt;transition&gt;</code>, it renders an actual element: a <code>&lt;span&gt;</code> by default. You can change the element that’s rendered with the <code>tag</code> attribute.</li>\n<li>Elements inside are <strong>always required</strong> to have a unique <code>key</code> attribute</li>\n</ul>\n<h3 id=\"List-Entering-Leaving-Transitions\"><a href=\"#List-Entering-Leaving-Transitions\" class=\"headerlink\" title=\"List Entering/Leaving Transitions\"></a>List Entering/Leaving Transitions</h3><p>Now let’s dive into a simple example, transitioning entering and leaving using the same CSS classes we’ve used previously:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"add\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"remove\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"p\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"attr\">nextNum</span>: <span class=\"number\">10</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">randomIndex</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.items.length)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.nextNum++)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-enter-active</span>, <span class=\"selector-class\">.list-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-enter</span>, <span class=\"selector-class\">.list-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(30px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<div id=\"list-demo\" class=\"demo\">\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n</script>\n<style>\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n</style>\n\n<p>There’s one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We’ll fix that later.</p>\n<h3 id=\"List-Move-Transitions\"><a href=\"#List-Move-Transitions\" class=\"headerlink\" title=\"List Move Transitions\"></a>List Move Transitions</h3><p>The <code>&lt;transition-group&gt;</code> component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of <strong>the <code>v-move</code> class</strong>, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided <code>name</code> attribute and you can also manually specify a class with the <code>move-class</code> attribute.</p>\n<p>This class is mostly useful for specifying the transition timing and easing curve, as you’ll see below:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"flip-list-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"shuffle\"</span>&gt;</span>Shuffle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"flip-list\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#flip-list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">shuffle</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = _.shuffle(<span class=\"keyword\">this</span>.items)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flip-list-move</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1s</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"flip-list-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <transition-group name=\"flip-list\" tag=\"ul\">\n    <li v-for=\"item in items\" :key=\"item\">\n      {{ item }}\n    </li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.flip-list-move {\n  transition: transform 1s;\n}\n</style>\n\n<p>This might seem like magic, but under the hood, Vue is using a simple animation technique called <a href=\"https://aerotwist.com/blog/flip-your-animations/\">FLIP</a> to smoothly transition elements from their old position to their new position using transforms.</p>\n<p>We can combine this technique with our previous implementation to animate every possible change to our list!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-complete-demo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"shuffle\"</span>&gt;</span>Shuffle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"add\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"remove\"</span>&gt;</span>Remove<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list-complete\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"p\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item\"</span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"list-complete-item\"</span></div><div class=\"line\">    &gt;</span></div><div class=\"line\">      &#123;&#123; item &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#list-complete-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"attr\">nextNum</span>: <span class=\"number\">10</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">randomIndex</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"keyword\">this</span>.items.length)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.nextNum++)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items.splice(<span class=\"keyword\">this</span>.randomIndex(), <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">shuffle</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = _.shuffle(<span class=\"keyword\">this</span>.items)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list-complete-item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-complete-enter</span>, <span class=\"selector-class\">.list-complete-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(30px);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list-complete-leave-active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\"></script>\n<div id=\"list-complete-demo\" class=\"demo\">\n  <button v-on:click=\"shuffle\">Shuffle</button>\n  <button v-on:click=\"add\">Add</button>\n  <button v-on:click=\"remove\">Remove</button>\n  <transition-group name=\"list-complete\" tag=\"p\">\n    <span v-for=\"item in items\" :key=\"item\" class=\"list-complete-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})\n</script>\n<style>\n.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}\n</style>\n\n<p class=\"tip\">One important note is that these FLIP transitions do not work with elements set to <code>display: inline</code>. As an alternative, you can use <code>display: inline-block</code> or place elements in a flex context.</p>\n\n<p>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can transitioned <a href=\"https://jsfiddle.net/chrisvfritz/sLrhk1bc/\">just as easily</a>:</p>\n\n<div id=\"sudoku-demo\" class=\"demo\">\n  <strong>Lazy Sudoku</strong>\n  <p>Keep hitting the shuffle button until you win.</p>\n  <button @click=\"shuffle\">\n    Shuffle\n  </button>\n  <transition-group name=\"cell\" tag=\"div\" class=\"sudoku-container\">\n    <div v-for=\"cell in cells\" :key=\"cell.id\" class=\"cell\">\n      {{ cell.number }}\n    </div>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#sudoku-demo',\n  data: {\n    cells: Array.apply(null, { length: 81 })\n      .map(function (_, index) {\n        return {\n          id: index,\n          number: index % 9 + 1\n        }\n      })\n  },\n  methods: {\n    shuffle: function () {\n      this.cells = _.shuffle(this.cells)\n    }\n  }\n})\n</script>\n<style>\n.sudoku-container {\n  display: flex;\n  flex-wrap: wrap;\n  width: 238px;\n  margin-top: 10px;\n}\n.cell {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #aaa;\n  margin-right: -1px;\n  margin-bottom: -1px;\n}\n.cell:nth-child(3n) {\n  margin-right: 0;\n}\n.cell:nth-child(27n) {\n  margin-bottom: 0;\n}\n.cell-move {\n  transition: transform 1s;\n}\n</style>\n\n<h3 id=\"Staggering-List-Transitions\"><a href=\"#Staggering-List-Transitions\" class=\"headerlink\" title=\"Staggering List Transitions\"></a>Staggering List Transitions</h3><p>By communicating with JavaScript transitions through data attributes, it’s also possible to stagger transitions in a list:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"staggered-list-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"query\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span></div><div class=\"line\">    <span class=\"attr\">name</span>=<span class=\"string\">\"staggered-fade\"</span></div><div class=\"line\">    <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></div><div class=\"line\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in computedList\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.msg\"</span></div><div class=\"line\">      <span class=\"attr\">v-bind:data-index</span>=<span class=\"string\">\"index\"</span></div><div class=\"line\">    &gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#staggered-list-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">query</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Bruce Lee'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Jackie Chan'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Chuck Norris'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Jet Li'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">msg</span>: <span class=\"string\">'Kung Fury'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">computedList</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== <span class=\"number\">-1</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">      el.style.height = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> delay = el.dataset.index * <span class=\"number\">150</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Velocity(</div><div class=\"line\">          el,</div><div class=\"line\">          &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span>, <span class=\"attr\">height</span>: <span class=\"string\">'1.6em'</span> &#125;,</div><div class=\"line\">          &#123; <span class=\"attr\">complete</span>: done &#125;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;, delay)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> delay = el.dataset.index * <span class=\"number\">150</span></div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Velocity(</div><div class=\"line\">          el,</div><div class=\"line\">          &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span>, <span class=\"attr\">height</span>: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">          &#123; <span class=\"attr\">complete</span>: done &#125;</div><div class=\"line\">        )</div><div class=\"line\">      &#125;, delay)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"example-5\" class=\"demo\">\n  <input v-model=\"query\">\n  <transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    >{{ item.msg }}</li>\n  </transition-group>\n</div>\n<script>\nnew Vue({\n  el: '#example-5',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})\n</script>\n\n<h2 id=\"Reusable-Transitions\"><a href=\"#Reusable-Transitions\" class=\"headerlink\" title=\"Reusable Transitions\"></a>Reusable Transitions</h2><p>Transitions can be reused through Vue’s component system. To create a reusable transition, all you have to do is place a <code>&lt;transition&gt;</code> or <code>&lt;transition-group&gt;</code> component at the root, then pass any children into the transition component.</p>\n<p>Here’s an example using a template component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-special-transition'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'\\</div><div class=\"line\">    &lt;transition\\</div><div class=\"line\">      name=\"very-special-transition\"\\</div><div class=\"line\">      mode=\"out-in\"\\</div><div class=\"line\">      v-on:before-enter=\"beforeEnter\"\\</div><div class=\"line\">      v-on:after-enter=\"afterEnter\"\\</div><div class=\"line\">    &gt;\\</div><div class=\"line\">      &lt;slot&gt;&lt;/slot&gt;\\</div><div class=\"line\">    &lt;/transition&gt;\\</div><div class=\"line\">  '</span>,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>And functional components are especially well-suited to this task:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-special-transition'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'very-special-transition'</span></div><div class=\"line\">        mode: <span class=\"string\">'out-in'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">on</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">afterEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'transition'</span>, data, context.children)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dynamic-Transitions\"><a href=\"#Dynamic-Transitions\" class=\"headerlink\" title=\"Dynamic Transitions\"></a>Dynamic Transitions</h2><p>Yes, even transitions in Vue are data-driven! The most basic example of a dynamic transition binds the <code>name</code> attribute to a dynamic property.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">v-bind:name</span>=<span class=\"string\">\"transitionName\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>This can be useful when you’ve defined CSS transitions/animations using Vue’s transition class conventions and simply want to switch between them.</p>\n<p>Really though, any transition attribute can be dynamically bound. And it’s not just attributes. Since event hooks are just methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dynamic-fade-demo\"</span>&gt;</span></div><div class=\"line\">  Fade In: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fadeInDuration\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-bind:max</span>=<span class=\"string\">\"maxFadeDuration\"</span>&gt;</span></div><div class=\"line\">  Fade Out: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"fadeOutDuration\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-bind:max</span>=<span class=\"string\">\"maxFadeDuration\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">    <span class=\"attr\">v-bind:css</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">    <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"stop = true\"</span>&gt;</span>Stop it!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#dynamic-fade-demo'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">fadeInDuration</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">    <span class=\"attr\">fadeOutDuration</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">    <span class=\"attr\">maxFadeDuration</span>: <span class=\"number\">1500</span>,</div><div class=\"line\">    <span class=\"attr\">stop</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">beforeEnter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      el.style.opacity = <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      Velocity(el,</div><div class=\"line\">        &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"keyword\">this</span>.fadeInDuration,</div><div class=\"line\">          <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            done()</div><div class=\"line\">            <span class=\"keyword\">if</span> (!vm.stop) vm.show = <span class=\"literal\">false</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">      Velocity(el,</div><div class=\"line\">        &#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"keyword\">this</span>.fadeOutDuration,</div><div class=\"line\">          <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            done()</div><div class=\"line\">            vm.show = <span class=\"literal\">true</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      )</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\"></script>\n<div id=\"dynamic-fade-demo\" class=\"demo\">\n  Fade In: <input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  Fade Out: <input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\">\n  <transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  >\n    <p v-if=\"show\">hello</p>\n  </transition>\n  <button v-on:click=\"stop = true\">Stop it!</button>\n</div>\n<script>\nnew Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})\n</script>\n\n<p>Finally, the ultimate way of creating dynamic transitions is through components that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.</p>\n"},{"title":"Unit Testing","type":"guide","order":23,"_content":"\n## Setup and Tooling\n\nAnything compatible with a module-based build system will work, but if you're looking for a specific recommendation, try the [Karma](http://karma-runner.github.io) test runner. It has a lot of community plugins, including support for [Webpack](https://github.com/webpack/karma-webpack) and [Browserify](https://github.com/Nikku/karma-browserify). For detailed setup, please refer to each project's respective documentation, though these example Karma configurations for [Webpack](https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js) and [Browserify](https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js) may help you get started.\n\n## Simple Assertions\n\nIn terms of code structure for testing, you don't have to do anything special in your components to make them testable. Just export the raw options:\n\n``` html\n<template>\n  <span>{{ message }}</span>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        message: 'hello!'\n      }\n    },\n    created () {\n      this.message = 'bye!'\n    }\n  }\n</script>\n```\n\nWhen you test that component, all you have to do is import the object along with Vue to make many common assertions:\n\n``` js\n// Import Vue and the component being tested\nimport Vue from 'vue'\nimport MyComponent from 'path/to/MyComponent.vue'\n\n// Here are some Jasmine 2.0 tests, though you can\n// use any test runner / assertion library combo you prefer\ndescribe('MyComponent', () => {\n  // Inspect the raw component options\n  it('has a created hook', () => {\n    expect(typeof MyComponent.created).toBe('function')\n  })\n\n  // Evaluate the results of functions in\n  // the raw component options\n  it('sets the correct default data', () => {\n    expect(typeof MyComponent.data).toBe('function')\n    const defaultData = MyComponent.data()\n    expect(defaultData.message).toBe('hello!')\n  })\n\n  // Inspect the component instance on mount\n  it('correctly sets the message when created', () => {\n    const vm = new Vue(MyComponent).$mount()\n    expect(vm.message).toBe('bye!')\n  })\n\n  // Mount an instance and inspect the render output\n  it('renders the correct message', () => {\n    const Ctor = Vue.extend(MyComponent)\n    const vm = new Ctor().$mount()\n    expect(vm.$el.textContent).toBe('bye!')\n  })\n})\n```\n\n## Writing Testable Components\n\nA lot of components' render output are primarily determined by the props they receive. In fact, if a component's render output solely depends on its props, it becomes quite straightforward to test, similar to asserting the return value of a pure function with different arguments. Take an contrived example:\n\n``` html\n<template>\n  <p>{{ msg }}</p>\n</template>\n\n<script>\n  export default {\n    props: ['msg']\n  }\n</script>\n```\n\nYou can assert its render output with different props using the `propsData` option:\n\n``` js\nimport Vue from 'vue'\nimport MyComponent from './MyComponent.vue'\n\n// helper function that mounts and returns the rendered text\nfunction getRenderedText (Component, propsData) {\n  const Ctor = Vue.extend(Component)\n  const vm = new Ctor({ propsData }).$mount()\n  return vm.$el.textContent\n}\n\ndescribe('MyComponent', () => {\n  it('render correctly with different props', () => {\n    expect(getRenderedText(MyComponent, {\n      msg: 'Hello'\n    })).toBe('Hello')\n\n    expect(getRenderedText(MyComponent, {\n      msg: 'Bye'\n    })).toBe('Bye')\n  })\n})\n```\n\n## Asserting Asynchronous Updates\n\nSince Vue [performs DOM updates asynchronously](reactivity.html#Async-Update-Queue), assertions on DOM updates resulting from state change will have to be made in a `Vue.nextTick` callback:\n\n``` js\n// Inspect the generated HTML after a state update\nit('updates the rendered message when vm.message updates', done => {\n  const vm = new Vue(MyComponent).$mount()\n  vm.message = 'foo'\n\n  // wait a \"tick\" after state change before asserting DOM updates\n  Vue.nextTick(() => {\n    expect(vm.$el.textContent).toBe('foo')\n    done()\n  })\n})\n```\n\nWe are planning to work on a collection of common test helpers that makes it even simpler to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.\n","source":"v2/guide/unit-testing.md","raw":"---\ntitle: Unit Testing\ntype: guide\norder: 23\n---\n\n## Setup and Tooling\n\nAnything compatible with a module-based build system will work, but if you're looking for a specific recommendation, try the [Karma](http://karma-runner.github.io) test runner. It has a lot of community plugins, including support for [Webpack](https://github.com/webpack/karma-webpack) and [Browserify](https://github.com/Nikku/karma-browserify). For detailed setup, please refer to each project's respective documentation, though these example Karma configurations for [Webpack](https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js) and [Browserify](https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js) may help you get started.\n\n## Simple Assertions\n\nIn terms of code structure for testing, you don't have to do anything special in your components to make them testable. Just export the raw options:\n\n``` html\n<template>\n  <span>{{ message }}</span>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        message: 'hello!'\n      }\n    },\n    created () {\n      this.message = 'bye!'\n    }\n  }\n</script>\n```\n\nWhen you test that component, all you have to do is import the object along with Vue to make many common assertions:\n\n``` js\n// Import Vue and the component being tested\nimport Vue from 'vue'\nimport MyComponent from 'path/to/MyComponent.vue'\n\n// Here are some Jasmine 2.0 tests, though you can\n// use any test runner / assertion library combo you prefer\ndescribe('MyComponent', () => {\n  // Inspect the raw component options\n  it('has a created hook', () => {\n    expect(typeof MyComponent.created).toBe('function')\n  })\n\n  // Evaluate the results of functions in\n  // the raw component options\n  it('sets the correct default data', () => {\n    expect(typeof MyComponent.data).toBe('function')\n    const defaultData = MyComponent.data()\n    expect(defaultData.message).toBe('hello!')\n  })\n\n  // Inspect the component instance on mount\n  it('correctly sets the message when created', () => {\n    const vm = new Vue(MyComponent).$mount()\n    expect(vm.message).toBe('bye!')\n  })\n\n  // Mount an instance and inspect the render output\n  it('renders the correct message', () => {\n    const Ctor = Vue.extend(MyComponent)\n    const vm = new Ctor().$mount()\n    expect(vm.$el.textContent).toBe('bye!')\n  })\n})\n```\n\n## Writing Testable Components\n\nA lot of components' render output are primarily determined by the props they receive. In fact, if a component's render output solely depends on its props, it becomes quite straightforward to test, similar to asserting the return value of a pure function with different arguments. Take an contrived example:\n\n``` html\n<template>\n  <p>{{ msg }}</p>\n</template>\n\n<script>\n  export default {\n    props: ['msg']\n  }\n</script>\n```\n\nYou can assert its render output with different props using the `propsData` option:\n\n``` js\nimport Vue from 'vue'\nimport MyComponent from './MyComponent.vue'\n\n// helper function that mounts and returns the rendered text\nfunction getRenderedText (Component, propsData) {\n  const Ctor = Vue.extend(Component)\n  const vm = new Ctor({ propsData }).$mount()\n  return vm.$el.textContent\n}\n\ndescribe('MyComponent', () => {\n  it('render correctly with different props', () => {\n    expect(getRenderedText(MyComponent, {\n      msg: 'Hello'\n    })).toBe('Hello')\n\n    expect(getRenderedText(MyComponent, {\n      msg: 'Bye'\n    })).toBe('Bye')\n  })\n})\n```\n\n## Asserting Asynchronous Updates\n\nSince Vue [performs DOM updates asynchronously](reactivity.html#Async-Update-Queue), assertions on DOM updates resulting from state change will have to be made in a `Vue.nextTick` callback:\n\n``` js\n// Inspect the generated HTML after a state update\nit('updates the rendered message when vm.message updates', done => {\n  const vm = new Vue(MyComponent).$mount()\n  vm.message = 'foo'\n\n  // wait a \"tick\" after state change before asserting DOM updates\n  Vue.nextTick(() => {\n    expect(vm.$el.textContent).toBe('foo')\n    done()\n  })\n})\n```\n\nWe are planning to work on a collection of common test helpers that makes it even simpler to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.\n","date":"2016-11-07T20:41:56.000Z","updated":"2016-11-07T11:47:30.000Z","path":"v2/guide/unit-testing.html","comments":1,"layout":"page","_id":"civ8jcjoz001i91m1ix5cc6sc","content":"<h2 id=\"Setup-and-Tooling\"><a href=\"#Setup-and-Tooling\" class=\"headerlink\" title=\"Setup and Tooling\"></a>Setup and Tooling</h2><p>Anything compatible with a module-based build system will work, but if you’re looking for a specific recommendation, try the <a href=\"http://karma-runner.github.io\" target=\"_blank\" rel=\"external\">Karma</a> test runner. It has a lot of community plugins, including support for <a href=\"https://github.com/webpack/karma-webpack\" target=\"_blank\" rel=\"external\">Webpack</a> and <a href=\"https://github.com/Nikku/karma-browserify\" target=\"_blank\" rel=\"external\">Browserify</a>. For detailed setup, please refer to each project’s respective documentation, though these example Karma configurations for <a href=\"https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js\" target=\"_blank\" rel=\"external\">Webpack</a> and <a href=\"https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js\" target=\"_blank\" rel=\"external\">Browserify</a> may help you get started.</p>\n<h2 id=\"Simple-Assertions\"><a href=\"#Simple-Assertions\" class=\"headerlink\" title=\"Simple Assertions\"></a>Simple Assertions</h2><p>In terms of code structure for testing, you don’t have to do anything special in your components to make them testable. Just export the raw options:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    created () &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'bye!'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you test that component, all you have to do is import the object along with Vue to make many common assertions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Import Vue and the component being tested</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'path/to/MyComponent.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Here are some Jasmine 2.0 tests, though you can</span></div><div class=\"line\"><span class=\"comment\">// use any test runner / assertion library combo you prefer</span></div><div class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Inspect the raw component options</span></div><div class=\"line\">  it(<span class=\"string\">'has a created hook'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.created).toBe(<span class=\"string\">'function'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Evaluate the results of functions in</span></div><div class=\"line\">  <span class=\"comment\">// the raw component options</span></div><div class=\"line\">  it(<span class=\"string\">'sets the correct default data'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.data).toBe(<span class=\"string\">'function'</span>)</div><div class=\"line\">    <span class=\"keyword\">const</span> defaultData = MyComponent.data()</div><div class=\"line\">    expect(defaultData.message).toBe(<span class=\"string\">'hello!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Inspect the component instance on mount</span></div><div class=\"line\">  it(<span class=\"string\">'correctly sets the message when created'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</div><div class=\"line\">    expect(vm.message).toBe(<span class=\"string\">'bye!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Mount an instance and inspect the render output</span></div><div class=\"line\">  it(<span class=\"string\">'renders the correct message'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Ctor = Vue.extend(MyComponent)</div><div class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Ctor().$mount()</div><div class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'bye!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Writing-Testable-Components\"><a href=\"#Writing-Testable-Components\" class=\"headerlink\" title=\"Writing Testable Components\"></a>Writing Testable Components</h2><p>A lot of components’ render output are primarily determined by the props they receive. In fact, if a component’s render output solely depends on its props, it becomes quite straightforward to test, similar to asserting the return value of a pure function with different arguments. Take an contrived example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can assert its render output with different props using the <code>propsData</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// helper function that mounts and returns the rendered text</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRenderedText</span> (<span class=\"params\">Component, propsData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> Ctor = Vue.extend(Component)</div><div class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Ctor(&#123; propsData &#125;).$mount()</div><div class=\"line\">  <span class=\"keyword\">return</span> vm.$el.textContent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; &#123;</div><div class=\"line\">  it(<span class=\"string\">'render correctly with different props'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getRenderedText(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">    &#125;)).toBe(<span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">    expect(getRenderedText(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">'Bye'</span></div><div class=\"line\">    &#125;)).toBe(<span class=\"string\">'Bye'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Asserting-Asynchronous-Updates\"><a href=\"#Asserting-Asynchronous-Updates\" class=\"headerlink\" title=\"Asserting Asynchronous Updates\"></a>Asserting Asynchronous Updates</h2><p>Since Vue <a href=\"reactivity.html#Async-Update-Queue\">performs DOM updates asynchronously</a>, assertions on DOM updates resulting from state change will have to be made in a <code>Vue.nextTick</code> callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Inspect the generated HTML after a state update</span></div><div class=\"line\">it(<span class=\"string\">'updates the rendered message when vm.message updates'</span>, done =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</div><div class=\"line\">  vm.message = <span class=\"string\">'foo'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait a \"tick\" after state change before asserting DOM updates</span></div><div class=\"line\">  Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'foo'</span>)</div><div class=\"line\">    done()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>We are planning to work on a collection of common test helpers that makes it even simpler to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.</p>\n","excerpt":"","more":"<h2 id=\"Setup-and-Tooling\"><a href=\"#Setup-and-Tooling\" class=\"headerlink\" title=\"Setup and Tooling\"></a>Setup and Tooling</h2><p>Anything compatible with a module-based build system will work, but if you’re looking for a specific recommendation, try the <a href=\"http://karma-runner.github.io\">Karma</a> test runner. It has a lot of community plugins, including support for <a href=\"https://github.com/webpack/karma-webpack\">Webpack</a> and <a href=\"https://github.com/Nikku/karma-browserify\">Browserify</a>. For detailed setup, please refer to each project’s respective documentation, though these example Karma configurations for <a href=\"https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js\">Webpack</a> and <a href=\"https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js\">Browserify</a> may help you get started.</p>\n<h2 id=\"Simple-Assertions\"><a href=\"#Simple-Assertions\" class=\"headerlink\" title=\"Simple Assertions\"></a>Simple Assertions</h2><p>In terms of code structure for testing, you don’t have to do anything special in your components to make them testable. Just export the raw options:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    created () &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'bye!'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you test that component, all you have to do is import the object along with Vue to make many common assertions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Import Vue and the component being tested</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'path/to/MyComponent.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Here are some Jasmine 2.0 tests, though you can</span></div><div class=\"line\"><span class=\"comment\">// use any test runner / assertion library combo you prefer</span></div><div class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Inspect the raw component options</span></div><div class=\"line\">  it(<span class=\"string\">'has a created hook'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.created).toBe(<span class=\"string\">'function'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Evaluate the results of functions in</span></div><div class=\"line\">  <span class=\"comment\">// the raw component options</span></div><div class=\"line\">  it(<span class=\"string\">'sets the correct default data'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.data).toBe(<span class=\"string\">'function'</span>)</div><div class=\"line\">    <span class=\"keyword\">const</span> defaultData = MyComponent.data()</div><div class=\"line\">    expect(defaultData.message).toBe(<span class=\"string\">'hello!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Inspect the component instance on mount</span></div><div class=\"line\">  it(<span class=\"string\">'correctly sets the message when created'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</div><div class=\"line\">    expect(vm.message).toBe(<span class=\"string\">'bye!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Mount an instance and inspect the render output</span></div><div class=\"line\">  it(<span class=\"string\">'renders the correct message'</span>, () =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> Ctor = Vue.extend(MyComponent)</div><div class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Ctor().$mount()</div><div class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'bye!'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Writing-Testable-Components\"><a href=\"#Writing-Testable-Components\" class=\"headerlink\" title=\"Writing Testable Components\"></a>Writing Testable Components</h2><p>A lot of components’ render output are primarily determined by the props they receive. In fact, if a component’s render output solely depends on its props, it becomes quite straightforward to test, similar to asserting the return value of a pure function with different arguments. Take an contrived example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can assert its render output with different props using the <code>propsData</code> option:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// helper function that mounts and returns the rendered text</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRenderedText</span> (<span class=\"params\">Component, propsData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> Ctor = Vue.extend(Component)</div><div class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Ctor(&#123; propsData &#125;).$mount()</div><div class=\"line\">  <span class=\"keyword\">return</span> vm.$el.textContent</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; &#123;</div><div class=\"line\">  it(<span class=\"string\">'render correctly with different props'</span>, () =&gt; &#123;</div><div class=\"line\">    expect(getRenderedText(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">    &#125;)).toBe(<span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">    expect(getRenderedText(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"string\">'Bye'</span></div><div class=\"line\">    &#125;)).toBe(<span class=\"string\">'Bye'</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Asserting-Asynchronous-Updates\"><a href=\"#Asserting-Asynchronous-Updates\" class=\"headerlink\" title=\"Asserting Asynchronous Updates\"></a>Asserting Asynchronous Updates</h2><p>Since Vue <a href=\"reactivity.html#Async-Update-Queue\">performs DOM updates asynchronously</a>, assertions on DOM updates resulting from state change will have to be made in a <code>Vue.nextTick</code> callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Inspect the generated HTML after a state update</span></div><div class=\"line\">it(<span class=\"string\">'updates the rendered message when vm.message updates'</span>, done =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</div><div class=\"line\">  vm.message = <span class=\"string\">'foo'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// wait a \"tick\" after state change before asserting DOM updates</span></div><div class=\"line\">  Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'foo'</span>)</div><div class=\"line\">    done()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>We are planning to work on a collection of common test helpers that makes it even simpler to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.</p>\n"}],"Post":[{"title":"0.11 Component Tips","date":"2014-12-08T20:02:14.000Z","_content":"\n<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the [0.12 release notes](https://github.com/yyx990803/vue/releases) for the changes in the API.</p>\n\nThe release of 0.11 introduced [many changes](https://github.com/yyx990803/vue/blob/master/changes.md), but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.\n\n<!-- more -->\n\n### Isolated Scope and Data Passing\n\nStarting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via [Explicit Data Passing](/guide/components.html#Explicit_Data_Passing) using [`v-with`](/api/directives.html#v-with) or [`paramAttributes`](/api/options.html#paramAttributes).\n\n`paramAttributes` enables us to write Web Component style templates:\n\n``` js\nVue.component('my-component', {\n  paramAttributes: ['params'],\n  compiled: function () {\n    console.log(this.params) // passed from parent\n  }\n})\n```\n\n``` html\n<my-component params=\"{{params}}\"></my-component>\n```\n\n### Where Does It Belong?\n\nPreviously in 0.10, all directives on a component's container element are compiled in the child component's scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:\n\n``` html\n<!-- parent template -->\n<div v-component=\"child\" v-on=\"click:onParentClick\">\n  <p>{{parentMessage}}</p>\n</div>\n```\n\n``` html\n<!-- child template, with replace: true -->\n<div v-on=\"click:onChildClick\">\n  <h1>{{childMessage}}</h1>\n  <content></content>\n</div>\n```\n\nEverything in the parent template will be compiled in the parent's scope, including the content that's going to be inserted into the child component.\n\nThe only exception to the rule is `v-with` (and `paramAttributes` which compiles down to `v-with`), which works in both places - so you don't need to worry about it too much.\n\n### Cleaner Event Communication\n\nPreviously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It's also possible to trigger undesired listners further up the chain if we do not cancel the event.\n\nThe most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, [a new directive `v-events`](/api/directives.html#v-events) has been introduced to enable exactly this behavior.\n\n0.11.4 has already been released, go try it out!\n","source":"_posts/011-component.md","raw":"---\ntitle: 0.11 Component Tips\ndate: 2014-12-08 15:02:14\ntags:\n---\n\n<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the [0.12 release notes](https://github.com/yyx990803/vue/releases) for the changes in the API.</p>\n\nThe release of 0.11 introduced [many changes](https://github.com/yyx990803/vue/blob/master/changes.md), but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.\n\n<!-- more -->\n\n### Isolated Scope and Data Passing\n\nStarting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via [Explicit Data Passing](/guide/components.html#Explicit_Data_Passing) using [`v-with`](/api/directives.html#v-with) or [`paramAttributes`](/api/options.html#paramAttributes).\n\n`paramAttributes` enables us to write Web Component style templates:\n\n``` js\nVue.component('my-component', {\n  paramAttributes: ['params'],\n  compiled: function () {\n    console.log(this.params) // passed from parent\n  }\n})\n```\n\n``` html\n<my-component params=\"{{params}}\"></my-component>\n```\n\n### Where Does It Belong?\n\nPreviously in 0.10, all directives on a component's container element are compiled in the child component's scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:\n\n``` html\n<!-- parent template -->\n<div v-component=\"child\" v-on=\"click:onParentClick\">\n  <p>{{parentMessage}}</p>\n</div>\n```\n\n``` html\n<!-- child template, with replace: true -->\n<div v-on=\"click:onChildClick\">\n  <h1>{{childMessage}}</h1>\n  <content></content>\n</div>\n```\n\nEverything in the parent template will be compiled in the parent's scope, including the content that's going to be inserted into the child component.\n\nThe only exception to the rule is `v-with` (and `paramAttributes` which compiles down to `v-with`), which works in both places - so you don't need to worry about it too much.\n\n### Cleaner Event Communication\n\nPreviously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It's also possible to trigger undesired listners further up the chain if we do not cancel the event.\n\nThe most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, [a new directive `v-events`](/api/directives.html#v-events) has been introduced to enable exactly this behavior.\n\n0.11.4 has already been released, go try it out!\n","slug":"011-component","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjn7000191m12bicmc0a","content":"<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the <a href=\"https://github.com/yyx990803/vue/releases\" target=\"_blank\" rel=\"external\">0.12 release notes</a> for the changes in the API.</p>\n\n<p>The release of 0.11 introduced <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"external\">many changes</a>, but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.</p>\n<a id=\"more\"></a>\n<h3 id=\"Isolated-Scope-and-Data-Passing\"><a href=\"#Isolated-Scope-and-Data-Passing\" class=\"headerlink\" title=\"Isolated Scope and Data Passing\"></a>Isolated Scope and Data Passing</h3><p>Starting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via <a href=\"/guide/components.html#Explicit_Data_Passing\">Explicit Data Passing</a> using <a href=\"/api/directives.html#v-with\"><code>v-with</code></a> or <a href=\"/api/options.html#paramAttributes\"><code>paramAttributes</code></a>.</p>\n<p><code>paramAttributes</code> enables us to write Web Component style templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">paramAttributes</span>: [<span class=\"string\">'params'</span>],</div><div class=\"line\">  <span class=\"attr\">compiled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.params) <span class=\"comment\">// passed from parent</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">params</span>=<span class=\"string\">\"&#123;&#123;params&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Where-Does-It-Belong\"><a href=\"#Where-Does-It-Belong\" class=\"headerlink\" title=\"Where Does It Belong?\"></a>Where Does It Belong?</h3><p>Previously in 0.10, all directives on a component’s container element are compiled in the child component’s scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- parent template --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-component</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onParentClick\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;parentMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- child template, with replace: true --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onChildClick\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Everything in the parent template will be compiled in the parent’s scope, including the content that’s going to be inserted into the child component.</p>\n<p>The only exception to the rule is <code>v-with</code> (and <code>paramAttributes</code> which compiles down to <code>v-with</code>), which works in both places - so you don’t need to worry about it too much.</p>\n<h3 id=\"Cleaner-Event-Communication\"><a href=\"#Cleaner-Event-Communication\" class=\"headerlink\" title=\"Cleaner Event Communication\"></a>Cleaner Event Communication</h3><p>Previously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It’s also possible to trigger undesired listners further up the chain if we do not cancel the event.</p>\n<p>The most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, <a href=\"/api/directives.html#v-events\">a new directive <code>v-events</code></a> has been introduced to enable exactly this behavior.</p>\n<p>0.11.4 has already been released, go try it out!</p>\n","excerpt":"<p class=\"tip\">Note: this post contains information for the outdated 0.11 version. Please refer to the <a href=\"https://github.com/yyx990803/vue/releases\">0.12 release notes</a> for the changes in the API.</p>\n\n<p>The release of 0.11 introduced <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\">many changes</a>, but the most important one is how the new component scope works. Previously in 0.10.x, components have inherited scope by default. That means in a child component template you can reference parent scope properties. This often leads to tightly-coupled components, where a child component assumes knowledge of what properties are present in the parent scope. It is also possible to accidentally refer to a parent scope property in a child component.</p>","more":"<h3 id=\"Isolated-Scope-and-Data-Passing\"><a href=\"#Isolated-Scope-and-Data-Passing\" class=\"headerlink\" title=\"Isolated Scope and Data Passing\"></a>Isolated Scope and Data Passing</h3><p>Starting in 0.11, all child components have isolated scope by default, and the recommended way to control component data access is via <a href=\"/guide/components.html#Explicit_Data_Passing\">Explicit Data Passing</a> using <a href=\"/api/directives.html#v-with\"><code>v-with</code></a> or <a href=\"/api/options.html#paramAttributes\"><code>paramAttributes</code></a>.</p>\n<p><code>paramAttributes</code> enables us to write Web Component style templates:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">paramAttributes</span>: [<span class=\"string\">'params'</span>],</div><div class=\"line\">  <span class=\"attr\">compiled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.params) <span class=\"comment\">// passed from parent</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">params</span>=<span class=\"string\">\"&#123;&#123;params&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Where-Does-It-Belong\"><a href=\"#Where-Does-It-Belong\" class=\"headerlink\" title=\"Where Does It Belong?\"></a>Where Does It Belong?</h3><p>Previously in 0.10, all directives on a component’s container element are compiled in the child component’s scope. Because it inherited parent scope, this worked in most situations. Starting in 0.11.1, we want to provide a cleaner separation between component scopes. The rule of thumbs is: if something appears in the parent template, it will be compiled in parent scope; if it appears in child template, it will be compiled in child scope. For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- parent template --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-component</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onParentClick\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;parentMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- child template, with replace: true --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"click:onChildClick\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Everything in the parent template will be compiled in the parent’s scope, including the content that’s going to be inserted into the child component.</p>\n<p>The only exception to the rule is <code>v-with</code> (and <code>paramAttributes</code> which compiles down to <code>v-with</code>), which works in both places - so you don’t need to worry about it too much.</p>\n<h3 id=\"Cleaner-Event-Communication\"><a href=\"#Cleaner-Event-Communication\" class=\"headerlink\" title=\"Cleaner Event Communication\"></a>Cleaner Event Communication</h3><p>Previously the standard way for a child component to communicate to its parent is via dispatching events. However, with this approach, the event listeners on the parent component are not guaranteed to be listening on the desired child component only. It’s also possible to trigger undesired listners further up the chain if we do not cancel the event.</p>\n<p>The most common use case is for a parent to react to the events from a specific, direct child component. So in 0.11.4, <a href=\"/api/directives.html#v-events\">a new directive <code>v-events</code></a> has been introduced to enable exactly this behavior.</p>\n<p>0.11.4 has already been released, go try it out!</p>"},{"title":"Announcing Vue.js 2.0","date":"2016-04-27T17:33:00.000Z","_content":"\nToday I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let's take a peek at what's in store!\n\n<!-- more -->\n\n## Even Leaner, Even Faster\n\nVue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on [Snabbdom](https://github.com/paldepind/snabbdom)) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out [these benchmarks](https://github.com/vuejs/vue/tree/next/benchmarks)). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12kb min+gzip (as a reference, React 15 is 44kb min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17kb min+gzip, still lighter than the current 1.0 build.\n\n## Not Your Average Virtual-DOM\n\nNow, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue's reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for `shouldComponentUpdate` or immutable data structures - **it just works**.\n\nIn addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:\n\n1. It detects static class names and attributes so that they are never diffed after the initial render.\n\n2. It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.\n\nThese advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.\n\nThe new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.\n\nWith these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.\n\n## Templates, JSX, or Hyperscript?\n\nDevelopers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.\n\nBeing a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.\n\nWell, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the `template` option, just replace it with a `render` function. You can even embed render functions in your templates using the special `<render>` tag! The best of both worlds, in the same framework.\n\n## Streaming Server-side Rendering\n\nWith the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React's, is that the rendering is synchronous so it can block the server's event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.\n\n## Unlocking More Possibilities\n\nWith the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses [weex](http://alibaba.github.io/weex/) as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0's virtual-DOM to run inside ReactNative. We are excited to see how it goes!\n\n## Compatibility and What to Expect Next\n\nVue.js 2.0 is still in pre-alpha, but you can checkout the source code [here](https://github.com/vuejs/vue/tree/next/). Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out [the same official examples written in 2.0](https://github.com/vuejs/vue/tree/next/examples) - you will see that not much has changed!\n\nThe feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison [here](https://github.com/vuejs/vue/wiki/2.0-features). This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.\n\nThere is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify...). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.\n\nWe are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!\n","source":"_posts/announcing-2.0.md","raw":"---\ntitle: Announcing Vue.js 2.0\ndate: 2016-04-27 13:33:00\n---\n\nToday I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let's take a peek at what's in store!\n\n<!-- more -->\n\n## Even Leaner, Even Faster\n\nVue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on [Snabbdom](https://github.com/paldepind/snabbdom)) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out [these benchmarks](https://github.com/vuejs/vue/tree/next/benchmarks)). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12kb min+gzip (as a reference, React 15 is 44kb min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17kb min+gzip, still lighter than the current 1.0 build.\n\n## Not Your Average Virtual-DOM\n\nNow, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue's reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for `shouldComponentUpdate` or immutable data structures - **it just works**.\n\nIn addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:\n\n1. It detects static class names and attributes so that they are never diffed after the initial render.\n\n2. It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.\n\nThese advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.\n\nThe new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.\n\nWith these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.\n\n## Templates, JSX, or Hyperscript?\n\nDevelopers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.\n\nBeing a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.\n\nWell, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the `template` option, just replace it with a `render` function. You can even embed render functions in your templates using the special `<render>` tag! The best of both worlds, in the same framework.\n\n## Streaming Server-side Rendering\n\nWith the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React's, is that the rendering is synchronous so it can block the server's event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.\n\n## Unlocking More Possibilities\n\nWith the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses [weex](http://alibaba.github.io/weex/) as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0's virtual-DOM to run inside ReactNative. We are excited to see how it goes!\n\n## Compatibility and What to Expect Next\n\nVue.js 2.0 is still in pre-alpha, but you can checkout the source code [here](https://github.com/vuejs/vue/tree/next/). Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out [the same official examples written in 2.0](https://github.com/vuejs/vue/tree/next/examples) - you will see that not much has changed!\n\nThe feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison [here](https://github.com/vuejs/vue/wiki/2.0-features). This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.\n\nThere is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify...). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.\n\nWe are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!\n","slug":"announcing-2.0","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnc000391m1edrr7l2n","content":"<p>Today I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let’s take a peek at what’s in store!</p>\n<a id=\"more\"></a>\n<h2 id=\"Even-Leaner-Even-Faster\"><a href=\"#Even-Leaner-Even-Faster\" class=\"headerlink\" title=\"Even Leaner, Even Faster\"></a>Even Leaner, Even Faster</h2><p>Vue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on <a href=\"https://github.com/paldepind/snabbdom\" target=\"_blank\" rel=\"external\">Snabbdom</a>) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out <a href=\"https://github.com/vuejs/vue/tree/next/benchmarks\" target=\"_blank\" rel=\"external\">these benchmarks</a>). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12kb min+gzip (as a reference, React 15 is 44kb min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17kb min+gzip, still lighter than the current 1.0 build.</p>\n<h2 id=\"Not-Your-Average-Virtual-DOM\"><a href=\"#Not-Your-Average-Virtual-DOM\" class=\"headerlink\" title=\"Not Your Average Virtual-DOM\"></a>Not Your Average Virtual-DOM</h2><p>Now, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue’s reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for <code>shouldComponentUpdate</code> or immutable data structures - <strong>it just works</strong>.</p>\n<p>In addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:</p>\n<ol>\n<li><p>It detects static class names and attributes so that they are never diffed after the initial render.</p>\n</li>\n<li><p>It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.</p>\n</li>\n</ol>\n<p>These advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.</p>\n<p>The new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.</p>\n<p>With these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.</p>\n<h2 id=\"Templates-JSX-or-Hyperscript\"><a href=\"#Templates-JSX-or-Hyperscript\" class=\"headerlink\" title=\"Templates, JSX, or Hyperscript?\"></a>Templates, JSX, or Hyperscript?</h2><p>Developers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.</p>\n<p>Being a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.</p>\n<p>Well, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the <code>template</code> option, just replace it with a <code>render</code> function. You can even embed render functions in your templates using the special <code>&lt;render&gt;</code> tag! The best of both worlds, in the same framework.</p>\n<h2 id=\"Streaming-Server-side-Rendering\"><a href=\"#Streaming-Server-side-Rendering\" class=\"headerlink\" title=\"Streaming Server-side Rendering\"></a>Streaming Server-side Rendering</h2><p>With the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React’s, is that the rendering is synchronous so it can block the server’s event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.</p>\n<h2 id=\"Unlocking-More-Possibilities\"><a href=\"#Unlocking-More-Possibilities\" class=\"headerlink\" title=\"Unlocking More Possibilities\"></a>Unlocking More Possibilities</h2><p>With the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses <a href=\"http://alibaba.github.io/weex/\" target=\"_blank\" rel=\"external\">weex</a> as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0’s virtual-DOM to run inside ReactNative. We are excited to see how it goes!</p>\n<h2 id=\"Compatibility-and-What-to-Expect-Next\"><a href=\"#Compatibility-and-What-to-Expect-Next\" class=\"headerlink\" title=\"Compatibility and What to Expect Next\"></a>Compatibility and What to Expect Next</h2><p>Vue.js 2.0 is still in pre-alpha, but you can checkout the source code <a href=\"https://github.com/vuejs/vue/tree/next/\" target=\"_blank\" rel=\"external\">here</a>. Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out <a href=\"https://github.com/vuejs/vue/tree/next/examples\" target=\"_blank\" rel=\"external\">the same official examples written in 2.0</a> - you will see that not much has changed!</p>\n<p>The feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison <a href=\"https://github.com/vuejs/vue/wiki/2.0-features\" target=\"_blank\" rel=\"external\">here</a>. This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.</p>\n<p>There is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify…). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.</p>\n<p>We are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!</p>\n","excerpt":"<p>Today I am thrilled to announce the first public preview of Vue.js 2.0, which brings along many exciting improvements and new features. Let’s take a peek at what’s in store!</p>","more":"<h2 id=\"Even-Leaner-Even-Faster\"><a href=\"#Even-Leaner-Even-Faster\" class=\"headerlink\" title=\"Even Leaner, Even Faster\"></a>Even Leaner, Even Faster</h2><p>Vue.js has always focused on staying light and fast, but 2.0 pushes it even further. The rendering layer is now based on a lightweight virtual-DOM implementation (based on <a href=\"https://github.com/paldepind/snabbdom\">Snabbdom</a>) that improves initial rendering speed and memory consumption by up to 2~4x in most scenarios (check out <a href=\"https://github.com/vuejs/vue/tree/next/benchmarks\">these benchmarks</a>). The template-to-virtual-DOM compiler and the runtime can be separated, so you can pre-compile templates and ship your app with only the runtime, which is less than 12kb min+gzip (as a reference, React 15 is 44kb min+gzip). The compiler also works in the browser, which means you can still drop in one script tag and start hacking, just like before. Even with the compiler included, the build is sitting at 17kb min+gzip, still lighter than the current 1.0 build.</p>\n<h2 id=\"Not-Your-Average-Virtual-DOM\"><a href=\"#Not-Your-Average-Virtual-DOM\" class=\"headerlink\" title=\"Not Your Average Virtual-DOM\"></a>Not Your Average Virtual-DOM</h2><p>Now, just virtual-DOM sounds boring because there are so many implementations out there - but this one is different. Combined with Vue’s reactivity system, it provides optimized re-rendering out of the box without you having to do anything. Each component keeps track of its reactive dependencies during its render, so the system knows precisely when to re-render, and which components to re-render. No need for <code>shouldComponentUpdate</code> or immutable data structures - <strong>it just works</strong>.</p>\n<p>In addition, Vue 2.0 applies some advanced optimizations during the template-to-virtual-DOM compilation phase:</p>\n<ol>\n<li><p>It detects static class names and attributes so that they are never diffed after the initial render.</p>\n</li>\n<li><p>It detects the maximum static sub trees (sub trees with no dynamic bindings) and hoist them out of the render function. So on each re-render, it directly reuses the exact same virtual nodes and skips the diffing.</p>\n</li>\n</ol>\n<p>These advanced optimizations can usually only be achieved via Babel plugins when using JSX, but with Vue 2.0 you can get them even using the in-browser compiler.</p>\n<p>The new rendering system also allows you to disable reactive conversions by simply freezing your data and manually force updates, essentially giving you full control over the re-rendering process.</p>\n<p>With these techniques combined, Vue 2.0 ensures blazing fast performance in every possible scenario while requiring minimal optimization efforts from the developer.</p>\n<h2 id=\"Templates-JSX-or-Hyperscript\"><a href=\"#Templates-JSX-or-Hyperscript\" class=\"headerlink\" title=\"Templates, JSX, or Hyperscript?\"></a>Templates, JSX, or Hyperscript?</h2><p>Developers tend to have strong opinions on templates vs. JSX. On the one hand, templates are closer to HTML - they map better to the semantic structure of your app and make it much easier to think visually about the design, layout and styling. On the other hand, templates are limited to the DSL while the programmatic nature of JSX/hyperscript provides the full expressive power of a turing-complete language.</p>\n<p>Being a designer/developer hybrid, I prefer writing most of my interfaces in templates, but in certain cases I do miss the flexibility of JSX/hyperscript. An example would be writing a component that programmatically handles its children, something not feasible with just the template-based slot mechanism.</p>\n<p>Well, why not have both? In Vue 2.0, you can keep using the familiar template syntax, or drop down to the virtual-DOM layer whenever you feel constrained by the template DSL. Instead of the <code>template</code> option, just replace it with a <code>render</code> function. You can even embed render functions in your templates using the special <code>&lt;render&gt;</code> tag! The best of both worlds, in the same framework.</p>\n<h2 id=\"Streaming-Server-side-Rendering\"><a href=\"#Streaming-Server-side-Rendering\" class=\"headerlink\" title=\"Streaming Server-side Rendering\"></a>Streaming Server-side Rendering</h2><p>With the migration to virtual-DOM, Vue 2.0 naturally supports server-side rendering with client-side hydration. One pain point of current mainstream server rendering implementations, such as React’s, is that the rendering is synchronous so it can block the server’s event loop if the app is complex. Synchronous server-side rendering may even adversely affect time-to-content on the client. Vue 2.0 provides built-in streaming server-side rendering, so that you can render your component, get a readable stream back and directly pipe it to the HTTP response. This ensures your server is responsive, and gets the rendered content to your users faster.</p>\n<h2 id=\"Unlocking-More-Possibilities\"><a href=\"#Unlocking-More-Possibilities\" class=\"headerlink\" title=\"Unlocking More Possibilities\"></a>Unlocking More Possibilities</h2><p>With the new architecture, there are even more possibilities to explore - for example, rendering to native interfaces on mobile. Currently, we are exploring a port of Vue.js 2.0 that uses <a href=\"http://alibaba.github.io/weex/\">weex</a> as a native rendering backend, a project maintained by engineers at Alibaba Group, the biggest tech enterprise of China. It is also technically feasible to adapt Vue 2.0’s virtual-DOM to run inside ReactNative. We are excited to see how it goes!</p>\n<h2 id=\"Compatibility-and-What-to-Expect-Next\"><a href=\"#Compatibility-and-What-to-Expect-Next\" class=\"headerlink\" title=\"Compatibility and What to Expect Next\"></a>Compatibility and What to Expect Next</h2><p>Vue.js 2.0 is still in pre-alpha, but you can checkout the source code <a href=\"https://github.com/vuejs/vue/tree/next/\">here</a>. Despite being a full rewrite, the API is largely compatible with 1.0 with the exception of some intentional deprecations. Check out <a href=\"https://github.com/vuejs/vue/tree/next/examples\">the same official examples written in 2.0</a> - you will see that not much has changed!</p>\n<p>The feature deprecations are part of our continued effort to provide the simplest API possible for maximum developer productivity. You can check out a 1.0 vs. 2.0 feature comparison <a href=\"https://github.com/vuejs/vue/wiki/2.0-features\">here</a>. This does mean that it will take some effort to migrate an existing app if you happen to use some of these deprecated features heavily, but we will provide detailed upgrade guides in the future.</p>\n<p>There is still much work left to be done. We will be releasing the first alpha once we reach satisfactory test coverage, and we are aiming for beta by end of May / early June. In addition to more tests, we also need to update the supporting libraries (vue-router, Vuex, vue-loader, vueify…). Currently only Vuex works with 2.0 out of the box, but we will make sure that everything works smoothly together when 2.0 ships.</p>\n<p>We are also not forgetting about 1.x! 1.1 will be released alongside 2.0 beta, with an LTS period of 6-month critical bug fixes and 9-month security updates. It will also ship with optional deprecation warnings to get you prepared for upgrading to 2.0. Stay tuned!</p>"},{"title":"Vue.js 1.0.0 Released","date":"2015-10-26T14:00:00.000Z","_content":"\n> Hi HN! If you are not familiar with Vue.js, you might want to read this [blog post](http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/) for a higher level overview.\n\nAfter 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of [Vue.js 1.0.0 Evangelion](https://github.com/vuejs/vue/releases/tag/1.0.0)! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.\n\n<!-- more -->\n\n### Improved Template Syntax\n\nThe 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for `v-on` and `v-bind`:\n\n``` html\n<!-- short for v-bind:href -->\n<a :href=\"someURL\"></a>\n\n<!-- short for v-on:click -->\n<button @click=\"onClick\"></button>\n```\n\nWhen used on a child component, `v-on` listens for custom events and `v-bind` can be used to bind props. The shorthands using child components very succinct:\n\n``` html\n<item-list\n  :items=\"items\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n```\n\n### API Cleanup\n\nThe overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.\n\nFor example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The `inherit` option is also removed, because it too often leads to tightly coupled components that are hard to refactor.\n\n### Faster Initial Rendering\n\n1.0 replaces the old `v-repeat` directive with `v-for`. In addition to providing the same functionality and more intuitive scoping, `v-for` provides up to **100%** initial render performance boost when rendering large lists and tables!\n\n### More Powerful Tooling\n\nThere are also exciting things going on outside of Vue.js core - [vue-loader](https://github.com/vuejs/vue-loader) and [vueify](https://github.com/vuejs/vueify) have received major upgrades including:\n\n- Hot component reloading. When a `*.vue` component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn't need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.\n\n- Scoped CSS. By simply adding a `scoped` attribute to your `*.vue` component style tags, the component's template and final generated CSS are magically re-written to ensure a component's styles are only applied to its own elements. Most importantly, the styles specified in a parent component **does not** leak down to child components nested within it.\n\n- ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. `vue-loader` and `vueify` now transpiles the JavaScript in your `*.vue` components out of the box, without the need for extra setup. Write future JavaScript today!\n\nCombined with [vue-router](https://github.com/vuejs/vue-router), Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.\n\n### What's Next?\n\nAs what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:\n\n1. Improving `vue-router` and make it production ready.\n\n2. Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.\n\n3. Providing more learning resources such as tutorials and examples.\n","source":"_posts/1.0.0-release.md","raw":"---\ntitle: Vue.js 1.0.0 Released\ndate: 2015-10-26 10:00:00\n---\n\n> Hi HN! If you are not familiar with Vue.js, you might want to read this [blog post](http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/) for a higher level overview.\n\nAfter 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of [Vue.js 1.0.0 Evangelion](https://github.com/vuejs/vue/releases/tag/1.0.0)! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.\n\n<!-- more -->\n\n### Improved Template Syntax\n\nThe 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for `v-on` and `v-bind`:\n\n``` html\n<!-- short for v-bind:href -->\n<a :href=\"someURL\"></a>\n\n<!-- short for v-on:click -->\n<button @click=\"onClick\"></button>\n```\n\nWhen used on a child component, `v-on` listens for custom events and `v-bind` can be used to bind props. The shorthands using child components very succinct:\n\n``` html\n<item-list\n  :items=\"items\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n```\n\n### API Cleanup\n\nThe overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.\n\nFor example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The `inherit` option is also removed, because it too often leads to tightly coupled components that are hard to refactor.\n\n### Faster Initial Rendering\n\n1.0 replaces the old `v-repeat` directive with `v-for`. In addition to providing the same functionality and more intuitive scoping, `v-for` provides up to **100%** initial render performance boost when rendering large lists and tables!\n\n### More Powerful Tooling\n\nThere are also exciting things going on outside of Vue.js core - [vue-loader](https://github.com/vuejs/vue-loader) and [vueify](https://github.com/vuejs/vueify) have received major upgrades including:\n\n- Hot component reloading. When a `*.vue` component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn't need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.\n\n- Scoped CSS. By simply adding a `scoped` attribute to your `*.vue` component style tags, the component's template and final generated CSS are magically re-written to ensure a component's styles are only applied to its own elements. Most importantly, the styles specified in a parent component **does not** leak down to child components nested within it.\n\n- ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. `vue-loader` and `vueify` now transpiles the JavaScript in your `*.vue` components out of the box, without the need for extra setup. Write future JavaScript today!\n\nCombined with [vue-router](https://github.com/vuejs/vue-router), Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.\n\n### What's Next?\n\nAs what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:\n\n1. Improving `vue-router` and make it production ready.\n\n2. Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.\n\n3. Providing more learning resources such as tutorials and examples.\n","slug":"1.0.0-release","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjne000591m1vck0hguw","content":"<blockquote>\n<p>Hi HN! If you are not familiar with Vue.js, you might want to read this <a href=\"http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/\" target=\"_blank\" rel=\"external\">blog post</a> for a higher level overview.</p>\n</blockquote>\n<p>After 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of <a href=\"https://github.com/vuejs/vue/releases/tag/1.0.0\" target=\"_blank\" rel=\"external\">Vue.js 1.0.0 Evangelion</a>! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.</p>\n<a id=\"more\"></a>\n<h3 id=\"Improved-Template-Syntax\"><a href=\"#Improved-Template-Syntax\" class=\"headerlink\" title=\"Improved Template Syntax\"></a>Improved Template Syntax</h3><p>The 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for <code>v-on</code> and <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- short for v-bind:href --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"someURL\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- short for v-on:click --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on a child component, <code>v-on</code> listens for custom events and <code>v-bind</code> can be used to bind props. The shorthands using child components very succinct:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></span></div><div class=\"line\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></div><div class=\"line\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></div><div class=\"line\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"API-Cleanup\"><a href=\"#API-Cleanup\" class=\"headerlink\" title=\"API Cleanup\"></a>API Cleanup</h3><p>The overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.</p>\n<p>For example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The <code>inherit</code> option is also removed, because it too often leads to tightly coupled components that are hard to refactor.</p>\n<h3 id=\"Faster-Initial-Rendering\"><a href=\"#Faster-Initial-Rendering\" class=\"headerlink\" title=\"Faster Initial Rendering\"></a>Faster Initial Rendering</h3><p>1.0 replaces the old <code>v-repeat</code> directive with <code>v-for</code>. In addition to providing the same functionality and more intuitive scoping, <code>v-for</code> provides up to <strong>100%</strong> initial render performance boost when rendering large lists and tables!</p>\n<h3 id=\"More-Powerful-Tooling\"><a href=\"#More-Powerful-Tooling\" class=\"headerlink\" title=\"More Powerful Tooling\"></a>More Powerful Tooling</h3><p>There are also exciting things going on outside of Vue.js core - <a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"external\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify\" target=\"_blank\" rel=\"external\">vueify</a> have received major upgrades including:</p>\n<ul>\n<li><p>Hot component reloading. When a <code>*.vue</code> component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn’t need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.</p>\n</li>\n<li><p>Scoped CSS. By simply adding a <code>scoped</code> attribute to your <code>*.vue</code> component style tags, the component’s template and final generated CSS are magically re-written to ensure a component’s styles are only applied to its own elements. Most importantly, the styles specified in a parent component <strong>does not</strong> leak down to child components nested within it.</p>\n</li>\n<li><p>ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. <code>vue-loader</code> and <code>vueify</code> now transpiles the JavaScript in your <code>*.vue</code> components out of the box, without the need for extra setup. Write future JavaScript today!</p>\n</li>\n</ul>\n<p>Combined with <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router</a>, Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.</p>\n<h3 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next?\"></a>What’s Next?</h3><p>As what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:</p>\n<ol>\n<li><p>Improving <code>vue-router</code> and make it production ready.</p>\n</li>\n<li><p>Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.</p>\n</li>\n<li><p>Providing more learning resources such as tutorials and examples.</p>\n</li>\n</ol>\n","excerpt":"<blockquote>\n<p>Hi HN! If you are not familiar with Vue.js, you might want to read this <a href=\"http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/\">blog post</a> for a higher level overview.</p>\n</blockquote>\n<p>After 300+ commits, 8 alphas, 4 betas and 2 release candidates, today I am very proud to announce the release of <a href=\"https://github.com/vuejs/vue/releases/tag/1.0.0\">Vue.js 1.0.0 Evangelion</a>! Many thanks to all those who participated in the API re-design process - it would not have been possible without all the input from the community.</p>","more":"<h3 id=\"Improved-Template-Syntax\"><a href=\"#Improved-Template-Syntax\" class=\"headerlink\" title=\"Improved Template Syntax\"></a>Improved Template Syntax</h3><p>The 1.0 template syntax resolves a lot of subtle consistency issues and makes Vue templates more concise and more readable in general. The most notable new feature is the shorthand syntax for <code>v-on</code> and <code>v-bind</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- short for v-bind:href --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"someURL\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- short for v-on:click --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on a child component, <code>v-on</code> listens for custom events and <code>v-bind</code> can be used to bind props. The shorthands using child components very succinct:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></div><div class=\"line\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></div><div class=\"line\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></div><div class=\"line\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"API-Cleanup\"><a href=\"#API-Cleanup\" class=\"headerlink\" title=\"API Cleanup\"></a>API Cleanup</h3><p>The overall goal for Vue.js 1.0 is to make it suitable for larger projects. This is why there are many API deprecations. Except for ones that are barely used, the most common reason for a deprecation is that the feature leads to patterns that damages maintainability. Specifically, we are deprecating features that make it hard to maintain and refactor a component in isolation without affecting the rest of the project.</p>\n<p>For example, the default asset resolution in 0.12 has implicit fallbacks to parents in the component tree. This makes the assets available to a component non-deterministic and subject how it is used at runtime. In 1.0, all assets are now resolved in strict mode and there are no longer implicit fallbacks to parent. The <code>inherit</code> option is also removed, because it too often leads to tightly coupled components that are hard to refactor.</p>\n<h3 id=\"Faster-Initial-Rendering\"><a href=\"#Faster-Initial-Rendering\" class=\"headerlink\" title=\"Faster Initial Rendering\"></a>Faster Initial Rendering</h3><p>1.0 replaces the old <code>v-repeat</code> directive with <code>v-for</code>. In addition to providing the same functionality and more intuitive scoping, <code>v-for</code> provides up to <strong>100%</strong> initial render performance boost when rendering large lists and tables!</p>\n<h3 id=\"More-Powerful-Tooling\"><a href=\"#More-Powerful-Tooling\" class=\"headerlink\" title=\"More Powerful Tooling\"></a>More Powerful Tooling</h3><p>There are also exciting things going on outside of Vue.js core - <a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a> and <a href=\"https://github.com/vuejs/vueify\">vueify</a> have received major upgrades including:</p>\n<ul>\n<li><p>Hot component reloading. When a <code>*.vue</code> component is edited, all of its active instances are hot swapped without reloading the page. This means when making small changes, e.g. tweaking the styles or the template, your app doesn’t need to fully reload; the state of the app the swapped component can be preserved, drastically improving the development experience.</p>\n</li>\n<li><p>Scoped CSS. By simply adding a <code>scoped</code> attribute to your <code>*.vue</code> component style tags, the component’s template and final generated CSS are magically re-written to ensure a component’s styles are only applied to its own elements. Most importantly, the styles specified in a parent component <strong>does not</strong> leak down to child components nested within it.</p>\n</li>\n<li><p>ES2015 by default. JavaScript is evolving. You can write much cleaner and expressive code using the latest syntax. <code>vue-loader</code> and <code>vueify</code> now transpiles the JavaScript in your <code>*.vue</code> components out of the box, without the need for extra setup. Write future JavaScript today!</p>\n</li>\n</ul>\n<p>Combined with <a href=\"https://github.com/vuejs/vue-router\">vue-router</a>, Vue.js is now more than a library - it provides a solid foundation for building complex SPAs.</p>\n<h3 id=\"What’s-Next\"><a href=\"#What’s-Next\" class=\"headerlink\" title=\"What’s Next?\"></a>What’s Next?</h3><p>As what 1.0.0 usually suggests, the core API will stay stable for the foreseeable future and the library is ready for production use. Future development will focus on:</p>\n<ol>\n<li><p>Improving <code>vue-router</code> and make it production ready.</p>\n</li>\n<li><p>Streamlining the developer experience, e.g. a better devtool and a CLI for scaffolding Vue.js projects and components.</p>\n</li>\n<li><p>Providing more learning resources such as tutorials and examples.</p>\n</li>\n</ol>"},{"title":"Vue.js 0.12 released!","date":"2015-06-11T21:37:30.000Z","_content":"\nI'm really excited to announce that [Vue.js 0.12: Dragon Ball](https://github.com/yyx990803/vue/releases/tag/0.12.0) is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.\n\nThere's a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the [Full Release Note](https://github.com/yyx990803/vue/releases/tag/0.12.0) and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to [vuejs/Discussion](https://github.com/vuejs/Discussion/issues), or join us in the [Gitter chat channel](https://gitter.im/yyx990803/vue).\n\n<!-- more -->\n\n### More Consistent Component Syntax\n\nPreviously in 0.11 you have two ways to use a Vue.js component: using the `v-component` directive, or using custom elements. There are also two ways to pass data down to child components: using the `v-with` directive, or using the `paramAttributes` option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.\n\nIn addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.\n\nAs a result, `v-component` and `v-with` have been deprecated in 0.12. `paramAttributes` has also been renamed to `props`, which is shorter and cleaner. From now on, most Vue.js components will look like this:\n\n``` html\n<my-component prop=\"{{parentData}}\"></my-component>\n```\n\nThere are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated [Component System](/guide/components.html) section of the guide.\n\n### Filter Arguments Improvements\n\nIn 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrive a dynamic value on the vm instead of a plain string.\n\nIn 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.\n\nThis means the usage of some existing filters will have to change:\n\n``` html\n<a v-on=\"keyup: onKeyUp | key 'enter'\"></a>\n{{ items.length | pluralize 'item' }}\n```\n\nBut it would make custom filters that rely on dynamic values much easier to write:\n\n``` html\n{{ msg | concat otherMsg }}\n```\n\nHere the first argument to the `concat` filter will be the value of `this.otherMsg`.\n\n### Asynchronous Components\n\nIt is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.\n\nWell, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn't it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.\n\nIn 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nIt is up to you to decide how to load the component from the server, e.g. `$.getScript()` or require.js; but the recommended usage is to pair it up with Webpack's [Code Splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve, reject) {\n  // In Webpack AMD like syntax indicates a code split point\n  require(['./my-async-component'], resolve)\n})\n```\n\nThat's all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example [here](https://github.com/vuejs/vue-webpack-example).\n\n### Improved Transition System\n\nVue.js' transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.\n\n`v-repeat` now also ships with built-in support for staggering transitions. It is as simple as adding `stagger=\"100\"` to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.\n\nFor full details on the new transition system, check out the [updated guide](/guide/transitions.html).\n\n### Performance Tuning\n\nVue.js' precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there's always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper `track-by` usage, [re-rendering with large, brand new dataset](http://vuejs.github.io/js-repaint-perfs/vue/) is also comparable to, or even faster than other Virtual-DOM based frameworks.\n\n### One More Thing...\n\nWith 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.\n","source":"_posts/012-release.md","raw":"---\ntitle: Vue.js 0.12 released!\ndate: 2015-06-11 17:37:30\n---\n\nI'm really excited to announce that [Vue.js 0.12: Dragon Ball](https://github.com/yyx990803/vue/releases/tag/0.12.0) is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.\n\nThere's a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the [Full Release Note](https://github.com/yyx990803/vue/releases/tag/0.12.0) and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to [vuejs/Discussion](https://github.com/vuejs/Discussion/issues), or join us in the [Gitter chat channel](https://gitter.im/yyx990803/vue).\n\n<!-- more -->\n\n### More Consistent Component Syntax\n\nPreviously in 0.11 you have two ways to use a Vue.js component: using the `v-component` directive, or using custom elements. There are also two ways to pass data down to child components: using the `v-with` directive, or using the `paramAttributes` option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.\n\nIn addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.\n\nAs a result, `v-component` and `v-with` have been deprecated in 0.12. `paramAttributes` has also been renamed to `props`, which is shorter and cleaner. From now on, most Vue.js components will look like this:\n\n``` html\n<my-component prop=\"{{parentData}}\"></my-component>\n```\n\nThere are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated [Component System](/guide/components.html) section of the guide.\n\n### Filter Arguments Improvements\n\nIn 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrive a dynamic value on the vm instead of a plain string.\n\nIn 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.\n\nThis means the usage of some existing filters will have to change:\n\n``` html\n<a v-on=\"keyup: onKeyUp | key 'enter'\"></a>\n{{ items.length | pluralize 'item' }}\n```\n\nBut it would make custom filters that rely on dynamic values much easier to write:\n\n``` html\n{{ msg | concat otherMsg }}\n```\n\nHere the first argument to the `concat` filter will be the value of `this.otherMsg`.\n\n### Asynchronous Components\n\nIt is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.\n\nWell, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn't it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.\n\nIn 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:\n\n``` js\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n\nIt is up to you to decide how to load the component from the server, e.g. `$.getScript()` or require.js; but the recommended usage is to pair it up with Webpack's [Code Splitting feature](http://webpack.github.io/docs/code-splitting.html):\n\n``` js\nVue.component('async-webpack-example', function (resolve, reject) {\n  // In Webpack AMD like syntax indicates a code split point\n  require(['./my-async-component'], resolve)\n})\n```\n\nThat's all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example [here](https://github.com/vuejs/vue-webpack-example).\n\n### Improved Transition System\n\nVue.js' transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.\n\n`v-repeat` now also ships with built-in support for staggering transitions. It is as simple as adding `stagger=\"100\"` to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.\n\nFor full details on the new transition system, check out the [updated guide](/guide/transitions.html).\n\n### Performance Tuning\n\nVue.js' precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there's always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper `track-by` usage, [re-rendering with large, brand new dataset](http://vuejs.github.io/js-repaint-perfs/vue/) is also comparable to, or even faster than other Virtual-DOM based frameworks.\n\n### One More Thing...\n\nWith 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.\n","slug":"012-release","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnf000691m1xdsuhbeq","content":"<p>I’m really excited to announce that <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"external\">Vue.js 0.12: Dragon Ball</a> is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.</p>\n<p>There’s a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\" target=\"_blank\" rel=\"external\">Full Release Note</a> and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"external\">vuejs/Discussion</a>, or join us in the <a href=\"https://gitter.im/yyx990803/vue\" target=\"_blank\" rel=\"external\">Gitter chat channel</a>.</p>\n<a id=\"more\"></a>\n<h3 id=\"More-Consistent-Component-Syntax\"><a href=\"#More-Consistent-Component-Syntax\" class=\"headerlink\" title=\"More Consistent Component Syntax\"></a>More Consistent Component Syntax</h3><p>Previously in 0.11 you have two ways to use a Vue.js component: using the <code>v-component</code> directive, or using custom elements. There are also two ways to pass data down to child components: using the <code>v-with</code> directive, or using the <code>paramAttributes</code> option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.</p>\n<p>In addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.</p>\n<p>As a result, <code>v-component</code> and <code>v-with</code> have been deprecated in 0.12. <code>paramAttributes</code> has also been renamed to <code>props</code>, which is shorter and cleaner. From now on, most Vue.js components will look like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"&#123;&#123;parentData&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>There are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated <a href=\"/guide/components.html\">Component System</a> section of the guide.</p>\n<h3 id=\"Filter-Arguments-Improvements\"><a href=\"#Filter-Arguments-Improvements\" class=\"headerlink\" title=\"Filter Arguments Improvements\"></a>Filter Arguments Improvements</h3><p>In 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrive a dynamic value on the vm instead of a plain string.</p>\n<p>In 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.</p>\n<p>This means the usage of some existing filters will have to change:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"keyup: onKeyUp | key 'enter'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">&#123;&#123; items.length | pluralize 'item' &#125;&#125;</div></pre></td></tr></table></figure>\n<p>But it would make custom filters that rely on dynamic values much easier to write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; msg | concat otherMsg &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Here the first argument to the <code>concat</code> filter will be the value of <code>this.otherMsg</code>.</p>\n<h3 id=\"Asynchronous-Components\"><a href=\"#Asynchronous-Components\" class=\"headerlink\" title=\"Asynchronous Components\"></a>Asynchronous Components</h3><p>It is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.</p>\n<p>Well, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn’t it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.</p>\n<p>In 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    resolve(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>It is up to you to decide how to load the component from the server, e.g. <code>$.getScript()</code> or require.js; but the recommended usage is to pair it up with Webpack’s <a href=\"http://webpack.github.io/docs/code-splitting.html\" target=\"_blank\" rel=\"external\">Code Splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// In Webpack AMD like syntax indicates a code split point</span></div><div class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example <a href=\"https://github.com/vuejs/vue-webpack-example\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h3 id=\"Improved-Transition-System\"><a href=\"#Improved-Transition-System\" class=\"headerlink\" title=\"Improved Transition System\"></a>Improved Transition System</h3><p>Vue.js’ transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.</p>\n<p><code>v-repeat</code> now also ships with built-in support for staggering transitions. It is as simple as adding <code>stagger=&quot;100&quot;</code> to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.</p>\n<p>For full details on the new transition system, check out the <a href=\"/guide/transitions.html\">updated guide</a>.</p>\n<h3 id=\"Performance-Tuning\"><a href=\"#Performance-Tuning\" class=\"headerlink\" title=\"Performance Tuning\"></a>Performance Tuning</h3><p>Vue.js’ precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there’s always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper <code>track-by</code> usage, <a href=\"http://vuejs.github.io/js-repaint-perfs/vue/\" target=\"_blank\" rel=\"external\">re-rendering with large, brand new dataset</a> is also comparable to, or even faster than other Virtual-DOM based frameworks.</p>\n<h3 id=\"One-More-Thing…\"><a href=\"#One-More-Thing…\" class=\"headerlink\" title=\"One More Thing…\"></a>One More Thing…</h3><p>With 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.</p>\n","excerpt":"<p>I’m really excited to announce that <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\">Vue.js 0.12: Dragon Ball</a> is finally here! Thanks to everyone who tried out the beta/rc versions and provided feedback / bug reports along the way.</p>\n<p>There’s a lot to cover in this release, and we will talk about a few highlights below. However, it is still recommended to carefully go through the <a href=\"https://github.com/yyx990803/vue/releases/tag/0.12.0\">Full Release Note</a> and updated docs if you are upgrading from 0.11. You can report bugs on GitHub, send questions to <a href=\"https://github.com/vuejs/Discussion/issues\">vuejs/Discussion</a>, or join us in the <a href=\"https://gitter.im/yyx990803/vue\">Gitter chat channel</a>.</p>","more":"<h3 id=\"More-Consistent-Component-Syntax\"><a href=\"#More-Consistent-Component-Syntax\" class=\"headerlink\" title=\"More Consistent Component Syntax\"></a>More Consistent Component Syntax</h3><p>Previously in 0.11 you have two ways to use a Vue.js component: using the <code>v-component</code> directive, or using custom elements. There are also two ways to pass data down to child components: using the <code>v-with</code> directive, or using the <code>paramAttributes</code> option. Although both custom elements and param attributes get compiled down to directives eventually, it is confusing and redundant to have two sets of syntax for the same functionality.</p>\n<p>In addition, it should be noted that the component system is a first-class concept in Vue.js, even more important than directives. It defines how we encapsulate our higher-level view logic and compose our application. In the meanwhile, having a clear and declarative way to pass data into child components is also very important. Components and param attributes really deserve their own dedicated syntax to differentiate from other directives.</p>\n<p>As a result, <code>v-component</code> and <code>v-with</code> have been deprecated in 0.12. <code>paramAttributes</code> has also been renamed to <code>props</code>, which is shorter and cleaner. From now on, most Vue.js components will look like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"&#123;&#123;parentData&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>There are also additional props-related improvements such as explicit one-time or one-way props, expression as props, methods as prop callbacks and more. You can find out more details in the 0.12 release notes linked above and the updated <a href=\"/guide/components.html\">Component System</a> section of the guide.</p>\n<h3 id=\"Filter-Arguments-Improvements\"><a href=\"#Filter-Arguments-Improvements\" class=\"headerlink\" title=\"Filter Arguments Improvements\"></a>Filter Arguments Improvements</h3><p>In 0.11, filters always receive their arguments as plain strings. An argument can be enclosed in quotes to include whitespace, but the quotes are not automatically stripped when passed into the filter function. Some users were also confused about how to retrive a dynamic value on the vm instead of a plain string.</p>\n<p>In 0.12, the filter argument syntax now follows a simple rule: if an argument is enclosed in quotes, it will be passed in as a plain string; otherwise, it will be evaluated against the current vm as a dynamic value.</p>\n<p>This means the usage of some existing filters will have to change:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on</span>=<span class=\"string\">\"keyup: onKeyUp | key 'enter'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">&#123;&#123; items.length | pluralize 'item' &#125;&#125;</div></pre></td></tr></table></figure>\n<p>But it would make custom filters that rely on dynamic values much easier to write:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;&#123; msg | concat otherMsg &#125;&#125;</div></pre></td></tr></table></figure>\n<p>Here the first argument to the <code>concat</code> filter will be the value of <code>this.otherMsg</code>.</p>\n<h3 id=\"Asynchronous-Components\"><a href=\"#Asynchronous-Components\" class=\"headerlink\" title=\"Asynchronous Components\"></a>Asynchronous Components</h3><p>It is common practice to bundle all the JavaScript into one file when building large single page applications. But when the file becomes too large, we may want to defer loading parts of our application for a faster initial load. However, this does pose some constraints on how the application architecture should be designed. It could be very tricky to figure out how to properly split up your JavaScript bundles.</p>\n<p>Well, with Vue.js we can already build our applications as decoupled components. If we can lazily load a dynamic component only when it is needed, wouldn’t it be awesome? As a matter of fact, in 0.12 this would be trivially easy with the new Asynchronous Component feature.</p>\n<p>In 0.12, you can define a component as a factory function that asynchronously resolves a component definition (can be just a plain options object). Vue.js will only trigger the factory function when the component actually needs to be rendered, and will cache the result for future re-renders:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    resolve(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;I am async!&lt;/div&gt;'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>It is up to you to decide how to load the component from the server, e.g. <code>$.getScript()</code> or require.js; but the recommended usage is to pair it up with Webpack’s <a href=\"http://webpack.github.io/docs/code-splitting.html\">Code Splitting feature</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'async-webpack-example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// In Webpack AMD like syntax indicates a code split point</span></div><div class=\"line\">  <span class=\"built_in\">require</span>([<span class=\"string\">'./my-async-component'</span>], resolve)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s all you need to do. You can use the component just like before, without even thinking about it being async. Webpack will automatically split your final JavaScript into separate bundles with correct dependencies, and automatically load a bundle via Ajax when it is required. You can check out a fully functional example <a href=\"https://github.com/vuejs/vue-webpack-example\">here</a>.</p>\n<h3 id=\"Improved-Transition-System\"><a href=\"#Improved-Transition-System\" class=\"headerlink\" title=\"Improved Transition System\"></a>Improved Transition System</h3><p>Vue.js’ transition system is really easy to use, but in the past it has the limitation that you cannot mix CSS and JavaScript-based transitions together. In 0.12 that is no longer the case! The improved transition system now allows you to add JavaScript hooks to a CSS-based transition for additional control. The amount of hooks exposed have also been expanded to give you finer-grained control at every stage of the transition.</p>\n<p><code>v-repeat</code> now also ships with built-in support for staggering transitions. It is as simple as adding <code>stagger=&quot;100&quot;</code> to your repeated element. It is also possible to define separate staggering for enter and leaving, or even dynamically calculate the staggering delay in a JavaScript hook.</p>\n<p>For full details on the new transition system, check out the <a href=\"/guide/transitions.html\">updated guide</a>.</p>\n<h3 id=\"Performance-Tuning\"><a href=\"#Performance-Tuning\" class=\"headerlink\" title=\"Performance Tuning\"></a>Performance Tuning</h3><p>Vue.js’ precise dependency tracking makes it the one of the most efficient view layer for small hot updates, but there’s always room for improvement. In 0.12, internal instance creation and compilation refactors have improved first-render performance for large lists by up to 40%. With proper <code>track-by</code> usage, <a href=\"http://vuejs.github.io/js-repaint-perfs/vue/\">re-rendering with large, brand new dataset</a> is also comparable to, or even faster than other Virtual-DOM based frameworks.</p>\n<h3 id=\"One-More-Thing…\"><a href=\"#One-More-Thing…\" class=\"headerlink\" title=\"One More Thing…\"></a>One More Thing…</h3><p>With 0.12 out of the door, more efforts will now be spent on the official vue-router, a dedicated routing library for Vue.js with nested view matching, full transition support, and asynchronous data hooks. I have expressed that Vue.js core intends to stay as a no-frills, drop-in view layer library, and that will not change. The vue-router will be shipped separately and is totally optional, however you can expect it to work seamlessly with Vue.js core when you need it.</p>"},{"title":"Common Beginner Gotchas","date":"2016-02-06T15:00:00.000Z","_content":"\nThere are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!\n\n<!-- more -->\n\n### Why isn't the DOM updating?\n\nMost of the time, when you change a Vue instance's data, the view updates. But there are two edge cases:\n\n1. When you are **adding a new property** that wasn't present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global [`Vue.set`](/api/#Vue-set) or [`Vue.delete`](/api/#Vue-delete) methods.\n\n2. When you modify an Array by directly setting an index (e.g. `arr[0] = val`) or modifying its `length` property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method `arr.$set(index, value)` which is just syntax sugar for `arr.splice(index, 1, value)`.\n\nFurther reading: [Reactivity in Depth](/guide/reactivity.html) and [Array Change Detection](http://vuejs.org/guide/list.html#Array-Change-Detection).\n\n### When is the DOM updated?\n\nVue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use `Vue.nextTick` right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.\n\nFurther reading: [Async Update Queue](/guide/reactivity.html#Async-Update-Queue).\n\n### Why does `data` need to be a function?\n\nIn the basic examples, we declare the `data` directly as a plain object. This is because we are creating only a single instance with `new Vue()`. However, when defining a **component**, `data` must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instance created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\nFurther reading: [Component Option Caveats](/guide/components.html#Component-Option-Caveats).\n\n### HTML case insensitivity\n\nAll Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like `:myProp=\"123\"` will be matched as `:myprop=\"123\"`. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as `myProp` should be bound in templates as `:my-prop`.\n\nFurther reading: [camelCase vs. kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case).\n\nWe are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation [here](https://github.com/vuejs/vue/issues/2308).\n","source":"_posts/common-gotchas.md","raw":"---\ntitle: Common Beginner Gotchas\ndate: 2016-02-06 10:00:00\n---\n\nThere are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!\n\n<!-- more -->\n\n### Why isn't the DOM updating?\n\nMost of the time, when you change a Vue instance's data, the view updates. But there are two edge cases:\n\n1. When you are **adding a new property** that wasn't present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global [`Vue.set`](/api/#Vue-set) or [`Vue.delete`](/api/#Vue-delete) methods.\n\n2. When you modify an Array by directly setting an index (e.g. `arr[0] = val`) or modifying its `length` property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method `arr.$set(index, value)` which is just syntax sugar for `arr.splice(index, 1, value)`.\n\nFurther reading: [Reactivity in Depth](/guide/reactivity.html) and [Array Change Detection](http://vuejs.org/guide/list.html#Array-Change-Detection).\n\n### When is the DOM updated?\n\nVue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use `Vue.nextTick` right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.\n\nFurther reading: [Async Update Queue](/guide/reactivity.html#Async-Update-Queue).\n\n### Why does `data` need to be a function?\n\nIn the basic examples, we declare the `data` directly as a plain object. This is because we are creating only a single instance with `new Vue()`. However, when defining a **component**, `data` must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instance created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\nFurther reading: [Component Option Caveats](/guide/components.html#Component-Option-Caveats).\n\n### HTML case insensitivity\n\nAll Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like `:myProp=\"123\"` will be matched as `:myprop=\"123\"`. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as `myProp` should be bound in templates as `:my-prop`.\n\nFurther reading: [camelCase vs. kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case).\n\nWe are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation [here](https://github.com/vuejs/vue/issues/2308).\n","slug":"common-gotchas","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnh000791m10e2fqmrq","content":"<p>There are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!</p>\n<a id=\"more\"></a>\n<h3 id=\"Why-isn’t-the-DOM-updating\"><a href=\"#Why-isn’t-the-DOM-updating\" class=\"headerlink\" title=\"Why isn’t the DOM updating?\"></a>Why isn’t the DOM updating?</h3><p>Most of the time, when you change a Vue instance’s data, the view updates. But there are two edge cases:</p>\n<ol>\n<li><p>When you are <strong>adding a new property</strong> that wasn’t present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global <a href=\"/api/#Vue-set\"><code>Vue.set</code></a> or <a href=\"/api/#Vue-delete\"><code>Vue.delete</code></a> methods.</p>\n</li>\n<li><p>When you modify an Array by directly setting an index (e.g. <code>arr[0] = val</code>) or modifying its <code>length</code> property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method <code>arr.$set(index, value)</code> which is just syntax sugar for <code>arr.splice(index, 1, value)</code>.</p>\n</li>\n</ol>\n<p>Further reading: <a href=\"/guide/reactivity.html\">Reactivity in Depth</a> and <a href=\"http://vuejs.org/guide/list.html#Array-Change-Detection\">Array Change Detection</a>.</p>\n<h3 id=\"When-is-the-DOM-updated\"><a href=\"#When-is-the-DOM-updated\" class=\"headerlink\" title=\"When is the DOM updated?\"></a>When is the DOM updated?</h3><p>Vue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use <code>Vue.nextTick</code> right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.</p>\n<p>Further reading: <a href=\"/guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a>.</p>\n<h3 id=\"Why-does-data-need-to-be-a-function\"><a href=\"#Why-does-data-need-to-be-a-function\" class=\"headerlink\" title=\"Why does data need to be a function?\"></a>Why does <code>data</code> need to be a function?</h3><p>In the basic examples, we declare the <code>data</code> directly as a plain object. This is because we are creating only a single instance with <code>new Vue()</code>. However, when defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instance created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>Further reading: <a href=\"/guide/components.html#Component-Option-Caveats\">Component Option Caveats</a>.</p>\n<h3 id=\"HTML-case-insensitivity\"><a href=\"#HTML-case-insensitivity\" class=\"headerlink\" title=\"HTML case insensitivity\"></a>HTML case insensitivity</h3><p>All Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like <code>:myProp=&quot;123&quot;</code> will be matched as <code>:myprop=&quot;123&quot;</code>. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as <code>myProp</code> should be bound in templates as <code>:my-prop</code>.</p>\n<p>Further reading: <a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\">camelCase vs. kebab-case</a>.</p>\n<p>We are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation <a href=\"https://github.com/vuejs/vue/issues/2308\" target=\"_blank\" rel=\"external\">here</a>.</p>\n","excerpt":"<p>There are few types of questions that we frequently see from users who are new to Vue.js. Although they are all mentioned somewhere in the guide, they are easy to miss and can be hard to find when you do get bitten by the gotchas. Therefore we are aggregating them in this post and hopefully it can save you some time!</p>","more":"<h3 id=\"Why-isn’t-the-DOM-updating\"><a href=\"#Why-isn’t-the-DOM-updating\" class=\"headerlink\" title=\"Why isn’t the DOM updating?\"></a>Why isn’t the DOM updating?</h3><p>Most of the time, when you change a Vue instance’s data, the view updates. But there are two edge cases:</p>\n<ol>\n<li><p>When you are <strong>adding a new property</strong> that wasn’t present when the data was observed. Due to the limitation of ES5 and to ensure consistent behavior across browsers, Vue.js cannot detect property addition/deletions. The best practice is to always declare properties that need to be reactive upfront. In cases where you absolutely need to add or delete properties at runtime, use the global <a href=\"/api/#Vue-set\"><code>Vue.set</code></a> or <a href=\"/api/#Vue-delete\"><code>Vue.delete</code></a> methods.</p>\n</li>\n<li><p>When you modify an Array by directly setting an index (e.g. <code>arr[0] = val</code>) or modifying its <code>length</code> property. Similarly, Vue.js cannot pickup these changes. Always modify arrays by using an Array instance method, or replacing it entirely. Vue provides a convenience method <code>arr.$set(index, value)</code> which is just syntax sugar for <code>arr.splice(index, 1, value)</code>.</p>\n</li>\n</ol>\n<p>Further reading: <a href=\"/guide/reactivity.html\">Reactivity in Depth</a> and <a href=\"http://vuejs.org/guide/list.html#Array-Change-Detection\">Array Change Detection</a>.</p>\n<h3 id=\"When-is-the-DOM-updated\"><a href=\"#When-is-the-DOM-updated\" class=\"headerlink\" title=\"When is the DOM updated?\"></a>When is the DOM updated?</h3><p>Vue.js uses an asynchronous queue to batch DOM updates. This means when you modify some data, the DOM updates do not happen instantly: they are applied asynchronously when the queue is flushed. So how do you know when the DOM has been updated? Use <code>Vue.nextTick</code> right after you modify the data. The callback function you pass to it will be called once the queue has been flushed.</p>\n<p>Further reading: <a href=\"/guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a>.</p>\n<h3 id=\"Why-does-data-need-to-be-a-function\"><a href=\"#Why-does-data-need-to-be-a-function\" class=\"headerlink\" title=\"Why does data need to be a function?\"></a>Why does <code>data</code> need to be a function?</h3><p>In the basic examples, we declare the <code>data</code> directly as a plain object. This is because we are creating only a single instance with <code>new Vue()</code>. However, when defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object. Why? Because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instance created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>Further reading: <a href=\"/guide/components.html#Component-Option-Caveats\">Component Option Caveats</a>.</p>\n<h3 id=\"HTML-case-insensitivity\"><a href=\"#HTML-case-insensitivity\" class=\"headerlink\" title=\"HTML case insensitivity\"></a>HTML case insensitivity</h3><p>All Vue.js templates are valid, parsable HTML markup, and Vue.js relies on spec-compliant parsers to process its templates. However, as specified in the standard, HTML is case-insensitive when matching tag and attribute names. This means camelCase attributes like <code>:myProp=&quot;123&quot;</code> will be matched as <code>:myprop=&quot;123&quot;</code>. As a rule of thumb, you should use camelCase in JavaScript and kebab-case in templates. For example a prop defined in JavaScript as <code>myProp</code> should be bound in templates as <code>:my-prop</code>.</p>\n<p>Further reading: <a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\">camelCase vs. kebab-case</a>.</p>\n<p>We are also discussing the possibility of eliminating this inconsistency by resolving props and components in a case-insensitive manner. Join the conversation <a href=\"https://github.com/vuejs/vue/issues/2308\">here</a>.</p>"},{"title":"Vue.js 0.11 released!","date":"2014-11-09T14:23:40.000Z","_content":"\nAfter the long wait, [Vue.js 0.11 **Cowboy Bebop**](https://github.com/yyx990803/vue/releases/tag/0.11.0) is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.\n\n<!-- more -->\n\nThe 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the [0.11 Change List](https://github.com/yyx990803/vue/blob/master/changes.md) before upgrading. Aside from the API changes, 0.11 also ships with better [code quality](https://codeclimate.com/github/yyx990803/vue) and [test coverage](https://coveralls.io/r/yyx990803/vue), and is considerably more robust in almost every aspect.\n\nThis documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at [legacy.vuejs.org](http://legacy.vuejs.org).\n","source":"_posts/vue-011-release.md","raw":"---\ntitle: Vue.js 0.11 released!\ndate: 2014-11-09 09:23:40\n---\n\nAfter the long wait, [Vue.js 0.11 **Cowboy Bebop**](https://github.com/yyx990803/vue/releases/tag/0.11.0) is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.\n\n<!-- more -->\n\nThe 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the [0.11 Change List](https://github.com/yyx990803/vue/blob/master/changes.md) before upgrading. Aside from the API changes, 0.11 also ships with better [code quality](https://codeclimate.com/github/yyx990803/vue) and [test coverage](https://coveralls.io/r/yyx990803/vue), and is considerably more robust in almost every aspect.\n\nThis documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at [legacy.vuejs.org](http://legacy.vuejs.org).\n","slug":"vue-011-release","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnl000891m1g7q2surz","content":"<p>After the long wait, <a href=\"https://github.com/yyx990803/vue/releases/tag/0.11.0\" target=\"_blank\" rel=\"external\">Vue.js 0.11 <strong>Cowboy Bebop</strong></a> is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.</p>\n<a id=\"more\"></a>\n<p>The 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\" target=\"_blank\" rel=\"external\">0.11 Change List</a> before upgrading. Aside from the API changes, 0.11 also ships with better <a href=\"https://codeclimate.com/github/yyx990803/vue\" target=\"_blank\" rel=\"external\">code quality</a> and <a href=\"https://coveralls.io/r/yyx990803/vue\" target=\"_blank\" rel=\"external\">test coverage</a>, and is considerably more robust in almost every aspect.</p>\n<p>This documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at <a href=\"http://legacy.vuejs.org\" target=\"_blank\" rel=\"external\">legacy.vuejs.org</a>.</p>\n","excerpt":"<p>After the long wait, <a href=\"https://github.com/yyx990803/vue/releases/tag/0.11.0\">Vue.js 0.11 <strong>Cowboy Bebop</strong></a> is finally here! Thanks to everyone who tried out the release candidate versions and provided feedback / bug reports along the way.</p>","more":"<p>The 0.11 release introduced many new features and also a fair number of breaking changes, so please carefully read through the <a href=\"https://github.com/yyx990803/vue/blob/master/changes.md\">0.11 Change List</a> before upgrading. Aside from the API changes, 0.11 also ships with better <a href=\"https://codeclimate.com/github/yyx990803/vue\">code quality</a> and <a href=\"https://coveralls.io/r/yyx990803/vue\">test coverage</a>, and is considerably more robust in almost every aspect.</p>\n<p>This documentation site has been fully upgraded to match the new 0.11 API. For the now legacy 0.10.6 version, you can still find documentations for it at <a href=\"http://legacy.vuejs.org\">legacy.vuejs.org</a>.</p>"},{"title":"Vue.js 0.10.6, and what's next","date":"2014-07-29T04:04:55.000Z","_content":"\n## 0.10.6\n\nVue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintainance version before the next major release.\n\n<!-- more -->\n\n- fix `v-style` error when value is falsy or a number. ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix the built-in `currency` filter error when value is a string ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix `Vue.require` for building with Component v1.0+ ( thanks to [@kewah](https://github.com/kewah) )\n- Allow template nodes to be passed as a template option ( thanks to [@jordangarcia](https://github.com/jordangarcia) )\n- `vm.$destroy()` now accepts an optional argument `noRemove`. When passed in as `true` it will leave the vm's DOM node intact after the vm is destroyed.\n\n## Vue-next\n\nSome of you might have noticed there is a [next](https://github.com/yyx990803/vue/tree/next) branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:\n\n- Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.\n- Improve general code quality (in particular, `compiler.js` as of now is a big pile of mess, and comments are not consistent across the codebase.)\n\nTake note that the `next` branch is still in **very** early stage. The internals will change a lot, and when it comes out it **will** break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in [`changes.md`](https://github.com/yyx990803/vue/blob/next/changes.md). The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I'd appreicate your feedback on any of the topics.\n\nShare your thoughts at [vuejs/Discussion](https://github.com/vuejs/Discussion/issues).\n","source":"_posts/vue-next.md","raw":"---\ntitle: Vue.js 0.10.6, and what's next\ndate: 2014-07-29 00:04:55\n---\n\n## 0.10.6\n\nVue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintainance version before the next major release.\n\n<!-- more -->\n\n- fix `v-style` error when value is falsy or a number. ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix the built-in `currency` filter error when value is a string ( thanks to [@dmfilipenko](https://github.com/dmfilipenko) )\n- fix `Vue.require` for building with Component v1.0+ ( thanks to [@kewah](https://github.com/kewah) )\n- Allow template nodes to be passed as a template option ( thanks to [@jordangarcia](https://github.com/jordangarcia) )\n- `vm.$destroy()` now accepts an optional argument `noRemove`. When passed in as `true` it will leave the vm's DOM node intact after the vm is destroyed.\n\n## Vue-next\n\nSome of you might have noticed there is a [next](https://github.com/yyx990803/vue/tree/next) branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:\n\n- Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.\n- Improve general code quality (in particular, `compiler.js` as of now is a big pile of mess, and comments are not consistent across the codebase.)\n\nTake note that the `next` branch is still in **very** early stage. The internals will change a lot, and when it comes out it **will** break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in [`changes.md`](https://github.com/yyx990803/vue/blob/next/changes.md). The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I'd appreicate your feedback on any of the topics.\n\nShare your thoughts at [vuejs/Discussion](https://github.com/vuejs/Discussion/issues).\n","slug":"vue-next","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnm000991m1eydjz6yf","content":"<h2 id=\"0-10-6\"><a href=\"#0-10-6\" class=\"headerlink\" title=\"0.10.6\"></a>0.10.6</h2><p>Vue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintainance version before the next major release.</p>\n<a id=\"more\"></a>\n<ul>\n<li>fix <code>v-style</code> error when value is falsy or a number. ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"external\">@dmfilipenko</a> )</li>\n<li>fix the built-in <code>currency</code> filter error when value is a string ( thanks to <a href=\"https://github.com/dmfilipenko\" target=\"_blank\" rel=\"external\">@dmfilipenko</a> )</li>\n<li>fix <code>Vue.require</code> for building with Component v1.0+ ( thanks to <a href=\"https://github.com/kewah\" target=\"_blank\" rel=\"external\">@kewah</a> )</li>\n<li>Allow template nodes to be passed as a template option ( thanks to <a href=\"https://github.com/jordangarcia\" target=\"_blank\" rel=\"external\">@jordangarcia</a> )</li>\n<li><code>vm.$destroy()</code> now accepts an optional argument <code>noRemove</code>. When passed in as <code>true</code> it will leave the vm’s DOM node intact after the vm is destroyed.</li>\n</ul>\n<h2 id=\"Vue-next\"><a href=\"#Vue-next\" class=\"headerlink\" title=\"Vue-next\"></a>Vue-next</h2><p>Some of you might have noticed there is a <a href=\"https://github.com/yyx990803/vue/tree/next\" target=\"_blank\" rel=\"external\">next</a> branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:</p>\n<ul>\n<li>Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.</li>\n<li>Improve general code quality (in particular, <code>compiler.js</code> as of now is a big pile of mess, and comments are not consistent across the codebase.)</li>\n</ul>\n<p>Take note that the <code>next</code> branch is still in <strong>very</strong> early stage. The internals will change a lot, and when it comes out it <strong>will</strong> break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in <a href=\"https://github.com/yyx990803/vue/blob/next/changes.md\" target=\"_blank\" rel=\"external\"><code>changes.md</code></a>. The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I’d appreicate your feedback on any of the topics.</p>\n<p>Share your thoughts at <a href=\"https://github.com/vuejs/Discussion/issues\" target=\"_blank\" rel=\"external\">vuejs/Discussion</a>.</p>\n","excerpt":"<h2 id=\"0-10-6\"><a href=\"#0-10-6\" class=\"headerlink\" title=\"0.10.6\"></a>0.10.6</h2><p>Vue.js 0.10.6 has been released! This is another small bug-fix release and will be the last maintainance version before the next major release.</p>","more":"<ul>\n<li>fix <code>v-style</code> error when value is falsy or a number. ( thanks to <a href=\"https://github.com/dmfilipenko\">@dmfilipenko</a> )</li>\n<li>fix the built-in <code>currency</code> filter error when value is a string ( thanks to <a href=\"https://github.com/dmfilipenko\">@dmfilipenko</a> )</li>\n<li>fix <code>Vue.require</code> for building with Component v1.0+ ( thanks to <a href=\"https://github.com/kewah\">@kewah</a> )</li>\n<li>Allow template nodes to be passed as a template option ( thanks to <a href=\"https://github.com/jordangarcia\">@jordangarcia</a> )</li>\n<li><code>vm.$destroy()</code> now accepts an optional argument <code>noRemove</code>. When passed in as <code>true</code> it will leave the vm’s DOM node intact after the vm is destroyed.</li>\n</ul>\n<h2 id=\"Vue-next\"><a href=\"#Vue-next\" class=\"headerlink\" title=\"Vue-next\"></a>Vue-next</h2><p>Some of you might have noticed there is a <a href=\"https://github.com/yyx990803/vue/tree/next\">next</a> branch in the repo. And yes, I am re-writing Vue.js from scratch. There are two main reasons:</p>\n<ul>\n<li>Fix some issues that are caused by design flaws in the current version. Because these changes affect the design of some core modules, it is actually easier to rewrite than to apply on the current codebase.</li>\n<li>Improve general code quality (in particular, <code>compiler.js</code> as of now is a big pile of mess, and comments are not consistent across the codebase.)</li>\n</ul>\n<p>Take note that the <code>next</code> branch is still in <strong>very</strong> early stage. The internals will change a lot, and when it comes out it <strong>will</strong> break current applications. Despite that I will try to keep the API changes to a minimum. Major differences with current 0.10 branch are documented in <a href=\"https://github.com/yyx990803/vue/blob/next/changes.md\"><code>changes.md</code></a>. The list is obviously incomplete and subject to change, some of them are simply ideas, but it at least gives you a taste of what to expect, and I’d appreicate your feedback on any of the topics.</p>\n<p>Share your thoughts at <a href=\"https://github.com/vuejs/Discussion/issues\">vuejs/Discussion</a>.</p>"},{"title":"March 2016 Update","date":"2016-03-14T22:45:00.000Z","_content":"\n## Growing Community\n\nVue's growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What's more exciting though, is that the community successfully organized the first [London Vue.js Meetup](http://www.meetup.com/London-Vue-js-Meetup/) and the first [Paris Vue.js Meetup](http://www.meetup.com/Vuejs-Paris/?scroll=true)! A big shoutout to the awesome organizers: [Jack](https://twitter.com/JackBarham), [James](https://twitter.com/onejamesbrowne/) and [Eduardo](https://twitter.com/posva/).\n\n<!-- more -->\n\nIf you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)\n\n## Cool Things Being Built\n\nMore and more amazing things are being built with Vue. There are products like [PageKit](https://pagekit.com/), Laravel Spark (coming soon) and [Statamic](https://v2.statamic.com/), sleek apps like [Koel](http://koel.phanan.net/) and [Gokotta](https://github.com/Zhangdroid/Gokotta), UI components like [VueStrap](http://yuche.github.io/vue-strap/) and [Vue-MDL](http://posva.net/vue-mdl/), and smooth, interactive experiences like [YouTube Adblitz](https://adblitz.withyoutube.com) and even the [Facebook NewsFeed Marketing Site](https://newsfeed.fb.com/)!\n\nThere are many other great projects - too many to be listed here - but you can check them all out in [awesome-vue](https://github.com/vuejs/awesome-vue). If you've built great things with Vue, you should also add them to the list!\n\n## A New Vision For the Project\n\nSome of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely [Vuex](https://github.com/vuejs/vuex), [vue-devtools](https://github.com/vuejs/vue-devtools) and the official [Webpack project boilerplate](https://github.com/vuejs-templates/webpack). The next step is a new release for [vue-router](https://github.com/vuejs/vue-router), and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.\n\nAll this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain \"just the view layer\" - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.\n\n## Vue.js needs your help!\n\nOpen source is awesome, and I'm proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!\n\n### Looking for collaborators\n\nThere are already users who frequently helps out in various ways, but this is an invitation to make things official. I'm looking for contributors to join the \"team\", which is currently mostly just me. If that sounds interesting to you, take a look at the application [here](https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform).\n\n### Looking for sponsors\n\nAnother way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.\n\nIf you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n\nIn either case, you can provide recurring funding through Vue's [Patreon campaign](https://www.patreon.com/evanyou), or provide one-time donations via [PayPal](https://www.paypal.me/evanyou). There are many ideas for Vue that I have lined up but haven't had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!\n","source":"_posts/march-update.md","raw":"---\ntitle: March 2016 Update\ndate: 2016-03-14 18:45:00\n---\n\n## Growing Community\n\nVue's growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What's more exciting though, is that the community successfully organized the first [London Vue.js Meetup](http://www.meetup.com/London-Vue-js-Meetup/) and the first [Paris Vue.js Meetup](http://www.meetup.com/Vuejs-Paris/?scroll=true)! A big shoutout to the awesome organizers: [Jack](https://twitter.com/JackBarham), [James](https://twitter.com/onejamesbrowne/) and [Eduardo](https://twitter.com/posva/).\n\n<!-- more -->\n\nIf you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)\n\n## Cool Things Being Built\n\nMore and more amazing things are being built with Vue. There are products like [PageKit](https://pagekit.com/), Laravel Spark (coming soon) and [Statamic](https://v2.statamic.com/), sleek apps like [Koel](http://koel.phanan.net/) and [Gokotta](https://github.com/Zhangdroid/Gokotta), UI components like [VueStrap](http://yuche.github.io/vue-strap/) and [Vue-MDL](http://posva.net/vue-mdl/), and smooth, interactive experiences like [YouTube Adblitz](https://adblitz.withyoutube.com) and even the [Facebook NewsFeed Marketing Site](https://newsfeed.fb.com/)!\n\nThere are many other great projects - too many to be listed here - but you can check them all out in [awesome-vue](https://github.com/vuejs/awesome-vue). If you've built great things with Vue, you should also add them to the list!\n\n## A New Vision For the Project\n\nSome of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely [Vuex](https://github.com/vuejs/vuex), [vue-devtools](https://github.com/vuejs/vue-devtools) and the official [Webpack project boilerplate](https://github.com/vuejs-templates/webpack). The next step is a new release for [vue-router](https://github.com/vuejs/vue-router), and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.\n\nAll this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain \"just the view layer\" - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.\n\n## Vue.js needs your help!\n\nOpen source is awesome, and I'm proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!\n\n### Looking for collaborators\n\nThere are already users who frequently helps out in various ways, but this is an invitation to make things official. I'm looking for contributors to join the \"team\", which is currently mostly just me. If that sounds interesting to you, take a look at the application [here](https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform).\n\n### Looking for sponsors\n\nAnother way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.\n\nIf you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n\nIn either case, you can provide recurring funding through Vue's [Patreon campaign](https://www.patreon.com/evanyou), or provide one-time donations via [PayPal](https://www.paypal.me/evanyou). There are many ideas for Vue that I have lined up but haven't had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!\n","slug":"march-update","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnn000a91m1yvpzuvlr","content":"<h2 id=\"Growing-Community\"><a href=\"#Growing-Community\" class=\"headerlink\" title=\"Growing Community\"></a>Growing Community</h2><p>Vue’s growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What’s more exciting though, is that the community successfully organized the first <a href=\"http://www.meetup.com/London-Vue-js-Meetup/\" target=\"_blank\" rel=\"external\">London Vue.js Meetup</a> and the first <a href=\"http://www.meetup.com/Vuejs-Paris/?scroll=true\" target=\"_blank\" rel=\"external\">Paris Vue.js Meetup</a>! A big shoutout to the awesome organizers: <a href=\"https://twitter.com/JackBarham\" target=\"_blank\" rel=\"external\">Jack</a>, <a href=\"https://twitter.com/onejamesbrowne/\" target=\"_blank\" rel=\"external\">James</a> and <a href=\"https://twitter.com/posva/\" target=\"_blank\" rel=\"external\">Eduardo</a>.</p>\n<a id=\"more\"></a>\n<p>If you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)</p>\n<h2 id=\"Cool-Things-Being-Built\"><a href=\"#Cool-Things-Being-Built\" class=\"headerlink\" title=\"Cool Things Being Built\"></a>Cool Things Being Built</h2><p>More and more amazing things are being built with Vue. There are products like <a href=\"https://pagekit.com/\" target=\"_blank\" rel=\"external\">PageKit</a>, Laravel Spark (coming soon) and <a href=\"https://v2.statamic.com/\" target=\"_blank\" rel=\"external\">Statamic</a>, sleek apps like <a href=\"http://koel.phanan.net/\" target=\"_blank\" rel=\"external\">Koel</a> and <a href=\"https://github.com/Zhangdroid/Gokotta\" target=\"_blank\" rel=\"external\">Gokotta</a>, UI components like <a href=\"http://yuche.github.io/vue-strap/\" target=\"_blank\" rel=\"external\">VueStrap</a> and <a href=\"http://posva.net/vue-mdl/\" target=\"_blank\" rel=\"external\">Vue-MDL</a>, and smooth, interactive experiences like <a href=\"https://adblitz.withyoutube.com\" target=\"_blank\" rel=\"external\">YouTube Adblitz</a> and even the <a href=\"https://newsfeed.fb.com/\" target=\"_blank\" rel=\"external\">Facebook NewsFeed Marketing Site</a>!</p>\n<p>There are many other great projects - too many to be listed here - but you can check them all out in <a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"external\">awesome-vue</a>. If you’ve built great things with Vue, you should also add them to the list!</p>\n<h2 id=\"A-New-Vision-For-the-Project\"><a href=\"#A-New-Vision-For-the-Project\" class=\"headerlink\" title=\"A New Vision For the Project\"></a>A New Vision For the Project</h2><p>Some of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>, <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a> and the official <a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"external\">Webpack project boilerplate</a>. The next step is a new release for <a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"external\">vue-router</a>, and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.</p>\n<p>All this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain “just the view layer” - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.</p>\n<h2 id=\"Vue-js-needs-your-help\"><a href=\"#Vue-js-needs-your-help\" class=\"headerlink\" title=\"Vue.js needs your help!\"></a>Vue.js needs your help!</h2><p>Open source is awesome, and I’m proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!</p>\n<h3 id=\"Looking-for-collaborators\"><a href=\"#Looking-for-collaborators\" class=\"headerlink\" title=\"Looking for collaborators\"></a>Looking for collaborators</h3><p>There are already users who frequently helps out in various ways, but this is an invitation to make things official. I’m looking for contributors to join the “team”, which is currently mostly just me. If that sounds interesting to you, take a look at the application <a href=\"https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<h3 id=\"Looking-for-sponsors\"><a href=\"#Looking-for-sponsors\" class=\"headerlink\" title=\"Looking for sponsors\"></a>Looking for sponsors</h3><p>Another way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.</p>\n<p>If you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n<p>In either case, you can provide recurring funding through Vue’s <a href=\"https://www.patreon.com/evanyou\" target=\"_blank\" rel=\"external\">Patreon campaign</a>, or provide one-time donations via <a href=\"https://www.paypal.me/evanyou\" target=\"_blank\" rel=\"external\">PayPal</a>. There are many ideas for Vue that I have lined up but haven’t had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!</p>\n","excerpt":"<h2 id=\"Growing-Community\"><a href=\"#Growing-Community\" class=\"headerlink\" title=\"Growing Community\"></a>Growing Community</h2><p>Vue’s growth in the past year has been nothing short of amazing. As of today we are at over 15,000 stars on GitHub, over 500k downloads from npm, and over 2,000 users in the Gitter channel. What’s more exciting though, is that the community successfully organized the first <a href=\"http://www.meetup.com/London-Vue-js-Meetup/\">London Vue.js Meetup</a> and the first <a href=\"http://www.meetup.com/Vuejs-Paris/?scroll=true\">Paris Vue.js Meetup</a>! A big shoutout to the awesome organizers: <a href=\"https://twitter.com/JackBarham\">Jack</a>, <a href=\"https://twitter.com/onejamesbrowne/\">James</a> and <a href=\"https://twitter.com/posva/\">Eduardo</a>.</p>","more":"<p>If you are interested in connecting with Vue.js users near you and share your experiences in using Vue.js, joining a local Meetup is a great idea - even better, maybe you can organize one :)</p>\n<h2 id=\"Cool-Things-Being-Built\"><a href=\"#Cool-Things-Being-Built\" class=\"headerlink\" title=\"Cool Things Being Built\"></a>Cool Things Being Built</h2><p>More and more amazing things are being built with Vue. There are products like <a href=\"https://pagekit.com/\">PageKit</a>, Laravel Spark (coming soon) and <a href=\"https://v2.statamic.com/\">Statamic</a>, sleek apps like <a href=\"http://koel.phanan.net/\">Koel</a> and <a href=\"https://github.com/Zhangdroid/Gokotta\">Gokotta</a>, UI components like <a href=\"http://yuche.github.io/vue-strap/\">VueStrap</a> and <a href=\"http://posva.net/vue-mdl/\">Vue-MDL</a>, and smooth, interactive experiences like <a href=\"https://adblitz.withyoutube.com\">YouTube Adblitz</a> and even the <a href=\"https://newsfeed.fb.com/\">Facebook NewsFeed Marketing Site</a>!</p>\n<p>There are many other great projects - too many to be listed here - but you can check them all out in <a href=\"https://github.com/vuejs/awesome-vue\">awesome-vue</a>. If you’ve built great things with Vue, you should also add them to the list!</p>\n<h2 id=\"A-New-Vision-For-the-Project\"><a href=\"#A-New-Vision-For-the-Project\" class=\"headerlink\" title=\"A New Vision For the Project\"></a>A New Vision For the Project</h2><p>Some of you may have noticed that the development on the Vue.js core repo has slowed down lately - in the meanwhile, a lot of efforts went into other sub projects, namely <a href=\"https://github.com/vuejs/vuex\">Vuex</a>, <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a> and the official <a href=\"https://github.com/vuejs-templates/webpack\">Webpack project boilerplate</a>. The next step is a new release for <a href=\"https://github.com/vuejs/vue-router\">vue-router</a>, and better documentation/examples demonstrating how Vue.js core, Vuex and vue-router work together in a large single page application.</p>\n<p>All this adds together towards a new vision for the Vue.js project: a progressive framework that can adapt to different complexity levels. Vue.js core will remain “just the view layer” - you can still drop it on whatever existing page to replace jQuery, but the Vue.js project also includes other pieces like vue-router, Vuex, vue-loader/vueify and vue-cli that works together as a more complete, opinionated framework for single page applications. More on this in a later post.</p>\n<h2 id=\"Vue-js-needs-your-help\"><a href=\"#Vue-js-needs-your-help\" class=\"headerlink\" title=\"Vue.js needs your help!\"></a>Vue.js needs your help!</h2><p>Open source is awesome, and I’m proud that Vue.js is helping people build real products all over the world. However, as the scope of the project grows, pushing new features while maintaining everything becomes a very demanding job. The good news is you can help!</p>\n<h3 id=\"Looking-for-collaborators\"><a href=\"#Looking-for-collaborators\" class=\"headerlink\" title=\"Looking for collaborators\"></a>Looking for collaborators</h3><p>There are already users who frequently helps out in various ways, but this is an invitation to make things official. I’m looking for contributors to join the “team”, which is currently mostly just me. If that sounds interesting to you, take a look at the application <a href=\"https://docs.google.com/forms/d/1SgDgKZqyivEf5xl0EOWNfs68Xy3f4oBzLXIlwlS0BIs/viewform\">here</a>.</p>\n<h3 id=\"Looking-for-sponsors\"><a href=\"#Looking-for-sponsors\" class=\"headerlink\" title=\"Looking for sponsors\"></a>Looking for sponsors</h3><p>Another way to help making Vue development sustainable is providing direct financial support. The more financial support I receive, the more time I get to spend on making Vue even better.</p>\n<p>If you run a business and is using Vue in a revenue-generating product, it would make business sense to sponsor Vue development: it ensures the project that your product relies on stays healthy and actively maintained. It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n<p>In either case, you can provide recurring funding through Vue’s <a href=\"https://www.patreon.com/evanyou\">Patreon campaign</a>, or provide one-time donations via <a href=\"https://www.paypal.me/evanyou\">PayPal</a>. There are many ideas for Vue that I have lined up but haven’t had the time to embark on, and I would love to be able to work on them full time - I hope you can help me make that happen!</p>"},{"title":"Announcing vue-cli","date":"2015-12-28T05:00:00.000Z","_content":"\nRecently there has been a lot of [discussion around the tooling hurdle](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6) when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a `<script>` tag, so we've got that part covered. However, that's not how you'd build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing [vue-cli](https://github.com/vuejs/vue-cli), a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.\n\n<!-- more -->\n\n### Just The Scaffolding\n\nThe usage looks like this:\n\n``` bash\nnpm install -g vue-cli\nvue init webpack my-project\n# answer prompts\ncd my-project\nnpm install\nnpm run dev # tada!\n```\n\nAll the CLI does is pulling down templates from the [vuejs-templates](https://github.com/vuejs-templates) organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.\n\n### Official Templates\n\nThe purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.\n\nAll official project templates are repos in the [vuejs-templates organization](https://github.com/vuejs-templates). When a new template is added to the organization, you will be able to run `vue init <template-name> <project-name>` to use that template. You can also run `vue list` to see all available official templates.\n\nCurrent available templates include:\n\n- [browserify](https://github.com/vuejs-templates/browserify) - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.\n\n- [browserify-simple](https://github.com/vuejs-templates/browserify-simple) - A simple Browserify + vueify setup for quick prototyping.\n\n- [webpack](https://github.com/vuejs-templates/webpack) - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.\n\n- [webpack-simple](https://github.com/vuejs-templates/webpack-simple) - A simple Webpack + vue-loader setup for quick prototyping.\n\n### Bring Your Own Setup\n\nIf you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via `vue-cli` too, because `vue-cli` can work directly on GitHub repos:\n\n``` bash\nvue init username/repo my-project\n```\n\n### Vue Components Everywhere\n\nThere are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support `*.vue` single file components. This means any third party Vue components written as valid `*.vue` files can be shared among projects using these setups, and simply be distributed over NPM - let's create more reusable components!\n","source":"_posts/vue-cli.md","raw":"---\ntitle: Announcing vue-cli\ndate: 2015-12-28 00:00:00\n---\n\nRecently there has been a lot of [discussion around the tooling hurdle](https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6) when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a `<script>` tag, so we've got that part covered. However, that's not how you'd build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing [vue-cli](https://github.com/vuejs/vue-cli), a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.\n\n<!-- more -->\n\n### Just The Scaffolding\n\nThe usage looks like this:\n\n``` bash\nnpm install -g vue-cli\nvue init webpack my-project\n# answer prompts\ncd my-project\nnpm install\nnpm run dev # tada!\n```\n\nAll the CLI does is pulling down templates from the [vuejs-templates](https://github.com/vuejs-templates) organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.\n\n### Official Templates\n\nThe purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.\n\nAll official project templates are repos in the [vuejs-templates organization](https://github.com/vuejs-templates). When a new template is added to the organization, you will be able to run `vue init <template-name> <project-name>` to use that template. You can also run `vue list` to see all available official templates.\n\nCurrent available templates include:\n\n- [browserify](https://github.com/vuejs-templates/browserify) - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.\n\n- [browserify-simple](https://github.com/vuejs-templates/browserify-simple) - A simple Browserify + vueify setup for quick prototyping.\n\n- [webpack](https://github.com/vuejs-templates/webpack) - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.\n\n- [webpack-simple](https://github.com/vuejs-templates/webpack-simple) - A simple Webpack + vue-loader setup for quick prototyping.\n\n### Bring Your Own Setup\n\nIf you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via `vue-cli` too, because `vue-cli` can work directly on GitHub repos:\n\n``` bash\nvue init username/repo my-project\n```\n\n### Vue Components Everywhere\n\nThere are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support `*.vue` single file components. This means any third party Vue components written as valid `*.vue` files can be shared among projects using these setups, and simply be distributed over NPM - let's create more reusable components!\n","slug":"vue-cli","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjno000b91m1t5z9inmq","content":"<p>Recently there has been a lot of <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6\" target=\"_blank\" rel=\"external\">discussion around the tooling hurdle</a> when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a <code>&lt;script&gt;</code> tag, so we’ve got that part covered. However, that’s not how you’d build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">vue-cli</a>, a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.</p>\n<a id=\"more\"></a>\n<h3 id=\"Just-The-Scaffolding\"><a href=\"#Just-The-Scaffolding\" class=\"headerlink\" title=\"Just The Scaffolding\"></a>Just The Scaffolding</h3><p>The usage looks like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g vue-cli</div><div class=\"line\">vue init webpack my-project</div><div class=\"line\"><span class=\"comment\"># answer prompts</span></div><div class=\"line\"><span class=\"built_in\">cd</span> my-project</div><div class=\"line\">npm install</div><div class=\"line\">npm run dev <span class=\"comment\"># tada!</span></div></pre></td></tr></table></figure>\n<p>All the CLI does is pulling down templates from the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"external\">vuejs-templates</a> organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.</p>\n<h3 id=\"Official-Templates\"><a href=\"#Official-Templates\" class=\"headerlink\" title=\"Official Templates\"></a>Official Templates</h3><p>The purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.</p>\n<p>All official project templates are repos in the <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"external\">vuejs-templates organization</a>. When a new template is added to the organization, you will be able to run <code>vue init &lt;template-name&gt; &lt;project-name&gt;</code> to use that template. You can also run <code>vue list</code> to see all available official templates.</p>\n<p>Current available templates include:</p>\n<ul>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify\" target=\"_blank\" rel=\"external\">browserify</a> - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify-simple\" target=\"_blank\" rel=\"external\">browserify-simple</a> - A simple Browserify + vueify setup for quick prototyping.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack\" target=\"_blank\" rel=\"external\">webpack</a> - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"external\">webpack-simple</a> - A simple Webpack + vue-loader setup for quick prototyping.</p>\n</li>\n</ul>\n<h3 id=\"Bring-Your-Own-Setup\"><a href=\"#Bring-Your-Own-Setup\" class=\"headerlink\" title=\"Bring Your Own Setup\"></a>Bring Your Own Setup</h3><p>If you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via <code>vue-cli</code> too, because <code>vue-cli</code> can work directly on GitHub repos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vue init username/repo my-project</div></pre></td></tr></table></figure>\n<h3 id=\"Vue-Components-Everywhere\"><a href=\"#Vue-Components-Everywhere\" class=\"headerlink\" title=\"Vue Components Everywhere\"></a>Vue Components Everywhere</h3><p>There are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support <code>*.vue</code> single file components. This means any third party Vue components written as valid <code>*.vue</code> files can be shared among projects using these setups, and simply be distributed over NPM - let’s create more reusable components!</p>\n","excerpt":"<p>Recently there has been a lot of <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.chg95e5p6\">discussion around the tooling hurdle</a> when you start a React project. Luckily for Vue.js, all you need to do to start with a quick prototype is including it from a CDN via a <code>&lt;script&gt;</code> tag, so we’ve got that part covered. However, that’s not how you’d build a real world application. In real world applications we inevitably need a certain amount of tooling to give us modularization, transpilers, pre-processors, hot-reload, linting and testing. These tools are necessary for the long-term maintainability and productivity of large projects, but the initial setup can be a big pain. This is why we are announcing <a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>, a simple CLI tool to help you quickly scaffold Vue.js projects with opinionated, battery-included build setups.</p>","more":"<h3 id=\"Just-The-Scaffolding\"><a href=\"#Just-The-Scaffolding\" class=\"headerlink\" title=\"Just The Scaffolding\"></a>Just The Scaffolding</h3><p>The usage looks like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g vue-cli</div><div class=\"line\">vue init webpack my-project</div><div class=\"line\"><span class=\"comment\"># answer prompts</span></div><div class=\"line\"><span class=\"built_in\">cd</span> my-project</div><div class=\"line\">npm install</div><div class=\"line\">npm run dev <span class=\"comment\"># tada!</span></div></pre></td></tr></table></figure>\n<p>All the CLI does is pulling down templates from the <a href=\"https://github.com/vuejs-templates\">vuejs-templates</a> organization on GitHub. Dependencies are handled via NPM, and build tasks are simply NPM scripts.</p>\n<h3 id=\"Official-Templates\"><a href=\"#Official-Templates\" class=\"headerlink\" title=\"Official Templates\"></a>Official Templates</h3><p>The purpose of official Vue project templates is providing opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.</p>\n<p>All official project templates are repos in the <a href=\"https://github.com/vuejs-templates\">vuejs-templates organization</a>. When a new template is added to the organization, you will be able to run <code>vue init &lt;template-name&gt; &lt;project-name&gt;</code> to use that template. You can also run <code>vue list</code> to see all available official templates.</p>\n<p>Current available templates include:</p>\n<ul>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify\">browserify</a> - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/browserify-simple\">browserify-simple</a> - A simple Browserify + vueify setup for quick prototyping.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack\">webpack</a> - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</p>\n</li>\n<li><p><a href=\"https://github.com/vuejs-templates/webpack-simple\">webpack-simple</a> - A simple Webpack + vue-loader setup for quick prototyping.</p>\n</li>\n</ul>\n<h3 id=\"Bring-Your-Own-Setup\"><a href=\"#Bring-Your-Own-Setup\" class=\"headerlink\" title=\"Bring Your Own Setup\"></a>Bring Your Own Setup</h3><p>If you are not happy with the official templates, you can fork these templates, modify them to fit your specific needs (or even create your own from scratch), and use them via <code>vue-cli</code> too, because <code>vue-cli</code> can work directly on GitHub repos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">vue init username/repo my-project</div></pre></td></tr></table></figure>\n<h3 id=\"Vue-Components-Everywhere\"><a href=\"#Vue-Components-Everywhere\" class=\"headerlink\" title=\"Vue Components Everywhere\"></a>Vue Components Everywhere</h3><p>There are different templates for different purposes: simple setups for quick prototyping, and full-featured setups for ambitious applications. A common feature among these templates though, is that they all support <code>*.vue</code> single file components. This means any third party Vue components written as valid <code>*.vue</code> files can be shared among projects using these setups, and simply be distributed over NPM - let’s create more reusable components!</p>"},{"title":"Vue.js 0.10 is here!","date":"2014-03-22T23:00:13.000Z","type":"{{type}}","yield":"{{>yield}}","_content":"\nVue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new `v-view` directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js [even faster](http://vuejs.org/perf/).\n\n<!-- more -->\n\nSee the [Installation](/guide/installation.html) page for the latest builds.\n\n### New\n\n- Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with `v-component=\"{{type}}\"`. [Doc](/guide/directives.html#Literal_Directives).\n- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.\n- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. [Doc](/guide/list.html#Using_an_Identifier).\n- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. [Doc](/api/directives.html#v-view).\n- Added `filterBy` and `orderBy` filters for `v-repeat`. [Doc](/api/filters.html#filterBy).\n- Custom filters that access properties on its `this` context will be considered **computed filters**. [Doc](/guide/custom-filter.html#Filter_Context).\n- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=\"click:handle('hello', $event)\">Hello</a>`\n- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [\"[\", \"]\"] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.\n\n### Changed\n\n- `{{yield}}` syntax has been deprecated. A Web Components spec compatible content insertion mechanism using `<content>` elements has been introduced. [Doc](/guide/components.html#Content_Insertion).\n- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.\n- `v-repeat` Arrays' augmented methods have been renamed from `set` to `$set(index, value)` and `remove` to `$remove(index | value)`. The prefix better differentiates them from native methods. The `replace` method has been removed.\n- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.\n- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.\n- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.\n- Production build now strips all warnings and debug logs. To leverage `debug: true`, use the development version. The development version now has more detailed warning messages.\n\n### Fixed\n\n- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.\n- `parent` option now works properly when used in `Vue.extend`\n- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.\n\n### Internal\n\n- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.\n- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.\n- `template` option now directly clones native `<template>`'s content when available.\n- Overall performance improvements for both initialization and rendering.\n","source":"_posts/vuejs-010-release.md","raw":"---\ntitle: Vue.js 0.10 is here!\ndate: 2014-03-22 19:00:13\ntype: '{{type}}'\nyield: '{{>yield}}'\n---\n\nVue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new `v-view` directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js [even faster](http://vuejs.org/perf/).\n\n<!-- more -->\n\nSee the [Installation](/guide/installation.html) page for the latest builds.\n\n### New\n\n- Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with `v-component=\"{{type}}\"`. [Doc](/guide/directives.html#Literal_Directives).\n- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.\n- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. [Doc](/guide/list.html#Using_an_Identifier).\n- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. [Doc](/api/directives.html#v-view).\n- Added `filterBy` and `orderBy` filters for `v-repeat`. [Doc](/api/filters.html#filterBy).\n- Custom filters that access properties on its `this` context will be considered **computed filters**. [Doc](/guide/custom-filter.html#Filter_Context).\n- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=\"click:handle('hello', $event)\">Hello</a>`\n- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [\"[\", \"]\"] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.\n\n### Changed\n\n- `{{yield}}` syntax has been deprecated. A Web Components spec compatible content insertion mechanism using `<content>` elements has been introduced. [Doc](/guide/components.html#Content_Insertion).\n- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.\n- `v-repeat` Arrays' augmented methods have been renamed from `set` to `$set(index, value)` and `remove` to `$remove(index | value)`. The prefix better differentiates them from native methods. The `replace` method has been removed.\n- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.\n- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.\n- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.\n- Production build now strips all warnings and debug logs. To leverage `debug: true`, use the development version. The development version now has more detailed warning messages.\n\n### Fixed\n\n- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.\n- `parent` option now works properly when used in `Vue.extend`\n- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.\n\n### Internal\n\n- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.\n- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.\n- `template` option now directly clones native `<template>`'s content when available.\n- Overall performance improvements for both initialization and rendering.\n","slug":"vuejs-010-release","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnp000c91m1plxbruvk","content":"<p>Vue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new <code>v-view</code> directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js <a href=\"http://vuejs.org/perf/\">even faster</a>.</p>\n<a id=\"more\"></a>\n<p>See the <a href=\"/guide/installation.html\">Installation</a> page for the latest builds.</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li>Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with <code>v-component=&quot;{{type}}&quot;</code>. <a href=\"/guide/directives.html#Literal_Directives\">Doc</a>.</li>\n<li>Attributes listed in the <code>paramAttributes</code> option now accept mustache interpolations too. They will also only be evaluated once.</li>\n<li><code>v-repeat</code> now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. <a href=\"/guide/list.html#Using_an_Identifier\">Doc</a>.</li>\n<li>Added <code>v-view</code> directive which binds to a string value and dynamically instantiate different components using that string as the component ID. <a href=\"/api/directives.html#v-view\">Doc</a>.</li>\n<li>Added <code>filterBy</code> and <code>orderBy</code> filters for <code>v-repeat</code>. <a href=\"/api/filters.html#filterBy\">Doc</a>.</li>\n<li>Custom filters that access properties on its <code>this</code> context will be considered <strong>computed filters</strong>. <a href=\"/guide/custom-filter.html#Filter_Context\">Doc</a>.</li>\n<li>You can now access the event in <code>v-on</code> handler expressions as <code>$event</code>. Example: <code>&lt;a v-on=&quot;click:handle(&#39;hello&#39;, $event)&quot;&gt;Hello&lt;/a&gt;</code></li>\n<li>Interpolation delimiters can now be customized via the <code>delimiters</code> global config option. Example: <code>Vue.config({ delimiters: [&quot;[&quot;, &quot;]&quot;] })</code> will change the matched interpolation tags to <code>[[ ]]</code> for text bindings and <code>[[[ ]]]</code> for html bindings.</li>\n</ul>\n<h3 id=\"Changed\"><a href=\"#Changed\" class=\"headerlink\" title=\"Changed\"></a>Changed</h3><ul>\n<li><code>{{>yield}}</code> syntax has been deprecated. A Web Components spec compatible content insertion mechanism using <code>&lt;content&gt;</code> elements has been introduced. <a href=\"/guide/components.html#Content_Insertion\">Doc</a>.</li>\n<li>To use a component as a custom element, the component ID must now contain a hyphen (<code>-</code>). This is consistent with the current custom element spec draft.</li>\n<li><code>v-repeat</code> Arrays’ augmented methods have been renamed from <code>set</code> to <code>$set(index, value)</code> and <code>remove</code> to <code>$remove(index | value)</code>. The prefix better differentiates them from native methods. The <code>replace</code> method has been removed.</li>\n<li>When iterating over an Object with <code>v-repeat</code>, the object no longer gets a <code>$repeater</code> array. Instead, the object is now augmented with two methods: <code>$add(key, value)</code> and <code>$delete(key)</code>, which will trigger corresponding view updates.</li>\n<li><code>v-if</code> now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with <code>v-repeat</code>. Use <code>v-show</code> or the new built-in array filters instead.</li>\n<li><code>v-with</code> can no longer be used alone. It now must be used with either <code>v-component</code> or <code>v-view</code>. <code>v-component</code> can also be used as an empty directive just to create a child VM using the default <code>Vue</code> constructor.</li>\n<li>Production build now strips all warnings and debug logs. To leverage <code>debug: true</code>, use the development version. The development version now has more detailed warning messages.</li>\n</ul>\n<h3 id=\"Fixed\"><a href=\"#Fixed\" class=\"headerlink\" title=\"Fixed\"></a>Fixed</h3><ul>\n<li><code>event.stopPropagation()</code> and <code>event.preventDefault()</code> inside <code>v-on</code> handlers now work as expected.</li>\n<li><code>parent</code> option now works properly when used in <code>Vue.extend</code></li>\n<li>Mustache bindings inside <code>&lt;textarea&gt;</code> are now properly interpolated before being set as value.</li>\n</ul>\n<h3 id=\"Internal\"><a href=\"#Internal\" class=\"headerlink\" title=\"Internal\"></a>Internal</h3><ul>\n<li><code>v-component</code>, <code>v-with</code> and <code>v-if</code> have been re-written for a cleaner compile flow.</li>\n<li><code>v-repeat</code> has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.</li>\n<li><code>template</code> option now directly clones native <code>&lt;template&gt;</code>‘s content when available.</li>\n<li>Overall performance improvements for both initialization and rendering.</li>\n</ul>\n","excerpt":"<p>Vue.js 0.10.0 (Blade Runner) has been released! This release comes with many useful additions based on the suggestions from the users, notably interpolation in literal directives, dynamic components with the new <code>v-view</code> directive, array filters, and the option to configure interpolation delimiters. Internally, the codebase has received many refactoring and improvements which makes Vue.js <a href=\"http://vuejs.org/perf/\">even faster</a>.</p>","more":"<p>See the <a href=\"/guide/installation.html\">Installation</a> page for the latest builds.</p>\n<h3 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h3><ul>\n<li>Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with <code>v-component=&quot;{{type}}&quot;</code>. <a href=\"/guide/directives.html#Literal_Directives\">Doc</a>.</li>\n<li>Attributes listed in the <code>paramAttributes</code> option now accept mustache interpolations too. They will also only be evaluated once.</li>\n<li><code>v-repeat</code> now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. <a href=\"/guide/list.html#Using_an_Identifier\">Doc</a>.</li>\n<li>Added <code>v-view</code> directive which binds to a string value and dynamically instantiate different components using that string as the component ID. <a href=\"/api/directives.html#v-view\">Doc</a>.</li>\n<li>Added <code>filterBy</code> and <code>orderBy</code> filters for <code>v-repeat</code>. <a href=\"/api/filters.html#filterBy\">Doc</a>.</li>\n<li>Custom filters that access properties on its <code>this</code> context will be considered <strong>computed filters</strong>. <a href=\"/guide/custom-filter.html#Filter_Context\">Doc</a>.</li>\n<li>You can now access the event in <code>v-on</code> handler expressions as <code>$event</code>. Example: <code>&lt;a v-on=&quot;click:handle(&#39;hello&#39;, $event)&quot;&gt;Hello&lt;/a&gt;</code></li>\n<li>Interpolation delimiters can now be customized via the <code>delimiters</code> global config option. Example: <code>Vue.config({ delimiters: [&quot;[&quot;, &quot;]&quot;] })</code> will change the matched interpolation tags to <code>[[ ]]</code> for text bindings and <code>[[[ ]]]</code> for html bindings.</li>\n</ul>\n<h3 id=\"Changed\"><a href=\"#Changed\" class=\"headerlink\" title=\"Changed\"></a>Changed</h3><ul>\n<li><code>{{>yield}}</code> syntax has been deprecated. A Web Components spec compatible content insertion mechanism using <code>&lt;content&gt;</code> elements has been introduced. <a href=\"/guide/components.html#Content_Insertion\">Doc</a>.</li>\n<li>To use a component as a custom element, the component ID must now contain a hyphen (<code>-</code>). This is consistent with the current custom element spec draft.</li>\n<li><code>v-repeat</code> Arrays’ augmented methods have been renamed from <code>set</code> to <code>$set(index, value)</code> and <code>remove</code> to <code>$remove(index | value)</code>. The prefix better differentiates them from native methods. The <code>replace</code> method has been removed.</li>\n<li>When iterating over an Object with <code>v-repeat</code>, the object no longer gets a <code>$repeater</code> array. Instead, the object is now augmented with two methods: <code>$add(key, value)</code> and <code>$delete(key)</code>, which will trigger corresponding view updates.</li>\n<li><code>v-if</code> now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with <code>v-repeat</code>. Use <code>v-show</code> or the new built-in array filters instead.</li>\n<li><code>v-with</code> can no longer be used alone. It now must be used with either <code>v-component</code> or <code>v-view</code>. <code>v-component</code> can also be used as an empty directive just to create a child VM using the default <code>Vue</code> constructor.</li>\n<li>Production build now strips all warnings and debug logs. To leverage <code>debug: true</code>, use the development version. The development version now has more detailed warning messages.</li>\n</ul>\n<h3 id=\"Fixed\"><a href=\"#Fixed\" class=\"headerlink\" title=\"Fixed\"></a>Fixed</h3><ul>\n<li><code>event.stopPropagation()</code> and <code>event.preventDefault()</code> inside <code>v-on</code> handlers now work as expected.</li>\n<li><code>parent</code> option now works properly when used in <code>Vue.extend</code></li>\n<li>Mustache bindings inside <code>&lt;textarea&gt;</code> are now properly interpolated before being set as value.</li>\n</ul>\n<h3 id=\"Internal\"><a href=\"#Internal\" class=\"headerlink\" title=\"Internal\"></a>Internal</h3><ul>\n<li><code>v-component</code>, <code>v-with</code> and <code>v-if</code> have been re-written for a cleaner compile flow.</li>\n<li><code>v-repeat</code> has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.</li>\n<li><code>template</code> option now directly clones native <code>&lt;template&gt;</code>‘s content when available.</li>\n<li>Overall performance improvements for both initialization and rendering.</li>\n</ul>"},{"title":"Why Vue.js doesn't support templateURL","date":"2015-10-28T14:56:00.000Z","_content":"\nA very common question from new Vue users, especially those who used Angular before, is \"can I have `templateURL`?\". I have answered this so many times and I figure it's better to write something about it.\n\n<!-- more -->\n\nIn Angular, `templateURL` or `ng-include` allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let's rethink what problem it solves.\n\nFirst, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it's in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there's no point in splitting them further apart.\n\nSecond, because `templateURL` loads the template via Ajax at runtime, you don't need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app's initial load performance. Now imagine you use `templateURL` for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don't know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app's initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in `$templateCache` - but that shows us a build step is, in fact, inevitable for any serious frontend development.\n\nSo, without `templateURL`, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with `<script type=\"x/template\">` also feels like a hack. Well, maybe it's time to up the game a bit and use a proper module bundler like [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). It might seem daunting if you've never dealt with them before, but trust me it's worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your [Vue components in a single file](http://vuejs.org/guide/single-file-components.html), with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.\n\nFinally, Vue does allow you to [lazy load your components](http://vuejs.org/guide/components.html#Async-Components), and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.\n\nThink in components, not templates.\n","source":"_posts/why-no-template-url.md","raw":"---\ntitle: \"Why Vue.js doesn't support templateURL\"\ndate: 2015-10-28 10:56:00\n---\n\nA very common question from new Vue users, especially those who used Angular before, is \"can I have `templateURL`?\". I have answered this so many times and I figure it's better to write something about it.\n\n<!-- more -->\n\nIn Angular, `templateURL` or `ng-include` allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let's rethink what problem it solves.\n\nFirst, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it's in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there's no point in splitting them further apart.\n\nSecond, because `templateURL` loads the template via Ajax at runtime, you don't need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app's initial load performance. Now imagine you use `templateURL` for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don't know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app's initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in `$templateCache` - but that shows us a build step is, in fact, inevitable for any serious frontend development.\n\nSo, without `templateURL`, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with `<script type=\"x/template\">` also feels like a hack. Well, maybe it's time to up the game a bit and use a proper module bundler like [Webpack](http://webpack.github.io/) or [Browserify](http://browserify.org/). It might seem daunting if you've never dealt with them before, but trust me it's worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your [Vue components in a single file](http://vuejs.org/guide/single-file-components.html), with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.\n\nFinally, Vue does allow you to [lazy load your components](http://vuejs.org/guide/components.html#Async-Components), and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.\n\nThink in components, not templates.\n","slug":"why-no-template-url","published":1,"updated":"2016-11-07T11:47:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ8jcjnq000d91m15gn2ovhi","content":"<p>A very common question from new Vue users, especially those who used Angular before, is “can I have <code>templateURL</code>?”. I have answered this so many times and I figure it’s better to write something about it.</p>\n<a id=\"more\"></a>\n<p>In Angular, <code>templateURL</code> or <code>ng-include</code> allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let’s rethink what problem it solves.</p>\n<p>First, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it’s in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there’s no point in splitting them further apart.</p>\n<p>Second, because <code>templateURL</code> loads the template via Ajax at runtime, you don’t need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app’s initial load performance. Now imagine you use <code>templateURL</code> for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don’t know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app’s initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in <code>$templateCache</code> - but that shows us a build step is, in fact, inevitable for any serious frontend development.</p>\n<p>So, without <code>templateURL</code>, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with <code>&lt;script type=&quot;x/template&quot;&gt;</code> also feels like a hack. Well, maybe it’s time to up the game a bit and use a proper module bundler like <a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"external\">Webpack</a> or <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">Browserify</a>. It might seem daunting if you’ve never dealt with them before, but trust me it’s worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your <a href=\"http://vuejs.org/guide/single-file-components.html\">Vue components in a single file</a>, with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.</p>\n<p>Finally, Vue does allow you to <a href=\"http://vuejs.org/guide/components.html#Async-Components\">lazy load your components</a>, and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.</p>\n<p>Think in components, not templates.</p>\n","excerpt":"<p>A very common question from new Vue users, especially those who used Angular before, is “can I have <code>templateURL</code>?”. I have answered this so many times and I figure it’s better to write something about it.</p>","more":"<p>In Angular, <code>templateURL</code> or <code>ng-include</code> allows the user to dynamically load a remote template file at runtime. This seems pretty convenient as a built-in feature, but let’s rethink what problem it solves.</p>\n<p>First, it allows us to write our template in a separate HTML file. This gives us proper syntax highlighting in editors, which is probably why many prefer to do so. But is splitting your JavaScript code and the template really the best way? For a Vue.js component, its template and its JavaScript is tightly coupled by nature - it’s in fact much simpler if things are just in the same file. The context switching of jumping back and forth between two files actually makes the development experience much worse. Conceptually, components are the basic building block of a Vue.js app, not templates. Every Vue.js template is coupled to an accompanying JavaScript context - there’s no point in splitting them further apart.</p>\n<p>Second, because <code>templateURL</code> loads the template via Ajax at runtime, you don’t need a build step in order to split up your files. This is convenient during development, but comes at a serious cost when you want to deploy it to production. Before HTTP/2 is universally supported, the number of HTTP requests is still probably the most critical factor in your app’s initial load performance. Now imagine you use <code>templateURL</code> for every component in your app - the browser needs to perform dozens of HTTP requests before even being able to display anything! In case you don’t know, most browsers limit the number of parallel requests it can perform to a single server. When you exceed that limit, your app’s initial rendering will suffer for every extra round trip the browser has to wait for. Sure, there are build tools that can help you pre-register all those templates in <code>$templateCache</code> - but that shows us a build step is, in fact, inevitable for any serious frontend development.</p>\n<p>So, without <code>templateURL</code>, how do we deal with the development experience problem? Writing templates as inline JavaScript strings is terrible, faking templates with <code>&lt;script type=&quot;x/template&quot;&gt;</code> also feels like a hack. Well, maybe it’s time to up the game a bit and use a proper module bundler like <a href=\"http://webpack.github.io/\">Webpack</a> or <a href=\"http://browserify.org/\">Browserify</a>. It might seem daunting if you’ve never dealt with them before, but trust me it’s worth it to take the leap. Proper modularization is a necessity if you want to build anything large and maintainable. More importantly, you get to write your <a href=\"http://vuejs.org/guide/single-file-components.html\">Vue components in a single file</a>, with proper syntax highlighting and the extra benefits of custom pre-processors, hot-reloading, ES2015 by default, autoprefixing and scoped CSS, which makes the development experience 10 times better.</p>\n<p>Finally, Vue does allow you to <a href=\"http://vuejs.org/guide/components.html#Async-Components\">lazy load your components</a>, and with Webpack it is trivially easy. Although this is only a concern when your initial bundle is so large that you are better off splitting it apart.</p>\n<p>Think in components, not templates.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}